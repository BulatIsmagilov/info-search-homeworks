--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.10
-- Dumped by pg_dump version 9.6.10

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ar_internal_metadata; Type: TABLE; Schema: public; Owner: ismglv
--

CREATE TABLE public.ar_internal_metadata (
    key character varying NOT NULL,
    value character varying,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.ar_internal_metadata OWNER TO ismglv;

--
-- Name: articles; Type: TABLE; Schema: public; Owner: ismglv
--

CREATE TABLE public.articles (
    id bigint NOT NULL,
    title character varying,
    keywords character varying,
    content character varying,
    url character varying,
    student_uuid character varying
);


ALTER TABLE public.articles OWNER TO ismglv;

--
-- Name: articles_id_seq; Type: SEQUENCE; Schema: public; Owner: ismglv
--

CREATE SEQUENCE public.articles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.articles_id_seq OWNER TO ismglv;

--
-- Name: articles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ismglv
--

ALTER SEQUENCE public.articles_id_seq OWNED BY public.articles.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: ismglv
--

CREATE TABLE public.schema_migrations (
    version character varying NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO ismglv;

--
-- Name: students; Type: TABLE; Schema: public; Owner: ismglv
--

CREATE TABLE public.students (
    id bigint NOT NULL,
    name character varying,
    surname character varying,
    uuid character varying,
    "group" character varying
);


ALTER TABLE public.students OWNER TO ismglv;

--
-- Name: students_id_seq; Type: SEQUENCE; Schema: public; Owner: ismglv
--

CREATE SEQUENCE public.students_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.students_id_seq OWNER TO ismglv;

--
-- Name: students_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ismglv
--

ALTER SEQUENCE public.students_id_seq OWNED BY public.students.id;


--
-- Name: articles id; Type: DEFAULT; Schema: public; Owner: ismglv
--

ALTER TABLE ONLY public.articles ALTER COLUMN id SET DEFAULT nextval('public.articles_id_seq'::regclass);


--
-- Name: students id; Type: DEFAULT; Schema: public; Owner: ismglv
--

ALTER TABLE ONLY public.students ALTER COLUMN id SET DEFAULT nextval('public.students_id_seq'::regclass);


--
-- Data for Name: ar_internal_metadata; Type: TABLE DATA; Schema: public; Owner: ismglv
--

COPY public.ar_internal_metadata (key, value, created_at, updated_at) FROM stdin;
environment	development	2019-02-18 09:18:42.798878	2019-02-18 09:18:42.798878
\.


--
-- Data for Name: articles; Type: TABLE DATA; Schema: public; Owner: ismglv
--

COPY public.articles (id, title, keywords, content, url, student_uuid) FROM stdin;
1	Безумие дотфайлов	dotfiles скрытые файлы переменные среды базовые каталоги	Мы больше не контролируем свои домашние каталоги.\r\n\r\nВ моём собственном 25 обычных файлов и 144 скрытых. В дотфайлах хранятся данные, которые не принадлежат мне: они принадлежат программистам, чьи программы решили захватить моё пространство, предназначенное для хранения моих личных файлов. \r\n\r\nЯ не могу убрать эти файлы в другое место. Если я попытаюсь их удалить, они появятся снова. Всё, что я могу сделать — это сидеть и знать, что в темноте, за кулисами, они есть. Ожидание в тишине. Некоторые из этих программистов решили дополнительно разместить здесь несколько обычных файлов и каталогов. Они хорошо видны каждый раз, когда я выполняю ls. Понятия не имею, как в мою личную папку попали каталог node_modules, файлы package-lock.json, yarn.lock (я никогда сознательно даже не ставил yarn!), какие-то два странных лог-файла от какой-то Java-программы, явно использующей СУБД H2, и папка Desktop. Последнюю создал Steam, что довольно неудачно, поскольку на моей машине просто нет рабочего стола или какого-то десктопа. Боюсь того дня, когда услышу громкий стук в дверь — и один из этих программистов ворвётся и сообщит, что собирается хранить часть своей мебели посреди моей гостиной, если я не возражаю.\r\n\r\nДля тех из вас, кто это читает: умоляю вас. Не создавайте файлы или папки любого типа в пользовательском каталоге $HOME, чтобы хранить свои конфиги или данные. Такая практика по меньшей мере странная, и пришло время её прекратить. Мне жаль говорить, что многие, если не большинство программ виновны в этом, в то время как есть значительно лучшие места для хранения данных каждого пользователя.\r\n\r\nДаже если мы никогда не сможем решить эту проблему — из-за исторического наследия, обратной совместимости, старых версий софта или программистов-злодеев, хранящих файлы, где хотят, просто из вредности — мы можем хоть попытаться следовать вменяемым практикам. Хотя концептуальную ошибку внедрения «скрытых» файлов уже не отменить, можем хотя бы смягчить её последствия.\r\n\r\nЭта конкретная проблема замечена и давно решена с созданием Спецификации на расположение базовых каталогов (XDG). Она определяет набор переменных среды, указывающих программам на каталог, в котором должны храниться данные или конфигурация. Эти переменные устанавливает пользователь, так что если они не заданы, программа должна по умолчанию использовать каталог, определённый стандартом, а не домашний каталог пользователя.\r\n\r\nПеременные среды пользователя\r\n$XDG_DATA_HOME\r\n$XDG_DATA_HOME определяет базовый каталог, в котором должны храниться файлы данных пользователя. Если $XDG_DATA_HOME не определена или содержит пустое значение, то по умолчанию должно использоваться значение равное $HOME/.local/share.\r\nПример использования: хранение плагинов, загруженных пользователем, баз данных, созданных программой, истории ввода, закладок, электронных писем и так далее.\r\n\r\n$XDG_CONFIG_HOME\r\n$XDG_CONFIG_HOME определяет базовый каталог, в котором должны храниться конфигурационные файлы пользователя. Если $XDG_CONFIG_HOME не определена или содержит пустое значение, то по умолчанию должно использоваться значение равное $HOME/.config.\r\nЭтот каталог следует использовать для хранения пользовательских файлов конфигурации программы. При первом выполнении программы, вероятно, разумно создать файл с разумными значениями по умолчанию.\r\n\r\n$XDG_CACHE_HOME\r\n$XDG_CACHE_HOME определяет базовый каталог, в котором должны храниться несущественные (кэшированные) данные пользователя. Если $XDG_CACHE_HOME не определена или содержит пустое значение, то по умолчанию должно использоваться значение равное $HOME/.cache.\r\nПример: кэширование картинок предпросмотра из файл-менеджера, песен, которые пользователь часто слушает через стриминговый сервис, и так далее. Программа должна продолжать функционировать без каких-то проблем, если этот каталог будет удалён пользователем. Убедитесь, что ненужные файлы правильно удалены. Помните, что превышение вашими файлами разумного объёма дискового пространства, скорее всего, расстроит пользователя, который быстро вычислит виновника в лице вашей программы.\r\n\r\n$XDG_RUNTIME_DIR\r\n$XDG_RUNTIME_DIR определяет каталог, в котором должны храниться несущественные файлы среды выполнения и другие объекты (например, сокеты, именованные каналы...).\r\nСпецификация перечисляет ряд требований для этого каталога. Указано, что его следует использовать для хранения сокетов и других файлов, которые используются в коммуникациях.\r\n\r\nСистемные переменные\r\n$XDG_CONFIG_DIRS\r\n$XDG_CONFIG_DIRS определяет порядок предпочтений для базовых каталогов, в которых будет произведён поиск конфигурационных файлов, в дополнение к $XDG_CONFIG_HOME. Каталоги в переменной $XDG_CONFIG_DIRS должны быть разделены двоеточием.\r\n\r\nЕсли $XDG_CONFIG_DIRS не определена или содержит пустое значение, то по умолчанию должно использоваться значение равное /etc/xdg.\r\nЭтот каталог следует использовать для файлов конфигурации системного уровня. Эту конфигурацию могут переопределить пользовательские файлы конфигурации. Скорее всего, этот каталог используется в процессе установки.\r\n\r\n$XDG_DATA_DIRS\r\n$XDG_DATA_DIRS определяет порядок предпочтений для базовых каталогов, в которых будет произведен поиск файлов с данными, в дополнение к $XDG_DATA_HOME. Каталоги в переменной $XDG_DATA_DIRS должны быть разделены двоеточием.\r\n\r\nЕсли $XDG_DATA_DIRS не определена или содержит пустое значение, то по умолчанию должно использоваться значение равное /usr/local/share/:/usr/share/.\r\nПример: сохранение плагинов или тем, которые используются всеми пользователями. Скорее всего, этот каталог используется в процессе установки.\r\n\r\nКак это работает на практике?\r\nИспользовать стандарт очень просто. Прочитайте соответствующую переменную, а если она отсутствует, то используйте дефолтные пути, определённые стандартом. Там создайте каталог для программы и храните свои данные.\r\n\r\nНапример, файлы конфигурации храните в каталоге $XDG_CONFIG_HOME/your-program, а не просто в $XDG_CONFIG_HOME. И никогда не прописывайте в программе путь по умолчанию из стандарта, а сначала прочитайте переменную среды, чтобы дать возможность пользователю определить эти каталоги, если ему необходимо.\r\n\r\nВы можете легко перенести существующие программы на использование этого стандарта. Для этого при создании новых файлов начните использовать стандарт, но продолжайте проверять старое расположение файлов при их чтении. Это позволит выполнить миграцию, не нарушая работу программы для пользователей с файлами конфигурации или данными, созданными предыдущей версией программы.\r\n\r\nПрочитайте стандарт, чтобы узнать больше и взглянуть на иерархию каталогов, которая почти наверняка уже присутствует в вашем домашнем каталоге. В реальности для вашего языка программирования доступна кросс-платформенная библиотека, позволяющая определить каталог для хранения ваших данных. В Linux и подобных системах эта библиотека наверняка будет использовать Спецификацию на расположение базовых каталогов.	https://habr.com/ru/post/440620/	1ef080ca-09a9-474e-afa6-71cea68b971e
2	Откуда растут ноги у Java Memory Model	java java memory model jmm concurrency multithreading programming	Современное железо и компиляторы готовы перевернуть с ног на голову наш код, лишь бы он работал быстрее. А их производители тщательно скрывают свою внутреннюю кухню. И все прекрасно, пока код выполняется в одном потоке. \r\n\r\nВ многопоточной среде можно волей-неволей наблюдать интересные вещи. Например выполнение инструкций программы не в том порядке, как написано в исходном коде. Согласитесь, неприятно осознавать, что выполнение исходного кода строчка за строчкой это всего лишь наша фантазия. \r\n\r\nНо все уже осознали, ведь жить с этим как-то надо. А Java программисты даже неплохо живут. Потому что в Java есть модель памяти — Java Memory Model (JMM), которая предоставляет достаточно простые правила для написания корректного многопоточного кода. \r\n\r\nИ правил этих достаточно для большинства программ. Если вы их не знаете, но пишите или хотите писать многопоточные программы на Java, то лучше как можно скорее ознакомиться с ними. А если знаете, но вам не хватает контекста или интересно узнать откуда растут ноги у JMM, тогда статья может вам помочь.\r\n\r\nИ абстракцией погоняет\r\nВ моем представлении существует пирог, или, что более подходящее — айсберг. JMM это верхушка айсберга. Под водой сам айсберг — теория многопоточного программирования. Под айсбергом — Ад. \r\n\r\n\r\n\r\nАйсберг — это абстракция, если она протечет, то Ад мы конечно же увидим. Хоть там и происходит масса всего интересного, в обзорной статье до этого мы не доберемся. \r\n\r\nВ статье меня больше интересуют следующие темы: \r\n\r\n\r\nТеория и терминология\r\nКак теория многопоточного программирования отражается на JMM\r\nМодели конкурентного программирования\r\n\r\nТеория многопоточного программирования позволяет уйти от сложности современных процессоров и компиляторов, она позволяет моделировать выполнение многопоточных программ и изучать их свойства. Роман Елизаров сделал отличный доклад, цель которого дать теоретическую базу для понимания JMM. Рекомендую доклад всем, кто интересуется данной темой. \r\n\r\nПочему так важно знать теорию? На мой взгляд, надеюсь только на мой, у некоторых программистов бытует мнение, что JMM это усложнение языка и латание каких-то проблем платформы с многопоточностью. Теория показывает, что в Java не усложнили, а упростили и сделали более предсказуемым очень сложное многопоточное программирование. \r\n\r\nКонкуренция и параллелизм\r\nДля начала давайте рассмотрим терминологию. К сожалению, в терминологии нет консенсуса — изучая разные материалы, вы можете встретить различные определения конкуренции и параллелизма.\r\n\r\nПроблема в том, что даже если мы докопаемся до истины и найдем точные определения этим понятиям, то все равно вряд ли стоит рассчитывать, что все будут подразумевать то же самое под этими понятиями. Концов тут не найдешь.\r\n\r\nРоман Елизаров, в докладе теория параллельного программирования для практиков говорит о том что, иногда эти понятия смешивают. Иногда выделяют параллельное программирование как общее понятие, которое разделяется на конкурентное и распределенное.\r\n\r\nМне кажется, что в контексте JMM нужно все таки разделять конкуренцию и параллелизм или скорее даже понимать, что есть две разные парадигмы, как бы они не назывались. \r\n\r\nЧасто цитируют Роба Пайка, который различает понятия следующим образом:\r\n\r\n\r\nКонкуренция — это способ одновременного решения множества задач\r\nПараллелизм — это способ выполнения разных частей одной задачи\r\n\r\nМнение Роба Пайка не является эталоном, но на мой взгляд, от него удобно отталкиваться для дальнейшего изучения вопроса. Подробнее про различия можно почитать тут.\r\n\r\nСкорее всего больше понимания в вопросе появится, если мы выделим основные признаки конкурентной и параллельной программы. Признаков достаточно много, рассмотрим самые значимые.\r\n\r\nПризнаки конкуренции.\r\n\r\n\r\nНаличие нескольких потоков управления (например Thread в Java, корутина в Kotlin), если поток управления один, то конкурентного выполнения быть не может\r\nНедетерминированный результат выполнения. Результат зависит от случайных событий, реализации и того как была проведена синхронизация. Даже если каждый поток полностью детерминированный, итоговый результат будет недетерминированным\r\n\r\nПараллельная программа будет обладать другим набором признаков.\r\n\r\n\r\nНеобязательно имеет несколько потоков управления\r\nМожет приводить к детерминированному результату, так например, результат умножения каждого элемента массива на число, не изменится, если умножать его по частям параллельно\r\n\r\nКак ни странно, параллельное выполнение возможно на одном потоке управления, и даже на одноядерной архитектуре. Дело в том, что параллелизм на уровне задач (или потоков управления) к которому мы привыкли, это не единственный способ выполнять вычисления параллельно.\r\n\r\nПараллелизм возможен на уровне:\r\n\r\n\r\nбитов (например в 32-разрядных машинах сложение происходит в одно действие, параллельно обрабатывая все 4 байта 32-разрядного числа)\r\nинструкций (на одном ядре, в одном потоке процессор может выполнять инструкции параллельно, несмотря на то что код последовательный)\r\nданных (существуют архитектуры с параллельной обработкой данных (Single Instruction Multiple Data), способные выполнять одну инструкцию на большом наборе данных)\r\nзадач (подразумевается наличие нескольких процессоров или ядер)\r\n\r\nПараллелизм на уровне инструкции это один из примеров оптимизаций, которые происходят с выполнением кода, и которые скрываются от программиста.\r\n\r\nГарантируется, что оптимизированный код будет эквивалентен исходному в рамках одного потока, потому что невозможно писать адекватный и предсказуемый код, если он будет делать не то, что подразумевал программист. \r\n\r\nНе все то, что исполняется параллельно имеет значение для JMM. Параллельное выполнение на уровне инструкций в рамках одного потока не рассматривается в JMM. \r\n\r\nТерминология очень шаткая, у Романа Елизарова доклад называется “Теория параллельного программирования для практиков”, хотя там больше именно про конкурентное программирование, если придерживаться вышесказанного.\r\n\r\nВ контексте JMM в статье я буду придерживаться термина конкуренция, так как конкуренция часто про общее состояние. Но тут надо быть аккуратным, не цепляться за термины, но понимать, что существуют разные парадигмы. \r\n\r\nМодели с общим состоянием: “чередование операций” и “произошло до”\r\nВ своей статье Морис Херлихи (автор книги The Art Of Multiprocessor programming) пишет, что конкурентная система содержит коллекцию последовательных процессов (в теоретических трудах означает то же самое, что и поток), которые коммуницируют через общую память. \r\n\r\nМодель с общим состоянием включает в себя вычисления с передачей сообщений, где разделяемое состояние это очередь сообщений и вычисления с разделяемой памятью, где общим состоянием являются структуры в памяти.\r\n\r\nКаждое из вычислений можно моделировать.\r\n\r\nВ основе модели лежит конечный автомат. Модель фокусируется исключительно на разделяемом состоянии и полностью игнорируется локальные данные каждого из потоков. Каждое действие потоков над разделяемом состоянием является функцией перехода в новое состояние.\r\n\r\nТак например, если 4 потока записывают данные в разделяемую переменную, то будет 4 функции перехода в новое состояние. Какая из этих функций будет применена, зависит от хронологии событий в системе. \r\n\r\nВычисления с передачей сообщений моделируются похожим образом, только состояние и функции перехода зависят от посылки или приема сообщений. \r\n\r\nЕсли модель показалась вам сложной, то в примере мы исправим это. Она действительно очень проста и интуитивно понятна. Настолько, что не зная про существование этой модели, большинство людей все равно будут анализировать программу как предполагает модель. \r\n\r\nТакую модель называют — модель исполнения через чередование операций (название услышал в докладе Романа Елизарова). \r\n\r\nВ плюсы модели можно смело записывать интуитивность и естественность. В дебри можно уходить по ключевым словам Sequential consistency и работе Лесли Лэмпорта.\r\n\r\nОднако есть важное уточнение насчет данной модели. Модель имеет ограничение, что все действия над разделяемым состоянием должны быть моментальными и при этом действия не могут происходить одновременно. Говорят, что такая система имеет линейный порядок — все действия в системе упорядочены. \r\n\r\nНа практике такого не происходит. Операция не происходит моментально, а выполняется в интервале, на многоядерных системах эти интервалы могут пересекаться. Конечно это не означает, что модель бесполезна на практике, просто нужно создать определенные условия для ее использования.\r\n\r\nА пока рассмотрим другую модель — “произошло до”, которая фокусируется не на состоянии, а на множестве операций чтения и записи ячеек памяти во время исполнения (истории) и их отношениях.\r\n\r\nМодель говорит, что события в разных потоках проходят не мгновенно и атомарно, а параллельно, и не возможно выстроить порядок между ними. События (запись и чтение разделяемых данных) в потоках на многопроцессорной или многоядерной архитектуре происходят действительно параллельно. В системе отсутствует понятие глобального времени, мы не можем понять когда закончилась одна операция и началась другая. \r\n\r\nНа практике это означает, что мы можем в одном потоке записать в переменную значение и сделать это, скажем утром, и прочитать из этой переменной значение в другом потоке вечером, и мы не можем сказать, что мы точно прочитаем значение записанное утром. В теории эти операции проходят параллельно и не ясно когда закончится одна и начнется другая операция. \r\n\r\nЭто трудно вообразить, как так получается, что простые операции чтения и записи сделанные в разное время суток проходят одновременно. Но если задуматься, то нам действительно не важно время когда происходят события записи и чтения, если мы не можем гарантировать, что мы увидим результат записи.\r\n\r\nА мы действительно можем не увидеть результат записи, т.е. в переменную значение которой является 0 в потоке P мы записываем 1, а в потоке Q читаем эту переменную. Неважно сколько пройдет физического времени после записи, мы все равно можем прочитать 0. \r\n\r\nТак работают компьютеры и модель это отражает. \r\n\r\nМодель совсем абстрактная и для удобной работы нуждается в визуализации. Для визуализации и только для нее используется модель с глобальным временем, с оговорками, что при доказательстве свойств программ глобальное время не используется. В визуализации каждое событие представляется в виде интервала с началом и окончанием. \r\n\r\nСобытия проходят параллельно, как мы выяснили. Но все таки система имеет частичный порядок, так как есть особые пары событий, которые имеют порядок, в таком случае говорят, что эти события имеют отношение “произошло до”. Если вы впервые слышите про отношение “произошло до”, то наверное знание факта, что это отношение как бы упорядочивает события вам мало поможет.\r\n\r\nПробуем анализировать Java программу\r\nКакой-то теоретический минимум мы рассмотрели, давайте попробуем двинуться дальше и рассмотрим многопоточную программу на конкретном языке — Java, из двух потоков с общим изменяемым состоянием. \r\n\r\nКлассический пример.\r\n\r\nprivate static int x = 0, y = 0;\nprivate static int a = 0, b = 0;\n\nsynchronized (this) {\n    a = 0;\n    b = 0;\n    x = 0;\n    y = 0;\n}\n\nThread p = new Thread(() -> {\n    a = 1;\n    x = b;\n});\n\nThread q = new Thread(() -> {\n    b = 1;\n    y = a;\n});\n\np.start();\nq.start();\np.join();\nq.join();\n\nSystem.out.println("x=" + x + ", y=" + y);\n \r\nНам нужно смоделировать исполнения этой программы и получить все возможные результаты — значения переменных x и y. Результатов будет несколько, как мы помним из теории, такая программа является недетерминированной.\r\n\r\nКак будем моделировать? Сразу хочется воспользоваться моделью чередования операций. Но модель “произошло до” говорит нам, что события в одном потоке параллельны событиям из другого потока. Поэтому модель чередования операций тут не уместна, если между операциями нет отношения “произошло до”. \r\n \r\nРезультат выполнения каждого потока всегда детерминирован, так как события в одном потоке всегда упорядочены, считайте, что они получают отношение “произошло до” даром. Но как события в разных потоках могут получить отношение “произошло до” не совсем очевидно. Конечно же, это отношение формализовано в модели, вся модель написана математическим языком. Но что с этим делать на практике, в конкретном языке, сразу не разобрать.\r\n\r\nКакие есть варианты? \r\n\r\nПроигнорировать ограничения и моделировать чередованием. Попробовать то можно, возможно ничего страшного не случится. \r\n\r\nЧтобы понять какие результаты можно получить просто сделаем перебор всех возможных вариантов исполнения.\r\n\r\nВсе возможные исполнения программы можно представить в виде конечного автомата.\r\n\r\n\r\n\r\nКаждый круг это состояние системы, в нашем случае переменные a, b, x, y. Функция перехода это действие над состоянием, которое переводит систему в новое состояние. Так как над общим состоянием могут совершать действия два потока, то и перехода из каждого состояния будет два. Двойные круги это конечные и начальное состояния системы.\r\n\r\nВсего возможно 6 различных исполнений, которые в результате дают пары значений x, y: \r\n(1, 1), (1, 0), (0, 1)\r\n\r\n\r\n\r\nМожем запустить программу и проверить результаты. Как и полагается конкурентной программе, она будет иметь недетерминированный результат. \r\n\r\nДля тестирования конкурентных программ лучше использовать специальные инструменты (инструмент, доклад).\r\n\r\nНо можно попробовать запускать программу несколько миллионов раз, а еще лучше написать цикл, который это сделает за нас. \r\n\r\nЕсли мы запустим код на одноядерной или однопроцессорной архитектуре, то мы должны получить результат из набора, который ожидаем. Модель чередования будет прекрасно работать. На многоядерной архитектуре, например x86, нас может ждать сюрприз — мы можем получить результат (0,0), которого не может быть согласно нашему моделированию. \r\n\r\nОбъяснение этому можно поискать в интернете по ключевому слову — reordering. Сейчас важно понять, что моделирование чередованием действительно не подходит в ситуации, когда мы не можем определить порядок доступа к разделяемому состоянию.\r\n\r\nТеория конкурентного программирования и JMM\r\nПришло время рассмотреть подробнее отношение “произошло до” и как это дружит с JMM. Оригинальное определение отношения “произошло до” можно найти в документе Time, Clocks, and the Ordering of Events in a Distributed System. \r\n\r\nМодель памяти языка помогает в написании конкурентного кода, так как определяет какие операции имеют отношение “произошло до”. Список таких операций представлен в спецификации в разделе Happens-before Order. Фактически этот раздел отвечает на вопрос — при каких условиях мы увидим результат записи в другом потоке. \r\n\r\nВ JMM есть различные порядки. Очень бодро про порядки рассказывает Алексей Шипилёв в одном из своих докладов. \r\n\r\nВ модели с глобальным временем все операции в одном потоке имеют порядок. Например, события записи и чтения переменной, можно представить как два интервала, тогда модель нам гарантирует, что в рамках одного потока эти интервалы никогда не пересекутся. В JMM такой порядок называется — Program Order (PO).\r\n\r\nPO связывает действия в одном потоке и ничего не говорит о порядке исполнения, говорит только о порядке в исходном коде. Этого вполне достаточно, чтобы гарантировать детерминизм для каждого потока в отдельности. PO можно рассматривать как исходные данные. PO всегда просто расставить в программе — все операции (линейный порядок) в исходном коде в рамках одного потока будут иметь PO. \r\n\r\nВ нашем примере получится примерно следующее:\r\n\r\nP: a = 1 PO x = b — запись в a и чтение b имеет PO порядок \r\nQ: b = 1 PO y = a — запись в b и чтение a имеет PO порядок \r\n\r\nПодсмотрел такую форму записи w(a, 1) PO r(b): 0. Очень надеюсь, что ее никто не запатентовал для докладов. Впрочем в спецификации есть похожая форма.\r\n\r\nНо каждый поток в отдельности нам не особо интересен, так как у потоков есть общее состояние, нас больше интересует взаимодействие потоков. Все чего мы хотим — это быть уверенными в том, что мы увидим запись переменных в других потоках. \r\n\r\nНапомню, у нас это не получалось, потому что операции записи и чтения переменных в разных потоках не мгновенные (это отрезки, которые пересекаются), соответственно разобрать где начало и конец операций невозможно. \r\n\r\nИдея простая — в момент, когда мы читаем переменную a в потоке Q, запись этой самой переменной в потоке P могла еще не закончиться. И не важно сколько физического времени разделяют эти события — наносекунда или несколько часов.\r\n\r\nЧтобы упорядочить события нам нужно отношение “произошло до”. JMM определяет такое отношение. В спецификации закреплен порядок в одном потоке:\r\n\r\nЕсли операция x и y проходят в одном потоке и в PO сначала происходит x, а потом y, тогда x произошло до y. \r\n\r\n\r\nЗабегая вперед, можно сказать, что мы можем заменить все PO на Happens-before (HB):\r\n\r\nP: w(a, 1) HB r(b)\nQ: w(b, 1) HB r(a)\r\nНо снова мы вертимся в рамках одного потока. HB возможно между операциями, происходящими в разных потоках, чтобы разобраться с этими случаями познакомимся с другими порядками. \r\n\r\nSynchronization Order (SO) — связывает Synchronization Actions (SA), полный список SA приведен в спецификации, в разделе 17.4.2. Actions. Вот некоторые из них:\r\n\r\n\r\nЧтение volatile переменной\r\nЗапись volatile переменной\r\nLock монитора\r\nUnlock монитора\r\n\r\nSO нам интересен, так как обладает свойством, что все чтения в SO порядке видят последние записи в SO. А я напомню, мы только этого и добиваемся. \r\n\r\nНа этом месте я еще раз повторю чего мы добиваемся. У нас есть многопоточная программа, мы хотим смоделировать все возможные исполнения и получить все результаты, которые она может дать. Есть модели, которые позволяют это сделать достаточно просто. Но они требуют, чтобы все действия над разделяемым состоянием были упорядочены.\r\n\r\nСогласно свойству SO — если все действия в программе будут SA тогда мы добьемся своего. Т.е. мы можем расставить для всех переменных модификатор volatile и можем использовать модель чередований. Если интуиция подсказывает вам, что так делать не стоит, то вы абсолютно правы. Этими действиями мы просто запретим оптимизации над кодом, конечно иногда это хороший вариант, но это точно не общий случай. \r\n\r\nРассмотрим еще один порядок Synchronizes-With Order (SW) — SO для конкретных пар unlock/lock, запись/чтение volatile. Не важно в каких потоках будут эти действия, главное чтобы они были над одним монитором, volatile переменной. SW дает “мостик” между потоками.\r\n\r\nИ вот теперь мы подошли к самому интересному порядку — Happens-before (HB).\r\nHB является транзитивным замыканием объединений SW и PO. PO дает линейный порядок внутри потока, а SW “мостик” между потоками. HB транзитивно, т.е. если \r\n\r\nx HB y и y HB z, тогда x HB z\r\nВ спецификации есть список HB отношений, с ним можно подробнее ознакомиться, вот некоторые из списка:\r\n\r\nВ рамках одного поток любая операция happens-before любой операцией следующей за ней в исходном коде.\r\n\r\nВыход из synchronized блока/метода happens-before вход в synchronized блок/метод на том же мониторе.\r\n\r\nЗапись volatile поля happens-before чтение того же самого volatile поля.\r\n\r\nВернемся к нашему примеру:\r\n\r\nP: a = 1 PO x = b\nQ: b = 1 PO y = a\r\nВернемся к нашему примеру и попробуем проанализировать программу, с учетом порядков. \r\n\r\nАнализ программы с помощью JMM основывается на выдвижении каких-либо гипотез и их подтверждения или опровержения.\r\n\r\n\r\n\r\nАнализ начнем с выдвижения гипотезы, что ни одно исполнение программы не дает результат (0, 0). Отсутствие результата (0, 0) на всех исполнения это предполагаемое свойство программы.\r\n\r\nПроверяем гипотезу, строя разные исполнения.\r\n\r\nНоменклатуру подсмотрел здесь (иногда встречается вместо … слово race со стрелочкой, сам Алексей использует в докладах стрелочку и слово race, но предупреждает, что такого порядка нет в JMM и использует такое обозначение для ясности).\r\n\r\nСделаем небольшую оговорку. \r\n\r\nТак как нам важны все действия над общими переменными, а в примере общие переменные — a, b, x, y. Тогда, например, операцию x = b нужно рассматривать, как r(b) и w(x, b), причем r(b) HB w(x,b) (исходя из PO). Но так как переменная x в потоках нигде не читается (чтение в print в конце кода не интересно, так как после операции join на потоке мы увидим значение x), то можно не рассматривать действие w(x, b).\r\n\r\nПроверяем первое исполнение.\r\n\r\nw(a, 1) HB r(b): 0 … w(b, 1) HB r(a): 0\r\nВ потоке Q читаем переменную a, записываем в эту переменную в потоке P. Между записью и чтением нет никакого порядка (PO, SW, HB). \r\n\r\nЕсли запись переменной происходит в одном потоке, а чтение в другом потоке и при этом между операциями нет отношения HB, то говорят, что чтение переменной происходит под гонкой. А под гонкой согласно JMM мы можем прочитать либо последнее записанное значение в HB, либо любое другое значение. \r\n\r\nТакое исполнение возможно. Исполнение не нарушает JMM. При чтении переменной a, можно увидеть любое значение, так как чтение происходит под гонкой и нет гарантии, что увидим действие w(a, 1). Это не означает, что программа работает корректно, просто означает, что такой результат ожидаем. \r\n\r\nРассматривать остальные исполнения смысла нет, так как гипотеза уже разрушена.\r\n\r\nJMM говорит, что если программа не имеет гонок данных, тогда все выполнения можно рассматривать как последовательные. Давайте избавимся от гонки, для этого нам нужно упорядочить операциями чтения и записи в разных потоках. Тут важно понимать, что многопоточная программа, в отличие от последовательной, имеет несколько исполнений. И чтобы говорить, что программа имеет какое-либо свойство, то требуется доказать, что это свойство программа имеет не на одном из исполнений, а на всех исполнениях.\r\n\r\nЧтобы доказать, что программа без гонок, нужно это сделать для всех исполнений. Давайте попробуем сделать SA и отметим переменную a модификатором volatile. Volatile переменные будем помечать префиксом v.\r\n\r\nВыдвигаем новую гипотезу. Если переменную a сделать volatile, то ни одно исполнение программы не даст результат (0, 0).\r\n\r\nw(va, 1) HB r(b): 0 … w(b, 1) HB r(va): 0\r\nИсполнение не нарушает JMM. Чтение va происходит под гонкой. Любая гонка разрушает транзитивность HB.\r\n\r\nВыдвигаем еще гипотезу. Если переменную b сделать volatile, то ни одно исполнение программы не даст результат (0, 0).\r\n\r\nw(a, 1) HB r(vb): 0 … w(vb, 1) HB r(a): 0\r\nИсполнение не нарушает JMM. Чтение a происходит под гонкой.\r\n\r\nДавайте проверим гипотезу, что если переменные a и b volatile, то ни одно исполнение программы не даст результат (0, 0).\r\n\r\nПроверяем первое исполнение.\r\n\r\nw(va, 1) SO r(vb): 0 SO w(vb, 1) SO r(va): 0\r\nТак как все действия в программе SA (конкретно чтение или запись volatile переменной), то мы получаем полный SO порядок между всеми действиями. Это означает, что r(va) должно увидеть w(va, 1). Данное исполнение нарушает JMM. \r\n\r\nНужно переходить к следующему исполнению, чтобы подтвердить гипотезу. Но так как при любом исполнении будет SO, можно отступиться от формализма — очевидно, что результат (0, 0) при любом исполнении нарушает JMM.\r\n\r\nЧтобы использовать модель чередования нужно добавить volatile для переменных a и b. Такая программа даст результаты (1,1), (1,0) или (0,1).\r\n\r\nВ итоге можно сказать, что очень простые программы достаточно просто анализировать.\r\n\r\nНо сложные программы с большим количеством исполнений и разделяемых данных, анализировать достаточно сложно, так как нужно проверять все исполнения.\r\n\r\nДругие модели конкурентного выполнения\r\nЗачем рассматривать другие модели конкурентного программирования? \r\n\r\nС помощью потоков и примитивов синхронизации можно решить все проблемы. Это все действительно так, но проблема в том, что мы рассмотрели пример из десятка строк кода, где полезную работу делают 4 строчки кода. \r\n\r\nИ столкнулись там с кучей вопросов, вплоть до того, что мы без спецификации даже все возможные результаты правильно посчитать не смогли. Потоки и примитивы синхронизации это очень непростая вещь, использование которой безусловно оправдана в некоторых случаях. В основном эти случаи связаны с производительностью.\r\n\r\nИзвините, что много ссылаюсь на Елизарова, но что поделать, если человек действительно имеет опыт в этой области. Так вот, у него есть еще один замечательный доклад “Миллионы котировок в секунду на чистой Java”, в котором он говорит, что неизменяемое состояние это хорошо, но свои миллионы котировок копировать в каждый поток, извините, не буду. Но не у всех миллионы котировок, у многих конечно же задачи скромнее. Есть ли модели конкурентного программирования, которые позволяют забыть про JMM и все равно писать безопасный конкурентный код?\r\n\r\nЕсли вам действительно очень интересен этот вопрос, очень рекомендую книгу Пола Батчера “Семь моделей конкуренции за семь недель. Раскрываем тайны потоков”. К сожалению про автора найти достаточно информации не удалось, но книга должна открыть вам глаза на новые парадигмы. У меня, к сожалению, нет опыта работы с многими другими моделями конкуренции, так что обзор я получил именно из этой книги.\r\n\r\nОтвечая на вопрос выше. Насколько я понимаю, существуют модели конкурентного программирования, которые позволяют как минимум сильно уменьшить необходимость знания нюансов JMM. Однако, если есть изменяемое состояние и потоки, то какие абстракции над ними не наворачивай, все равно останется место, где эти потоки должны синхронизировать доступ к состоянию. Другой вопрос, что самому синхронизировать доступ возможно не придется, за это может отвечать фреймворк, например. Но как мы уже говорили, рано или поздно абстракция может протечь. \r\n\r\nМожно исключить изменяемое состояние совсем. В мире функционального программирования это нормальная практика. Если нет мутабельных структур, то вероятно, проблем с разделяемой памятью тоже не будет по определению. На JVM есть представители функциональных языков, например Clojure. Clojure является гибридным функциональным языком, так как все таки позволяет менять структуры данных, но предоставляет для этого более эффективные и безопасные инструменты. \r\n\r\nФункциональные языки отличный инструмент для работы с конкурентным кодом. Лично я не использую его, потому что моя сфера деятельности это мобильная разработка, а там это просто не является мейнстримом. Хотя определенные подходы можно перенять.\r\n\r\nДругой способ работать с изменяемыми данными — это исключить совместное использование данных. Такой моделью программирования являются акторы. Акторы упрощают программирование, за счет того что не допускают одновременный доступ к данным. Это достигается путем того, что функция, которая выполняет работу в один момент времени может работать только в одном потоке. \r\n\r\nОднако, актор может изменить внутреннее состояние. Учитывая, что в следующий момент времени, этот же актор может выполняться на другом потоке, то это может быть проблемой. Проблему можно решать по разному, в таких языках программирования, как Erlang или Elixir, где модель акторов является неотъемлемой частью языка, можно использовать рекурсию для вызова актора с новым состоянием.\r\n\r\nВ Java рекурсии могут обойтись слишком дорого. Впрочем в Java существуют фреймворки для удобной работы с этой моделью, самый популярный наверное Akka. Разработчики Akka обо всем позаботились, можно перейти в раздел документации Akka and the Java Memory Model и прочитать про два случая, когда может возникнуть доступ из разных потоков к разделяемому состоянию. Но что более важно, в документации написано какие события имеют отношение “произошло до”. Т.е. это означает, что мы можем изменять состояние актора сколько угодно, но когда мы примем следующее сообщение и возможно обработаем его в другом потоке, то мы гарантированно увидим все изменения, сделанные в другом потоке. \r\n\r\nПочему так популярна модель с потоками?\r\nМы рассмотрели две модели конкурентного программирования, на самом деле их еще больше, которые делают конкурентное программирование более простым и безопасным.\r\n\r\nНо почему тогда все еще так популярны потоки и блокировки? \r\n\r\nМне кажется причина в простоте подхода, конечно с одной стороны с потоками легко допустить много неочевидных ошибок, прострелить себе ногу и т.д. Но с другой стороны в потоках сложного ничего нет, особенно если не думать о последствиях.\r\n\r\nВ один момент времени ядро может выполнять одну инструкцию (на самом деле нет, параллелизм существует на уровне инструкций, но сейчас это не важно), но благодаря многозадачности даже на одноядерных машинах одновременно (конечно псевдо одновременно) может выполняться сразу нескольких программ. \r\n\r\nДля того чтобы многозадачность работала нужна конкуренция. Как мы уже разобрались конкуренция невозможно без нескольких потоков управления. \r\n\r\nКак вы думаете сколько потоков нужно программе, которая работает на четырехъядерном процессоре мобильного телефона, чтобы быть максимально быстрой и отзывчивой? \r\n\r\nИх может быть несколько десятков. Теперь вопрос, зачем нужно столько потоков программе, которая работает на железе позволяющем выполнять всего 2-4 потока одновременно?\r\n\r\nЧтобы попытаться ответить на этот вопрос, предположим, что на устройстве выполняется только наша программа и больше ничего. Как бы мы распорядились предоставленными нам ресурсами?\r\n\r\nМожно одно ядро отдать для пользовательского интерфейса, остальные ядра для любых других задач. Если один из потоков заблокируется, например, поток может обратиться к контроллеру памяти и ждать ответа, то мы получим заблокированное ядро. \r\n\r\nКакие технологии есть для решения проблемы?\r\n\r\nВ Java есть потоки, мы можем создать множество потоков, и тогда другие потоки смогут выполнять операции пока какой-то поток заблокирован. Имея такой инструмент, как потоки, мы можем упростить себе жизнь.\r\n\r\nПодход с потоками не бесплатный, создание потоков обычно занимает время (решается пулами потоков), под них выделяется память, переключение между потоками — дорогая операция. Но с ними относительно легко программировать, поэтому это массовая технология, которая так широко используется в языках общего назначения, например Java. \r\n\r\nВ Java вообще любят потоки, не обязательно создавать на каждое действие по потоку, там есть более высокоуровневые вещи, такие как Executors, которые позволяют работать с пулами и писать более масштабируемый и гибкий код. Потоки это действительно удобно, можно сделать блокирующий запрос в сеть и следующей строкой написать обработку результата. Даже если мы будем ждать результат несколько секунд, то все равно сможем выполнять другие задачи, так как операционная система позаботится о распределении процессорного времени между потоками. \r\n\r\nПотоки популярны не только в бэкенд разработке, в мобильной разработке считается вполне нормально создавать десятками потоки, чтобы можно было заблокировать поток на пару секунд, дожидаясь загрузки данных по сети или данных от сокета. \r\n\r\nЯзыки вроде Erlang или Clojure пока ещё остаются нишевыми, и соответственно модели конкурентного программирования, которые они используют не так популярны. Однако, прогнозы для них самые оптимистичные.\r\n\r\nВыводы\r\nЕсли вы разрабатывает на платформе JVM, то вам нужно принять правила игры, обозначенные платформой. Только так можно писать нормальный многопоточный код. Очень желательно понимать контекст всего происходящего, так будет проще принять правила игры. Еще лучше осмотреться по сторонам и ознакомиться с другими парадигмами, хоть с подводной лодки никуда не деться, но открыть для себя новые подходы и инструменты можно.\r\n\r\nДополнительные материалы\r\nЯ старался размещать в тексте статьи ссылки на источники из которых черпал информацию. \r\n\r\nВ целом материал по JMM легко найти в интернете. Здесь я размещу ссылки на некоторый дополнительный материал, который связан с JMM и возможно не сразу попадается на глаза.\r\n\r\nЧтение\r\n\r\n\r\nБлог Алексея Шипилёва — знаю, что очевидно, но просто грех не упомянуть\r\nБлог Черемина Руслана — последнее время не пишет активно, нужно искать в блоге его старые записи, поверьте это стоит того — там кладезь\r\nХабр Глеба Смирнова — есть отличные статьи про многопоточность и модель памяти\r\nБлог Романа Елизарова — заброшен, но археологические раскопки провести нужно. В целом Роман очень много сделал для просветления народа в области теории многопоточного программирования, ищите его в медиа.\r\n\r\nПодкасты\r\n\r\nВыпуски, которые мне показались особенно интересными. Они не про JMM, они про Ад, которые творится в железе. Но после их прослушивания, хочется целовать руки создателям JMM, которые оградили нас от этого всего.\r\n\r\n\r\nSDCast #62: в гостях Александр Титов и Амир Аюпов, инженеры из Intel и Алексей Маркин, программист из МЦСТ\r\nSDCast #63: в гостях Алексей Маркин, программист из МЦСТ\r\nРазбор Полетов: #107 Истории альпинистов\r\n \r\nРазбор Полетов: #154 Кишочки — Атака на Новый Год\r\n \r\n\r\nВидео\r\n\r\nКроме выступлений вышеупомянутых людей обратите внимание на академическое видео.\r\n\r\n\r\nComputer Science Center — Лекция 11. Модели памяти и проблемы видимости\r\n \r\nТеория и практика многопоточного программирования\r\n \r\n	https://habr.com/ru/post/440590/	1ef080ca-09a9-474e-afa6-71cea68b971e
3	Сколько доменных имён .com не используется?	.com пустые домены порно азартные игры HugeDomains GoDaddy	При поиске свободного имена в зоне .com меня неприятно удивило количество уже занятых, но неиспользуемых доменов. Судя по всему, зарегистрированы все произносимые комбинации букв на всех основных языках мира. И даже непроизносимые короткие комбинации. То ли существует большой рынок доменов, то ли мне просто на ум приходят те же имена, что и всем остальным? Посмотрим на голую статистику…\r\n\r\nВ настоящее время зарегистрировано 137 миллионов доменных имён .com. По данным Verisign, в «активной зоне» по состоянию на 27.01.2019 года есть 137 756 106 доменов .com. Перед этим я сверил корректность цифры с файлом DNS-зоны.\r\n\r\nИз них используется около трети (предприятия, личные веб-сайты, электронная почта и т. д.). Ещё треть, по-видимому, не используется, а последняя треть используется в различных спекулятивных целях.\r\n\r\nВот как используются домены (на выборке из 2188 штук):\r\n\r\n\r\n\r\nКак я получил эти цифры\r\nЯ начал краулинг со случайной выборки доменов верхнего уровня из DNS-файла зоны (файл скачан 21.01.2019, а краулинг продолжался до 23.01.2019), пока не достиг 100 000 валидных доменов (не все записи там валидные, некоторые выполняют роль ханипотов для ловли людей, которые нелегально распространяют файлы зоны, а примерно 1% являются нейм-серверами; после их исключения осталось 98 854 валидных доменов).\r\n\r\nДля каждого домена я собрал следующее:\r\n\r\n\r\nзапись WHOIS;\r\n\r\nвсе DNS-записи для доменов верхнего уровня и поддоменов www (DNS-запросом ANY напрямую к нейм-серверам, указанным в WHOIS-записи);\r\n\r\nответы HTTP и HTTPS (код состояния, заголовки и тела) для главной страницы домена верхнего уровня и поддомена www (невалидные SSL-сертификаты относили домен в категорию Error);\r\n\r\nскриншот главной страницы в Mozilla Firefox 64.0 под Linux.\r\n\r\nСканирование заняло чуть более 48 часов с одного сервера в сингапурском дата-центре. Затем я запустил второй этап краулинга для всех доменов, которые не смогли подключиться по HTTP или HTTPS (в случае временных ошибок). И, наконец, для 2188 доменов из выборки я вручную проверил все ошибки на случай, если краулер вышел по таймауту или события DOM оказались заблокированы в JavaScript.\r\n\r\nЗатем я написал вспомогательный скрипт для ускорения ручной классификации сайтов на основе их скриншота и содержимого.\r\n\r\n\r\nСкрипт представляет возможные категории в виде списка кнопок с содержимым по умолчанию\r\n\r\nС помощью этого скрипта я выполнил категоризацию сайтов за два дня. Не все сайты пришлось различать вручную: в некоторых случаях категория была очевидной по полю <title>, так что я применил регулярные выражения. В других случаях скриншота оказалось недостаточно, поэтому пришлось вручную открывать домен в браузере для проверки.\r\n\r\nСводная статистика и выводы\r\nТоп-10 регистраторов .com из выборки в 100 000 доменов\r\n\r\n\r\n\r\nGoDaddy зарегистрировал треть всех доменных имён. Это примерно 45 миллионов доменов. Из них на каждом третьем парковочные страницы. Иными словами, более 10% всех доменов .com в интернете размещают объявления GoDaddy.\r\n\r\nХотя в выборке 1851 регистратор, они управляются небольшим числом операторов. Например, только DropCatch.com контролирует более тысячи регистраторов: DropCatch.com 1000 LLC, DropCatch.com 1001 LLC, DropCatch.com 1002 и так далее; аналогичные схемы с номерами используют и другие регистраторы, но у некоторых не столь очевидные схемы.\r\n\r\nЗа последний год зарегистрировано 25% доменов.\r\n\r\nВозраст доменов из выборки в 100 000 штук (в годах)\r\n\r\n\r\nКатегории доменов\r\nСписок категорий дополнялся по мере работы. Например, я не ожидал большого количества доменов для азартных игр (под алиасами).\r\n\r\nДля большинства категорий приводится случайная выборка скриншотов.\r\n\r\nКонтент (31% или ~43 млн)\r\nКонтент — домен с любым уникальным контентом. Это категория по умолчанию, куда я помещал любые сайты в случае сомнений.\r\n\r\n\r\n\r\nРеклама (23% или ~31 млн)\r\nОбратите внимание, что половина доменов в этой категории — страницы паркинга GoDaddy, на которых GoDaddy размещает объявления Google по ключевым словам, связанным с доменным именем.\r\n\r\n\r\n\r\nНет веб-сервера (11% или ~16 млн)\r\nЕсли мне не удалось подключиться или получить валидный ответ по порту 80 или 443 для домена верхнего уровня или субдомена www, при этом у домена нет MX-записи, я помещал его в эту категорию. Некоторые из этих доменов, вероятно, используются как-то иначе, например, как FTP или игровые сервера, но мне кажется, таких меньшинство. Ещё сюда попали любые сайты на IPv6, потому что сервер краулера был настроен только для IPv4.\r\n\r\nПусто (9,2% или ~13 млн)\r\nПустой домен — тот, для которого веб-сервер отвечает на запросы, но возвращает пустые страницы, ошибки 404 или незаполненные шаблоны (например, установки WordPress по умолчанию).\r\n\r\nРазница между пустым и припаркованным доменом заключается в том, что пустой домен предположительно настроен пользователем, но содержимое ещё не добавлено.\r\n\r\n\r\n\r\nНа продажу (7,1% или ~9,8 млн)\r\nМногие домены выставляются на продажу через различных брокеров и торговые площадки. Почти половину из них, похоже, продаёт HugeDomains, хотя на их веб-сайте говорится лишь о «более 200 000» доменах, доступных для покупки. Я учитывал только домены от известных площадок или когда контактные данные не включались в состав рекламного объявления, потому что рекламные сети и брокеры часто врут, что представляют владельца домена (вместо этого я классифицировал все такие домены как объявления).\r\n\r\n\r\n\r\nОшибка (5,7% или ~7,9 млн)\r\nЕсли домен возвращал ошибку любого типа, будь то ошибка HTTP или ошибка на странице, я относил его к этой категории.\r\n\r\nОбратите внимание, что сюда могли случайно попасть некоторые приватные домены, если они использовали обычную аутентификацию, поскольку я не отличал 403 Forbidden (из-за отсутствия базовых учётных данных для аутентификации) от других ошибок.\r\n\r\n\r\n\r\nЗапаркован (4,8% или ~6,5 млн)\r\nЗапаркованные домены отображают страницу регистратора или сообщают, что домен ещё не настроен. Чтобы попасть в эту категорию, домен должен выдавать страницу без внешней рекламы. Он может рекламировать собственные услуги, но не может размещать объявления из рекламной сети.\r\n\r\n\r\n\r\nАзартные игры (3,0% или ~4 млн)\r\nПочти все сайты этой категории на китайском языке и работают под алиасами: часто это короткие строки цифр или согласных (например, 17770012 или tdwhtr). Они следуют общим шаблонам и содержат похожие изображения, часто с автоматически генерируемыми логотипами. Я предполагаю, что их цель — привлечь людей на удачу.\r\n\r\n\r\n\r\nПочта (2,6% или ~3,5 млн)\r\nЕсли домен не попадал ни в какую категорию, но у него есть MX-запись в DNS (для email), я относил его в категорию «Почта». Не проверял, работает ли почтовый сервер или доставка. Вполне возможно, что многие из этих доменов не используются для электронной почты.\r\n\r\nРедирект (1,1% или ~1,6 млн)\r\nСюда отнесены «домены тщеславия», которые отсылают на страницы Facebook, альтернативные названия компаний и т. д.\r\n\r\nПриватный (0,64% или ~0,9 млн)\r\nЭто сайты, на которых никакой контент не доступен без авторизации (или, в некоторых случаях, регистрации).\r\n\r\n\r\n\r\nПорно (0,59% или ~0,8 млн)\r\nКак и игорные сайты, многие порносайты работает под разными алиасами. Веб-сайты преимущественно на китайском языке, и домены следуют аналогичным шаблонам именования. Поскольку многие сайты отображают порнографический материал напрямую (без предупреждения), я не делал скриншоты.	https://habr.com/ru/post/440600/	1ef080ca-09a9-474e-afa6-71cea68b971e
4	Важные изменения в работе CTE в PostgreSQL 12	postgresql postgresql 12 sql	WITH w AS  NOT MATERIALIZED (\n    SELECT * \n    FROM very_very_big_table\n)\nSELECT * \nFROM w AS w1 \n    JOIN w AS w2 \n        ON w1.key = w2.ref\nWHERE w2.key = 123;\r\nСегодня в репозиторий PostgreSQL упал комит, позволяющий управлять поведением обработки подзапросов CTE, а именно: теперь можно явно указывать, будет ли подзапрос материализовываться отдельно или же выполняться как часть одного большого запроса.\r\nЭто войдет в PostgreSQL 12, и это big deal. Давайте рассмотрим, почему \r\nПрограммисты любят CTE, потому что это позволяет существенно улучшить читаемость кода. Ну действительно, некоторые аналитические запросы могут работать с десятками таблиц и различными группировками и фильтрами. Писать всё это одним большим запросом — гарантированно получится что-то нечитаемое. Поэтому с помощью оператора WITH мы последовательно, небольшими подзапросами (которым задается человекочитаемое имя) описываем логику работы, а потом выдаем результат. Очень удобно.\r\nТочнее, было бы очень удобно, если бы не одно но: текущий PostgreSQL выполняет эти подзапросы отдельно друг от друга, материализовывает их (записывает результат во временную таблицу). Это может привести к существенному замедлению по сравнению с одним большим нечитабельным монстром. Особенно, если CTE-подзапросы возвращают миллионы строк.\r\nВпрочем, бывают ситуации, когда такое отдельное выполнение работает во благо: есть такой оптимизационный трюк, когда часть сложного запроса лучше выполнить отдельно, а постгрес самостоятельно этого не понимает. Тогда мы выносим эту часть в CTE-подзапрос.\r\nВ общем, ситуации бывают разные, именно поэтому в Postgres 12 был сделан комит, добавляющий ключевые слова MATERIALIZED и NOT MATERIALIZED, которые указывают соответственно материализовывать ли запрос или инлайнить.\r\nБолее того, изменилось дефолтное поведение. Теперь CTE-подзапрос по умолчанию будет инлайниться, если его результат используется один раз. В противном случае будет как раньше материализовываться.	https://habr.com/ru/post/440576/	1ef080ca-09a9-474e-afa6-71cea68b971e
5	AudioKit и синтезирование звука в iOS/OSX	music synthesizers audiokit ios osx	\r\n\r\nAudioKit — это аудиофреймворк, разработанный аудиоинженерами, программистами и музыкантами специально для iOS и OSX. Он предоставляет инструменты для обработки и синтезирования звука. Под капотом — это смесь из Swift, Objective-C, C++ и С, и Audio Unit API от Apple. Потрясающие (и довольно сложные) технологии завёрнуты в очень дружелюбное Swift API, к которому можно обращаться прямо из Xcode Playgrounds!\r\n\r\nВ этом туториале мы отправимся в путешествие по AudioKit, а заодно и истории синтезирования звука. Вы узнаете об основах физики звука и том, как работали первые синтезаторы, такие как Hammond Organ. Также будут рассмотрены и современные техники, например, семплинг.\r\n\r\nПриготовьте ваш любимый напиток, устраивайтесь поудобнее и вперёд!\r\n\r\n\r\n\r\nПервый шаг\r\nНачиная с AudioKit 3.6, настройка плейграундов для работы с фреймворком стала совсем простой. Скачайте и разархивируйте стартовый плейграунд по ссылке.\r\n\r\nПутешествие начнётся с нескольких шагов по настройки плейграундов для работы с AudioKit.\r\n\r\nОткройте AudioKitPlaygrounds.xcodeproj файл в Xcode. Нажмите кнопку + в левом нижнем углу экрана, выберите File… и далее Blank в секции Playground, сохраните новый файл в папке Playgrounds вместе с демонстрационными плейграундами.\r\n\r\nТолько что добавленный плейграунд запустится и будет выглядеть примерно так:\r\n\r\n\r\nЗамените сгенерированный код на следующий:\r\n\r\nimport AudioKitPlaygrounds\nimport AudioKit\n\nlet oscillator = AKOscillator()\n \nAudioKit.output = oscillator\ntry AudioKit.start()\n\noscillator.start()\n\nsleep(10)\r\n\r\nПлейграунд не будет запускаться до тех пор, пока вы, хотя бы, один раз не соберёте проект, для этого можно использовать пункт меню Product / Build или комбинацию клавиш ⌘-B. После этого запустите плейграунд ещё раз и услышите гудящий на протяжении 10 секунд звук. (Прим. переводчика: иногда ошибка не пропадает, и нужно перейти в другой плейграунд, и вернуться обратно, чтобы всё заработало). Вы можете использовать Плей/Стоп кнопку слева внизу окна плейграунда, для того чтобы остановить плейграунд или запустить его заново.\r\n\r\nЗаметка: Если вы всё ещё видите ошибки, попробуйте перезапустить Xcode. К сожалению, фреймворки и плейграунды не очень хорошо дружат друг с другом и могут вести себя непредсказуемо.\r\n\r\nОсцилляторы и физика звука\r\nЧеловечество воспроизводит музыку с помощью различных физических объектов на протяжении тысяч лет.  Многим привычным для нас инструментам, таким как гитара или барабаны, насчитываются сотни лет. Первый зафиксированный опыт использования электронных схем для генерации звука был проведён в 1874 году Илайшей Грей. Илайша работал в области телекоммуникаций, и он изобрёл осциллятор — самый простой из музыкальных синтезаторов. C него мы и начнём наше погружение.\r\n\r\nНажмите правой кнопкой мыши на ваш плейграунд, выберите New Playground Page и замените сгенерированный код приведённым ниже:\r\n\r\nimport AudioKitPlaygrounds\nimport AudioKit\nimport PlaygroundSupport\n \n// 1. Create an oscillator\nlet oscillator = AKOscillator()\n \n// 2. Start the AudioKit 'engine'\nAudioKit.output = oscillator\ntry AudioKit.start()\n \n// 3. Start the oscillator\noscillator.start()\n \nPlaygroundPage.current.needsIndefiniteExecution = true\r\n\r\nПлейграунд начнёт генерировать непрерывное гудение — так и задумывалось. Вы можете нажать стоп, чтобы прекратить его.\r\n\r\nЭто практически то же самое, что мы делали в предыдущем плейграунде, но в этот раз мы погрузимся в детали.\r\n\r\nРассмотрим все шаги по порядку:\r\n\r\nТут мы создаём осциллятор. Осциллятор является наследником AKNode. Ноды — это элементы, из которых строится аудиоцепочка, генерирующая и модифицирующая звук.\r\n\r\nТут мы связываем выход нашей последней ноды с движком AudioKit. В нашем случае всего одна нода. Дальше фреймворк направит выход ноды на устройство воспроизведения звука.\r\n\r\nНу и стартуем осциллятор, на выход он начинает отправлять звуковую волну.\r\n\r\n\r\n\r\nОсциллятор генерирует повторяющийся сигнал, который не останавливается. В этом плейграунде AKOscillator генерирует синусоиду. Цифровой сигнал синусоиды при помощи AudioKit отправляется на колонки или наушники. В итоге, мы слышим звук который колеблется на той же частоте, что и сгенерированная нами синусоида. Звучит эта синусоида не очень музыкально.\r\n\r\n\r\n\r\nЗа звук этого осциллятора отвечают два параметра: амплитуда — высота синусоиды, определяет громкость звука и частота — от неё зависит высота звука.\r\n\r\nВ плейграунде добавьте следующие строчки кода прямо после создания осциллятора:\r\n\r\noscillator.frequency = 300\noscillator.amplitude = 0.5\n\r\n\r\nЗвук изменился, теперь он звучит в два раза тише и намного ниже. Частота (frequency) сигнала измеряется в герцах (количество повторений в секунду) и определяет высоту ноты. Амплитуда (amplitude) задаётся от 0 до 1 и отвечает за громкость.\r\n\r\nИзобретение Илайши Грея было зафиксировано в первом в истории патенте на электронный музыкальный инструмент.\r\n\r\n\r\n\r\nМного лет спустя Лев Термен изобрёл немного странный музыкальный инструмент, используемый и по сей день, — терменвокс. В терменвоксе вы можете изменять частоту звука движениями рук над инструментом. Чтобы понять, как звучит терменвокс, вы можете послушать композицию Vibrations коллектива Beach Boys, звук терменвокса там ни с чем не перепутаешь.\r\n\r\nВы можете имитировать звук терменвокса, для этого добавьте следующий код к настройкам осциллятора:\r\n\r\noscillator.rampDuration = 0.2\r\n\r\nИ замените строчку стартующую AudioKit (try AudioKit.start()) на следующие:\r\n\r\nlet performance = AKPeriodicFunction(every: 0.5) {\n    oscillator.frequency =\n        oscillator.frequency == 500 ? 100 : 500\n}\ntry AudioKit.start(withPeriodicFunctions: performance)\nperformance.start()\r\n\r\nСвойство rampDuration позволяет осциллятору плавно менять значения его параметров (например, частоты или амплитуды).  AKPeriodicFunction  — полезная утилита из AudioKit для периодического выполнения кода. В нашем примере она меняет частоту синусоиды с 500Hz на 100Hz каждые 0.5 секунды.\r\n\r\nПоздравляю! Вы только что сделали свой первый терменвокс. Простой осциллятор может генерировать музыкальные ноты, но звучит он не очень приятно. Есть много факторов, которые влияют на звук физических инструментов, таких как, например, пианино. И дальше мы рассмотрим некоторые из них.\r\n\r\nЗвуковые огибающие\r\nКогда музыкальный инструмент исполняет ноту, громкость её звучания меняется со временем, а характер изменений отличается от инструмента к инструменту. Модель, которая может имитировать этот эффект называется Attack-Decay-Sustain-Release(ADSR) огибающая (Прим. пер.: синтезаторы, доступные к покупке никогда не локализуются, поэтому название кривой такое, каким его можно увидеть на панели настоящего синтезатора).\r\n\r\n\r\n\r\nADSR-огибающая состоит из:\r\n\r\nAttack: атака или время, за которое звук набирает максимальную громкость\r\n\r\nDecay: дикей или время за которое громкость опустится от максимальной до основной\r\n\r\nSustain: основная громкость, в отличие от предыдущих двух параметров не является временем, после того, как атака и дикей пройдут и до того, как вы отпустите клавишу синтезатора звук будет генерироваться с этой громкостью\r\n\r\nRelease: релиз или время, за которое громкость станет нулевой\r\n\r\n\r\n\r\nВ пианино звук извлекается молоточками, стучащими по струнам, и поэтому в нём быстрые или, ещё говорят, короткие атака и дикей. У скрипки могут быть долгие атака, дикей и сустейн, музыкант может влиять на эти параметры тем, как он использует смычок.\r\n\r\nОдним из первых электронных музыкальных инструментов был Hammond Novachord. Этот инструмент был изготовлен в 1939 году, состоял из 163 вакуумных ламп и более 1000 конденсаторов, а весил он 230 килограмм. К сожалению, было изготовлено всего несколько сотен его экземпляров, и он так и не получил коммерческого успеха.\r\n\r\n\r\n\r\nКликните правой кнопкой мыши на плейграунд Journey, выберите New Playground Page и создайте новую страничку с именем ADSR. Замените сгенерированный код следующим:\r\n\r\nimport AudioKitPlaygrounds\nimport AudioKit\nimport PlaygroundSupport\n            \nlet oscillator = AKOscillator()\n\r\n\r\nВ нём просто создаётся осциллятор, с которым мы уже знакомы. Дальше добавьте следующий код в конец плейграунда:\r\n\r\nlet envelope = AKAmplitudeEnvelope(oscillator)\nenvelope.attackDuration = 0.01\nenvelope.decayDuration = 0.1\nenvelope.sustainLevel = 0.1\nenvelope.releaseDuration = 0.3\r\n\r\nТут создаётся AKAmplitudeEnvelope, который задаёт ADSR-огибающую. Параметры длительности (attackDuration, decayDuration, releaseDuration) указываются в секундах, а громкость (sustainLevel) задаётся в интервале от 0 до 1.\r\n\r\nAKAmplitudeEnvelope  — это наследник AKNode точно так же, как и AKOscillator.В коде выше осциллятор мы передаём в инициализатор ноды огибающих, тем самым соединяя ноды.\r\n\r\nДальше добавьте следующий код:\r\n\r\nAudioKit.output = envelope\nlet performance = AKPeriodicFunction(every: 0.5) {\n    if (envelope.isStarted) {\n        envelope.stop()\n    } else {\n        envelope.start()\n    }\n}\ntry AudioKit.start(withPeriodicFunctions: performance)\nperformance.start()\noscillator.start()\n\nPlaygroundPage.current.needsIndefiniteExecution = true\r\n\r\nОн запустит AudioKit, но на этот раз на его вход мы подаём выход с ADSR-ноды. Для того чтобы слышать ADSR-эффект, мы постоянно включаем и выключаем ноду с помощью AKPeriodicFunction.\r\n\r\n\r\n\r\nТеперь вы можете слышать как циклически играется нота, но в этот раз она немного больше похожа на пианино.\r\n\r\nЦикл выполняется два раза в секунду на каждой итерации, стартуя или останавливая ADSR. Когда ADSR стартует с быстрой атакой, громкость достигает максимальной величины за 0.01 секунду, после этого громкость за 0.1 секунды снижается до основного уровня и находится там в течении 0.5 секунды, и в конце затухает за 0.3 секунды.\r\n\r\nВы можете самостоятельно поиграться с параметрами и попробовать воспроизвести, например, звук скрипки.\r\n\r\nЗвуки, с которыми мы познакомились, основываются на синусоиде, которую генерирует AKOscillator. Несмотря на то, что ASDR помогает сгладить резкое звучание, назвать эти звуки музыкальными всё ещё нельзя.\r\n\r\nДальше мы рассмотрим как получают более глубокое звучание. \r\n\r\nАддитивный синтез\r\nКаждый музыкальный инструмент обладает своим особым звуком или тембром. Тембр — это то, что отличает звуки пианино от звуков скрипки, даже несмотря на то, что играть они могут одну и ту же ноту. Важным параметром тембра является звуковой спектр. Звуковой спектр описывает диапазон воспроизводимых частот, которые, суммируясь, дают ноту. Наш текущий плейграунд использует осциллятор, который звучит только на одной частоте, и звучит он довольно искусственно.\r\n\r\nМожно получить более живой звук, используя набор осцилляторов для воспроизведения одной ноты. Такой подход известен как аддитивный синтез, и это тема нашего следующего плейграунда.\r\n\r\nНажмите правой кнопкой мыши на плейграунд, выберите New Playground Page и создайте новую страницу с названием Additive Synthesis. Замените сгенерированный код следующим:\r\n\r\nimport AudioKitPlaygrounds\nimport AudioKit\nimport AudioKitUI\nimport PlaygroundSupport\n\nfunc createAndStartOscillator(frequency: Double) -> AKOscillator {\n  let oscillator = AKOscillator()\n  oscillator.frequency = frequency\n  return oscillator\n}\r\n\r\nДля аддитивного синтеза вам потребуется несколько осцилляторов, для этого будем использовать. createAndStartOscillator\r\n\r\nДальше добавьте код:\r\n\r\nlet frequencies = (1...5).map { $0 * 261.63 }\r\n\r\nЗдесь мы берём интервал чисел от 1 до 5 и умножаем каждое на число 261.53 — частоту ноты До. Получившиеся кратные частоты называются гармоники.\r\n\r\nТеперь добавим код:\r\n\r\nlet oscillators = frequencies.map {\n  createAndStartOscillator(frequency: $0)\n}\r\n\r\nТут мы создали осциллятор под каждую из используемых нами частот.\r\n\r\nЧтобы объединить осцилляторы добавьте такой код:\r\n\r\nlet mixer = AKMixer()\noscillators.forEach { $0.connect(to: mixer) }\r\n\r\nAKMixer  — это ещё один вид AudioKit-нод. Он принимает на вход сигналы с одной или нескольких нод и объединяет их в один.\r\n\r\nДобавьте вот такой код:\r\n\r\nlet envelope = AKAmplitudeEnvelope(mixer)\nenvelope.attackDuration = 0.01\nenvelope.decayDuration = 0.1\nenvelope.sustainLevel = 0.1\nenvelope.releaseDuration = 0.3\n\nAudioKit.output = envelope\nlet performance = AKPeriodicFunction(every: 0.5) {\n    if (envelope.isStarted) {\n        envelope.stop()\n    } else {\n        envelope.start()\n    }\n}\ntry AudioKit.start(withPeriodicFunctions: performance)\nperformance.start()\noscillators.forEach { $0.start() }\r\n\r\nС этим кодом всё должно быть понятно: добавляем ADSR к выходу миксера, выводим через AudioKit и периодически включаем/выключаем.\r\n\r\nДля того, чтобы хорошо разобраться с аддитивным синтезом, будет полезно поиграть с различными комбинациями этих частот. И в этом нам идеально подойдёт такая возможность плейграундов как Live View.\r\n\r\nДля этого добавьте код:\r\n\r\nclass LiveView: AKLiveViewController {\n    override func viewDidLoad() {\n        addTitle("Harmonics")\n\n        oscillators.forEach {\n            oscillator in\n            let harmonicSlider = AKSlider(\n                property: "\\(oscillator.frequency) Hz",\n                value: oscillator.amplitude\n            ) { amplitude in\n                oscillator.amplitude = amplitude\n            }\n            addView(harmonicSlider)\n        }\n    }\n}\n\nPlaygroundPage.current.needsIndefiniteExecution = true\nPlaygroundPage.current.liveView = LiveView()\r\n\r\nВ AudioKit есть классы специально для удобной работы в плейграундах. Мы в нашем примере используем AKLiveViewController, с помощью него мы вертикально размещаем элементы. А так же для каждого осциллятора мы создаём AKSlider. Слайдеры инициализируются значениями частоты и амплитуды осцилляторов, и вызывают блок при взаимодействии с ними. В блоке каждого слайдера мы меняем амплитуду соответствующего осциллятора. Так просто можно добавить интерактивности в ваши плейграунды.\r\n\r\nДля того чтобы увидеть результаты выполнения плейграунда нужно чтобы Live View отображалось на экране. Для этого выберите кнопку с пересекающимися окружностями в верхней правой части окна и убедитесь что для Live View выбран правильный плейграунд.\r\n\r\n\r\n\r\nДля того чтобы поменять тембр вашего инструмента, вы можете менять значения каждого слайдера по отдельности. Для реалистичного звучания предлагаю вам попробовать конфигурацию, изображенную на скриншоте выше.\r\n\r\nОдним из первых синтезаторов, использовавших аддитивный синтез был Teleharmonium и весил он 200 тонн! Его невероятный вес и размеры, скорей всего, и стали причиной его безвестности. Более успешный Hammond орган использовал схожие тоновые колёса, но был намного меньших размеров. Изобретённый в 1935 году, он до сих пор широко известен как популярный в эпоху прогрессивного рока инструмент.\r\n\r\n\r\n\r\nТоновое колесо — это вращающийся диск с небольшими впадинами по краю и звукосниматель, расположенный рядом с краем. У органа Hammond был целый набор тоновых колёс, которые могли вращаться с разными скоростями. Довольно необычный способ генерировать звук является, скорее, электромеханическим, чем электронным.\r\n\r\nДля того чтобы генерировать более реалистичный звуковой спектр, есть ещё несколько техник: частотная модуляция (Frequency Modulation или FM) и широтно-импульсная модуляция (Pulse Width Modulation или PWM), обе техники доступны в AudioKit в классах AKFMOscillator and AKPWMOscillator соответственно. Предлагаю вам попробовать обе, подставив их вместо AKOscillator, которые мы использовали ранее.\r\n\r\nПолифония\r\nВ 1970-х началось движение от модульных синтезаторов, состоящих из отдельных осцилляторов огибающих и фильтров, к микропроцессорным. Вместо использования аналоговых схем звук начали генерировать в цифровом формате. Это позволило сделать синтезаторы более дешёвыми и компактными, а синтезаторы таких брендов как Yamaha — очень популярными.\r\n\r\n\r\n\r\nВсе наши плейграунды были ограничены воспроизведением одной ноты за раз. Многие инструменты способны играть более одной ноты за раз, их называют полифоническими. Инструменты, которые способны играть только одну ноту, называют монофоническими.\r\n\r\nДля того чтобы получить полифонический звук, можно создать несколько осцилляторов и направить их в миксер, но в AudioKit для этого есть более подходящий способ.\r\n\r\nСоздайте новую страницу в плейграунд и назовите её Polyphony. Заменить сгенерированный код следующим:\r\n\r\nimport AudioKitPlaygrounds\nimport AudioKit\nimport AudioKitUI\nimport PlaygroundSupport\n\nlet bank = AKOscillatorBank()\nAudioKit.output = bank\ntry AudioKit.start()\r\n\r\nТут мы создали банк осцилляторов AKOscillatorBank. Если перейти в объявление класса, то можно обнаружить, что он является наследником AKPolyphonicNode, который, в свою очередь, является наследником уже известного нам AKNode, а также реализует протокол AKPolyphonic.\r\n\r\nВ итоге, банк осцилляторов — это такая же AudioKit-нода, как и рассмотренные нами ранее. Её выход можно направлять в микшеры, огибающие или любые другие фильтры и эффекты. Протокол AKPolyphonic описывает как воспроизводить ноты на полифонической ноде, рассмотрим его подробнее.\r\n\r\nДля того чтобы проверить наш осциллятор, нам нужен способ сыграть несколько нот одновременно. Это совсем не сложно!\r\n\r\nДобавьте следующий код в плейграунд и убедитесь, что Live View открыто:\r\n\r\nclass LiveView: AKLiveViewController, AKKeyboardDelegate\n {\n    override func viewDidLoad() {\n        let keyboard = AKKeyboardView(width: 440, height: 100)\n        addView(keyboard)\n    }\n}\n\nPlaygroundPage.current.liveView = LiveView()\nPlaygroundPage.current.needsIndefiniteExecution = true\r\n\r\nКогда плейграунд скомпилируется, вы увидите следующее:\r\n\r\n\r\n\r\nКруто, да? Музыкальная клавиатура прямо в плейграунде!\r\n\r\nAKKeyboardView — это ещё одна утилита из AudioKit, которая упрощает исследование возможностей фреймворка. Нажмите на клавиши и вы обнаружите, что они не издают никаких звуков.\r\n\r\nОбновите setUp вашего PlaygroundView на следующий:\r\n\r\nlet keyboard = AKKeyboardView(width: 440, height: 100)\nkeyboard.delegate = self\naddView(keyboard)\r\n\r\nЭто сделает наше PlaygroundView делегатом клавиатуры и позволит реагировать на нажатия клавиш.\r\n\r\nОбновите объявление класса следующим образом:\r\n\r\nclass LiveView: AKLiveViewController, AKKeyboardDelegate\r\n\r\nТакже добавьте пару методов сразу после setUp:\r\n\r\nfunc noteOn(note: MIDINoteNumber) {\n  bank.play(noteNumber: note, velocity: 80)\n}\n  \nfunc noteOff(note: MIDINoteNumber) {\n  bank.stop(noteNumber: note)\n}\r\n\r\nКаждый раз, когда вы жмёте на клавишу, вызывается метод noteOn, всё, что он делает, это говорит банку осцилляторов начать воспроизводить ноту, соответственно, в методе noteOff происходит остановка проигрывания ноты.\r\n\r\nЗажмите мышкой и проведите по клавишам, вы услышите прекрасное крещендо (музыкальный термин, обозначающий постепенное увеличение силы звука). Банк осцилляторов уже содержит встроенный ADSR-эффект, в результате затухание одной ноты смешивается с атакой следующей и звучит довольно приятно.\r\n\r\nВы могли заметить, что ноты, которые выдавали нам клавиши, поступали не в виде частоты. Они объявлены как MIDINoteNumber. Если вы перейдёте в объявление этого типа, то увидите следующее:\r\n\r\npublic typealias MIDINoteNumber = Int\r\n\r\nMIDI расшифровывается как Musical Instrument Digital Interface (цифровой интерфейс музыкальных инструментов). Это широко распространённый формат взаимодействия музыкальных инструментов между собой. Номера нот соответствуют нотам на стандартной музыкальной клавиатуре. Второй параметр — это велосити (velocity) соответствует силе удара по клавише. Чем ниже значение, тем более мягкое касание по клавише, тем тише итоговый звук.\r\n\r\nВ завершении нужно включить полифонический режим на клавишах. Добавьте следующий код в метод setUp:\r\n\r\nkeyboard.polyphonicMode = true\r\n\r\nТеперь вы можете играть несколько нот одновременно, как изображено на картинке:\r\n\r\n\r\n\r\nЭто, кстати, До-мажор :)\r\n\r\nAudioKit начал свою историю довольно давно. Сегодня он использует Soundpipe и код из Csound (проекта MIT, который был запущен в 1985 году). Удивительно, что код, который сейчас мы запускаем в плейграундах и добавляем на iPhone, был написан почти 30 лет назад.\r\n\r\nСэмплирование\r\nТехники синтезирования звука, которые мы исследовали ранее, пытаются воссоздать реалистичный звук, используя простые базовые блоки: осцилляторы, фильтры и миксеры. В начале 1970-х развитие компьютерных мощностей привело к тому, что появился новый подход — сэмплирование звука, целью которого является создание цифровой копию звука.\r\n\r\nСэмплирование — довольно простая технология, схожая с цифровой фотографией. В процессе сэмплирования с равномерными интервалами записывается амплитуда звуковых волн:\r\n\r\n\r\n\r\nДва параметра влияют на то, насколько точно был записан звук:\r\n\r\nBit depth: или разрядность, количество отдельных уровней громкости, которые сэмплер может воспроизвести\r\n\r\nSample rate: или частота дискретизации, говорит о том как часто производятся замеры амплитуды. Измеряется в герцах.\r\n\r\n\r\n\r\nДавайте изучим эти свойства в новом плейграунде. Создайте новую страницу и назовите её «Samples». Замените сгенерированный код следующим:\r\n\r\nimport AudioKitPlaygrounds\nimport AudioKit\nimport PlaygroundSupport\n\nlet file = try AKAudioFile(readFileName: "climax-disco-part2.wav", baseDir: .resources)\nlet player = try AKAudioPlayer(file: file)\nplayer.looping = true\r\n\r\nПриведённый код загружает сэмпл, создаёт аудиоплеер и ставит его на бесконечное воспроизведение.\r\n\r\nАрхив с WAV-файлом для этого туториала доступен по ссылке. Скачайте его и разархивируйте в папку Resources вашего плейграунда.\r\n\r\nЗатем добавьте следующий код в конец плейграунда:\r\n\r\nAudioKit.output = player\ntry AudioKit.start()\n\nplayer.play()\n\nPlaygroundPage.current.needsIndefiniteExecution = true\r\n\r\nЭто соединит ваш аудиоплеер с AudioKit, остаётся лишь прибавить громкость и наслаждаться!\r\n\r\nЭтот небольшой семпл состоит из большого набора звуков, создать которые с помощью осцилляторов было бы настоящим вызовом.\r\n\r\nMP3-звук, который мы обычно слышим, использует высокую разрядность и частоту дискретизации, поэтому звук очень яркий и чистый. Для того чтобы поэкспериментировать с этими параметрами добавьте следующий код сразу после кода создания аудио плеера:\r\n\r\nlet bitcrusher = AKBitCrusher(player)\nbitcrusher.bitDepth = 16\nbitcrusher.sampleRate = 40000\r\n\r\nТак же поправьте вывод в AudioKit:\r\nAudioKit.output = bitcrusher\r\n\r\nЗвук нашего плейграунда поменялся. Это тот же семпл, но теперь он звучит совсем плоско.\r\n\r\nAKBitCrusher — это эффект AudioKit, который эмулирует уменьшение разрядности и частоты дискретизации. Звуки, которые получаются похожими на те, что издавали старые компьютеры на подобие ZX Spectrum или BBC Micro. У них было всего несколько килобайт памяти и намного более медленные процессоры, чем сегодняшние.\r\n\r\nВ нашем последнем эксперименте мы соберём несколько нод вместе для того, чтобы получить эффект стереозадержки(анг. delay). Для начала удалите три строчки, в которых мы создали и настроили AKBitCrusher. А затем добавьте следующее:\r\n\r\nlet delay = AKDelay(player)\ndelay.time = 0.1\ndelay.dryWetMix = 1\r\n\r\nЭто создаст эффект задержки в 0.1 секунду с нашим семплом в качестве входа. Параметр dryWetMix говорит как надо смешать исходный сигнал и сигнал с задержкой. В нашем случае величина 1 говорит, что на выходе мы будем слышать только сигнал с задержкой.\r\n\r\nДальше добавьте следующее:\r\n\r\nlet leftPan = AKPanner(player, pan: -1)\nlet rightPan = AKPanner(delay, pan: 1)\r\n\r\nAKPanner даёт возможность переместить звук вправо, влево или куда-то посередине. В нашем примере мы выводим звук с задержкой влево а оригинальный звук вправо.\r\n\r\nПоследним шагом мы смешаем оба сигнала и выведем в AudioKit. Замените строчку, которая выводила AKBitCrusher в AudioKit на такой код:\r\n\r\nlet mix = AKMixer(leftPan, rightPan)\nAudioKit.output = mix\r\n\r\nТаким образом, мы проиграем наш семпл, но с небольшой задержкой между правым и левым каналами.\r\n\r\n\r\n\r\nЧто дальше?\r\n\r\nВ этом туториале мы затронули совсем небольшой кусочек возможностей AudioKit. Попробуйте исследовать различные фильтры, питч-шифтер, реверб, графический эквалайзер, чтобы посмотреть какие ещё эффекты бывают. Проявив немного креативности, вы можете создавать свои собственные звуки, электронные инструменты или игровые эффекты.\r\n\r\nЗаконченный плейграунд можно найти по ссылке.	https://habr.com/ru/company/funcorp/blog/440226/	1ef080ca-09a9-474e-afa6-71cea68b971e
6	Марсианский зонд InSight успешно работает на Красной планете	InSight зонд марс	\r\n\r\nНа поверхности Марса работают не только роверы, но и посадочные модули. Вернее, модуль — речь идет об InSight, успешно опустившемся на поверхность Марса в конце прошлого года. Сейчас модуль уже ведет научные наблюдения за подземными толчками на Марсе. \r\n\r\nНаблюдения стали возможными благодаря специально сконструированному сейсмосметру. Он защищен от пыли, ветра и вибраций при помощи крышки, которая помогает обеспечить работоспособность модуля в течение длительного времени. \r\n\r\nПо словам представителей НАСА, самая большая проблема при исследовании Марса — перепады и скачки температур. Для того, чтобы фактор температуры не влиял на сейсмометр, его и защитили крышкой, которая делает сейсмометр похожим на что угодно, только не на научный модуль. Она помогает удерживать температуру на одном и том же уровне, а также защищает прибор от воздействия марсианской атмосферы. \r\n\r\nСейсмометр установлен в одной из наиболее безопасных для научного прибора точек поверхности планеты, здесь ему практически ничего не угрожает. Около двух недель понадобилось ученым для того, чтобы стабилизировать положение датчика и корректно калибровать его. Сейсмометр поможет ученым наблюдать за геологическими событиями на Марсе — конечно, в том случае, если планета не является геологически мертвой.\r\n\r\nКстати, именно из-за сейсмометра дата запуска аппарата несколько раз откладывалась. Изначально его хотели отправить на Красную планету в марте 2016 года. Затем оказалось, что сейсмометр SEIS неисправен, так что платформу оставили на Земле на два года, в течение которых специалисты занимались поиском и устранением неисправностей.\r\n\r\nПосле того, как сейсмометр прошел плановую проверку после исправления технических неполадок, агентство запланировало новую дату запуска. После этого система отправилась к Марсу по корректному графику, дату запуска больше не переносили. \r\n\r\nСтоит напомнить, что Insight является наследником зонда «Феникс», который сел на Марсе в 2008 году. Он занимался поиском следов жизни и воды в грунте планеты. \r\n\r\nНа борту InSight есть и другие приборы, которые помогают вести мониторинг условий на поверхности Марса. Самый важный модуль — бур, который проделает в поверхности скважину глубиной 5 м.\r\n\r\nИнструмент HP3 (Heat Flow and Physical Properties Package), был размещен на поверхности планеты на днях, в 1,5 метра от самой посадочной платформы. Он позволит пробурить скважину рекордной глубины для исследования тепловых потоков. До настоящего момента максимальная глубина скважины, проделанной земными аппаратами, составила 22 сантиметра. Ее пробурил аппарат Viking 1.\r\n\r\n\r\n\r\nМодуль будет изучать различные характеристики поверхности Марса, включая теплопроводность марсианского грунта. Модуль будет исследовать структуру и состав Марса около двух лет. Если система будет сохранять работоспособность по истечению этого времени, ее будут использовать и дальше — как это случилось, например, с Opportunity, проработавшем вместо 90 дней около 15 лет. \r\n\r\nОсновные научные цели миссии Insight: \r\n\r\n\r\nИзучение и анализ процесса геологической эволюции планет земной группы Солнечной системы, включая Марс и Землю;\r\nОпределение размера, состава и агрегатного состояния ядра планеты;\r\nОпределение толщины и структуры коры Марса;\r\nОпределение состава и структуры мантии;\r\nОпределение температуры внутненних слоев планеты;\r\nИзучение текущего уровня тектонической активности и частоты падения метеоритов на поверхность Марса;\r\nОпределение силы, частоты и географического распределение тектонической активности.\r\n\r\nУ платформы две камеры. Первая, черно-белая, будет использоваться для съемки инструментов на борту и создания трехмерных изображений поверхности. Вторая камера с аналогичными характеристиками и полем зрения в 120 градусов похожа на камеры других марсоходов, которые называются «HazCam». Она установлена на нижней поверхности посадочного модуля, что позволяет обеспечить визуальный контакт с инструментами SEIS и HP3.\r\n\r\nInSight был запущен с опозданием на два года. Запуск аппарата должен был состояться в марте 2016 года, но оказалось, что его главный научный инструмент, сейсмометр SEIS, неисправен. По этой причине агентство отменило запуск и занялось решением проблемы.	https://habr.com/ru/post/440598/	1ef080ca-09a9-474e-afa6-71cea68b971e
7	Удобный БЭМ	web-программирование web-разработка верстка сайтов бэм методологии разработки html css html5	\r\n\r\nПриветствую. В этой статье я расскажу, как можно изменить БЭМ, сохранив лучшие его черты и избавившись от худших.\r\n\r\nИтак, сначала поговорим о том, что не так с БЭМ? Может, ничего не надо менять и все и так хорошо?\r\n\r\nБЭМ — это методология, позволяющая использовать CSS/HTML/JS много раз. Она вводит понятия блока, элемента, модификатора и микса. Начав ее использовать, ты понимаешь, что это именно то, чего ты ждал много лет, это так удобно, понятно и красиво! Но спустя некоторое время начинают встречаться такие моменты в разработке, которые решить с помощью БЭМ можно, но это не приносит ни удовольствия, ни, главное, пользы. О чем я говорю? Пройдемся по таким моментам:\r\n\r\n1. Одноразовые блоки и элементы\r\nДанная проблема так сильно мне надоела, что заставила написать эту статью.\r\n\r\nПонятие блока подразумевает сущность, которую можно и нужно переиспользовать, однако на практике создается большое количество блоков, которые применяются один раз.\r\n\r\nНапример, нам нужно сделать следующее: расположить на странице заголовок, за ним — текстовое поле и кнопку отправления ввода, так, как показано на картинке:\r\n\r\n\r\n\r\nЧто мы сделаем в соответствии с БЭМ? Есть несколько вариантов:\r\n\r\n\r\nСоздать блок формы и его элементы: заголовок, кнопку, текстовое поле\r\nСоздать отдельно блоки для каждого из компонентов (кнопка, текстовое поле, заголовок), а также для формы\r\n...\r\n\r\nКакой бы мы ни выбрали, у нас возникнет проблема: как задать отступы между всеми этими блоками? \r\n\r\nЕсли мы выбрали первый вариант, то можно решить задать отступы для элементов формы, ведь это не противоречит методологии. Однако в этом случае мы уничтожаем суть блока: он не может быть переиспользован, так как его внутренняя разметка подойдет только к текущей ситуации.\r\n\r\nЕсли бы мы выбрали второй вариант, тогда можно было бы примиксовать к форме какой-нибудь блок, а элементы этого блока примиксовать к компонентам формы. И, соответственно, для элементов только что созданного блока задать отступы. И вот тут-то и проявляется проблема одноразовых блоков: они создаются для использования только в одном месте! Их больше нельзя использовать, потому что на других страницах компоненты будут расположены по-другому.\r\n\r\nДанная проблема порождает одноразовые блоки/элементы, а также модификаторы типа блок__элемент_size_размер или блок__элемент_place_место-где-будет-расположен-блок (для задания отступов), которые, как уже было сказано, используются один раз и загромождают как файлы разметки, так и проект собственными директориями и файлами.\r\n\r\nТо же самое касается не только отступов, но и размеров блоков (для кнопок, например, это часто тянет за собой изменение еще и line-height'ов), размеров шрифтов, внутренних отступов и т.д.\r\n\r\n2. Длинные имена классов\r\nТут даже рассказывать особо не о чем. Не думаю, что кому-то нравится разметка, которая.выглядит примерно так:\r\n \r\n<header class="section-header section-header_margin_select-sector">\n        <h2 class="section-header__title font font_face_calibri-bold section-header__title_size_select-sectors">\n                            Select a sector, please:\n        </h2>\n</header>\n\r\n3. Значения по-умолчанию или темы блоков\r\nПредположим, у нас есть блок кнопки. Нужно её стилизовать в соответствии с требованиями дизайна. Но в другом проекте тоже будет класс кнопки. Она будет выглядеть по-другому, однако некоторая часть стилей будет одинакова. Что советует делать БЭМ? Он говорит создать модификатор темы и задавать его всем требуемым элементам.\r\n\r\nНо при таком подходе получится следующее:\r\n\r\n<input type="text" class="textbox textbox_theme_P2">\n<button class="button button_theme_P2">Reset</button>\n<button class="button button_theme_P2">Submit</button>\n<button class="button button_theme_P2">Save as draft</button>\n\r\nЭто загромождение кода, и это плохо.\r\n\r\nКритикуешь — предлагай\r\nЧто я предлагаю, чтобы исправить это безобразие? Я предлагаю следующий манифест, который, по сути, является надстройкой над стандартным БЭМ.\r\n\r\nМанифест — Improved BEM\r\nП.1 Слой модулей и слой страницы\r\nЯ предлагаю разбить стилевое оформление на две части:\r\n\r\nПервая часть — слой модулей (components layout). Эта часть пишется в соответствии со всеми (почти*) правилами БЭМ. Она задает стили для переиспользуемых блоков, или, лучше сказать, компонентов, например, для кнопки, текстового поля, заголовка и т.д.\r\n\r\nДругая часть — слой страницы (page layout). Он требуется для задания стилей блоков и элементов конкретной страницы. Соответственно, эти блоки/элементы будут использованы один раз (во всяком случае, на одной странице). Здесь правила БЭМ не действуют. Выглядит это так:\r\n\r\nФайл: index.css\r\n\r\n.___send-button {\n        margin-bottom: 2px;\n        font-size: 13px;\n}\n\n.___message-textarea {\n        width: 240px;\n        height: 300px;\n        font-size: 14px;\n}\n\r\nИмя файла page layout'а выбирается произвольно. Главное, чтобы оно соответствовало сути страницы. Все стили начинаются с '___', чтобы их нельзя было спутать с классами стандартных сущностей БЭМ. Также классы не привязаны к БЭМ-сущностям — их имена лишь отражают то, к чему они должны применяться. Ещё стоит заметить, что все стили page layout'а располагаются в одном файле, так как относятся к одной странице.\r\n\r\nДанное разделение позволяет решить первую проблему, при этом не нанеся ущерба главной цели БЭМ — создания стилей/разметки так, чтобы их можно было переиспользовать. Данные стили будут применяться только на одной странице и никоим образом не будут мешать стилям компонентов из components layout. Таким образом, мы избавляемся от одноразовых классов, сохраняя возможность переиспользовать блоки и не нарушая областей видимости.\r\n\r\nТакже имеет смысл разделить components и page layout'ы и на уровне директорий.\r\n\r\n*кроме правил, которые отменяются следующими пунктами манифеста.\r\n\r\nП.2 Длинные имена классов\r\n(Экспериментальный, поэтому опциональный пункт*)\r\n\r\nПредлагается заменить часть стандартной системы именования на следующую:\r\n\r\nДля блока: class="блок" (без изменений)\r\nДля блока с модификатором: class="блок _модификатор" (обращение через комбинированный селектор .блок._модификатор)\r\nДля элемента: class="блок__элемент" (без изменений)\r\nДля элемента с модификатором: class="блок__элемент _модификатор" (обращение через .блок__элемент._модификатор)\r\n\r\nДанный пункт позволяет получать краткий код в отношении модификаторов. Очевидно, почему нельзя сделать то же самое с элементами.\r\n\r\nВажно, чтобы в файлах со стилями не было правил, заданных для селекторов, которые состоят только из модификаторов:\r\n\r\n/*Неправильно!!!*/\n._active {\n        background-color: #abcdef;\n}\n\r\n*подобное именование модификаторов может привести к проблемам на блоках/элементах, смиксованных с другими блоками/элементами, при условии, что обе сущности могут иметь одинаковый модификатор. То есть, задавая модификатор для одной сущности, мы задаем его для всех примиксованных к этому узлу.\r\n\r\nП.3 Значения по умолчанию и темы\r\nТут все просто. Предлагается выбрать тему по умолчанию, но прописывать стили для нее не в классе блока, который находится в файле блока, а в классе блока, который следует разместить в файле с темой. Например:\r\n\r\nФайл — button/button.css\r\n\r\n.button {\n        cursor: pointer;\n        display: inline-block;\n}\n\r\nФайл — button/_theme/button_theme_P2.css\r\n\r\n.button_theme_P2,\n.button {\n        border-radius: 3px;\n        border: 1px solid #f00;\n}\n\r\nИли в соответствии с п.2\r\n\r\n.button._theme_P2,\n.button {\n        border-radius: 3px;\n        border: 1px solid #f00;\n}\n\r\nТаким образом, данная тема становится стандартной, но при желании можно использовать её непосредственно.\r\n\r\n\r\n\r\nИтог\r\nДанный манифест призван решить некоторые проблемы, возникающие при верстке в соответствии с БЭМ. Основной его составляющей было разбиение на components layout и page layout. Хотя выглядит манифест достаточно революционно, неканонично и смело, заявленные проблемы он решает. Использовать его весь, частично или не использовать вообще — решать, конечно, вам.\r\n\r\nP.S. Если вы сейчас гневно проскроллили всю страницу чтобы поставить минус, не забудьте написать комментарий, иначе пользы ваш минус не принесет (как и манифест).	https://habr.com/ru/post/440554/	1ef080ca-09a9-474e-afa6-71cea68b971e
8	— А вы там в нефтехимии бензин делаете, да?	СИБУР популярная нефтехимия цифровая химия полимеры пластик производство	Привет, Хабр!\r\n\r\nПродолжая серию наших публикаций, мы решили, что для понимания азов «цифровой химии» нужно немного рассказать про суть бизнеса компании. Понятно, по пути будем упрощать, чтобы не превращать рассказ в занудную лекцию с перечислением всей таблицы Менделеева (кстати, 2019 год – официально год периодического закона, в честь 150-летия его открытия).\r\n\r\nМногие люди при ответе на вопрос «Что такое нефтехимия и какие продукты она создает?» уверенно отвечают — топливо, бензин и прочее жидкое-горючее. На самом деле, мягко говоря, это не совсем так. Как нефтехимическая компания мы занимаемся в основном переработкой побочных продуктов добычи нефти и газа и производством синтетических материалов, которые составляют значительную часть окружения каждого из нас. Есть мнение, что из 5 любых предметов, которые нас окружают в любой момент времени, 4 созданы благодаря нефтехимии. Это корпуса ноутбуков, ручки, бутылки, ткани, бамперы и шины для автомобилей, пластиковые окна, упаковка любимых чипсов, водопроводные трубы, контейнеры для еды, медицинское оборудование и расходники… В общем, вот:\r\n\r\n\r\n\r\nМеня зовут Алексей Винниченко, я отвечаю в СИБУРе за направление «Продвинутая аналитика». С помощью аналитических моделей мы настраиваем оптимальные режимы технологических процессов, минимизируем риски поломок оборудования, предсказываем рыночные цены на сырье и продукты, а также многое другое.\r\n\r\nСегодня расскажу, что это за продукты и как мы производим их из преимущественно попутного нефтяного газа.\r\n\r\nПуть газа\r\nКогда нефтяники качают нефть, вместе с ней идет попутный нефтяной газ (ПНГ, вместе с нефтью на поверхность поднимается и газовая шапка, которая обычно находится в пластах земли вместе с нефтью). На протяжении советских десятилетий основную его часть просто сжигали, поскольку вопросы экологии были второстепенным фактором, а для утилизации ПНГ нужно строить недешевую инфраструктуру, тем более, что отечественные месторождения нефти расположены преимущественно в суровых краях Западной Сибири. В итоге огни факелов были хорошо заметны даже из космоса. С течением времени позиция государства относительно сжигания ужесточалась, потребление синтетических материалов, а значит и потребность в сырье для них возрастали, и взгляд на проблему сжигания ПНГ был пересмотрен. Еще при СССР в стране начала развиваться переработка ПНГ в полезные продукты, но по-настоящему процесс был перезапущен в начале 2000-х. В итоге сейчас только СИБУР перерабатывает около 23 млрд кубометров ПНГ в год, предотвращая выбросы 7 млн т вредных веществ и 70 млн т парниковых газов, что эквивалентно ежегодным выбросам автотранспорта средней европейской страны.\r\n\r\n\r\n\r\nИтак, нефтяные компании продают нам попутный нефтяной газ. Мы создали обширную сеть трубопроводов в Западной Сибири, которая обеспечивает доставку газа на наши газоперерабатывающие заводы. На этих заводах газ проходит первичную обработку, разделяясь на натуральный (природный) газ, который уходит в газотранспортную систему Газпрома и далее отправляется, например, к вам в дом, если вы пользуетесь газовой плитой, а также на так называемую «широкую фракцию легких углеводородов» (ШФЛУ) – смесь, из которой впоследствии под различным сочетанием температуры и давления мы получаем все разнообразие химических продуктов.\r\n\r\nМы собираем ШФЛУ с наших сибирских заводов по системе трубопроводов и вливаем ее в одну большую трубу длиною в 1100 километров – с севера до юга Западной Сибири — по которой продукт доходит до нашей крупнейшей производственной площадки в Тобольске. Кстати, очень интересный город, полный истории – Ермак, Менделеев, декабристы, Достоевский, там же недалеко и Распутин. Первый каменный кремль в Сибири. Часть этой истории можно будет увидеть в фильме «Тобол», который выходит в конце февраля. В фильме, кстати, снимались в массовке в том числе наши сотрудники. Но вернемся к производству в Тобольске.\r\n\r\n\r\n\r\nТам мы разделяем полученное сырье на отдельные компоненты и фракции, перерабатываем продукцию в сжиженный углеводородный газ (СУГ). Сжиженный газ уже сам по себе является готовым товарным продуктом, который можно предлагать рынку и покупателям. Пропан, бутан – емкости с газом для дачных хозяйств, баллончики для заправки зажигалок, экологичное топливо для автомобилей. В общем, все это можно продать покупателю. Что мы частично и делаем. А вот что происходит с остальным сырьем, которое не идет на создание сжиженного газа, в Тобольске и на производствах компании в Томске, Перми, Тольятти, Воронеже и других городах с нашими нефтехимическими заводами.\r\n\r\nПроизводство\r\nПолимеры\r\n\r\nСУГ проходит через стадию пиролиза (или альтернативных химических технологий), на которой мы получаем самые важные для производства полимеров мономеры — этилен и пропилен. Обыватель с этим веществами не сталкивается, так как они не выходят на открытый широкий рынок. Мы перерабатываем мономеры в полимеры, которые представляют из себя пластиковые гранулы. Вообще, сами полимеры (полиэтилен, полипропилен, ПВХ, ПЭТ, полистирол и прочие) зрительно в виде гранул немного отличаются друг от друга. Сейчас мы производим все основные виды полимеров — полиэтилен (самый массовый полимер в мире по тоннажу), полипропилен ПВХ.\r\n\r\n\r\n\r\nОсновные области использования полиэтилена и полипропилена – ЖКХ, пищевая упаковка, стройматериалы, автопром, медицина и даже подгузники.\r\n\r\nПВХ, наверное, всем знаком прежде всего по пластиковым окнам и трубам. Что касается полистирола, вы видите его почти каждый день. Часто используется для изготовления подложек под овощи и фрукты в супермаркетах, в него могут упаковывать еду на вынос в кафе и ресторанах. Но мы производим другой вариант пенополистирола – строительный, который превосходит по своим теплоизоляционным свойствам минвату и другие утеплители. А еще из него делают экологичные ульи. Помните Лужкова? Он фанат ульев из пенопласта. \r\n\r\n\r\nЯйца в упаковке из вспененного полистирола \r\n\r\nМы сейчас в Тобольске строим крупнейший в РФ нефтехимический завод, ЗАПСИБНЕФТЕХИМ, мощностью в 2 млн тонн полимеров в год. Если взять всю продукцию только этого завода за год и сделать из нее пластиковые трубы, этим можно будет заменить вообще все ржавые трубы в РФ (более 2 млн километров водопровода).\r\n\r\n\r\n25-килограммовый мешок с гранулами полипропилена\r\n\r\nПродаем мы пластики в гранулах — это самая удобная форма для транспортировки (можно насыпать гранулы как в мешок на 25 кг, так и в бигбэги на несколько центнеров) и для последующей переработки на заводе компании-покупателя. Там просто нужно будет высыпать этот пластик в емкости и плавить под необходимым давлением и температурой, создавая нужные формы и придавая нужные качества.\r\n\r\n\r\nГорсть пластиковых гранул\r\n\r\nПочему под разной температурой и давлением — потому что из одного и того же полимера можно делать несколько видов пластика, отличающихся своими физико-химическими свойствами. Например, из одних и тех же гранул можно сделать как тонкий пластиковый пакет, так и долговечную трубу. Клиенты, получая от нас гранулы, могут вносить в них добавки, добиваясь нужных свойств. Поэтому существует много разных марок пластика одного и того же вида. \r\n\r\nА еще мы делаем ПЭТФ, из которого Coca-Cola и PepsiCo делают тару для своей продукции.\r\n\r\nКаучук\r\n\r\nДа, кстати. Мы также делаем каучук. Каучуков в мире два — натуральный и синтетический. Причем цена и спрос синтетического довольно плотно привязаны к цене и спросу на натуральный. Так сложилось исторически, поскольку изначально на рынок вышел каучук натуральный. Натуральный каучук собирают крестьяне отдельно взятых южных стран, после чего сдают его перерабатывающим компаниям. Синтетический – продукт нефтехимии.\r\n\r\n\r\nГевея бразильская, основной источник натурального каучука\r\n\r\nКаучук мы продаем шинным компаниям в брикетах. \r\n\r\n\r\nБрикет каучука\r\n\r\nИменно шинные компании являются основными потребителями каучука, мы поставляем его для Bridgestone, Pirelli, Michelin, Continental и других производителей. При этом, что сегодня достаточная редкость для российской промышленности, обладаем уникальными передовыми технологиями. Например, на базе нашей технологии строим вместе с индийскими партнерами новый завод в штате Гуджарат (недалеко от Гоа).\r\n\r\n\r\n\r\nНо не шинами едиными — ведь из каучука делают и множество других, менее известных, но тоже необходимых штук. Это всякие кожухи, прокладки для автомобилей, множество изделий для сферы сантехники, которые тоже есть в каждом доме, подошвы для обуви.\r\n\r\nВ этом, кстати, своеобразная прелесть нефтехимии как отрасли. Можно извлечь что-то и пойти продавать, или же найти способ переработки и получить еще ряд продуктов с высокой добавленной стоимостью.\r\n \r\nРезюмируя\r\nКак бы это ни звучало, полимеры и другие продукты нефтехимии стали неотъемлемыми элементами в жизни современного человека. Отчасти потому, что всё это является довольно новым с глобальной точки зрения, велико количество мифов и страшилок, мол, с синтетическими материалами надо быть осторожными по умолчанию только потому, что они — химия. Кстати, в одном из следующих постов коллеги развенчают несколько самых популярных мифов про то, что пластик в микроволновке гарантировано подкосит ваше здоровье и настроение, а любимая газировка в стекле всегда* вкуснее той же газировки в пластиковой бутылке.\r\n\r\n*всегда, кроме слепых тестов\r\n\r\nБонусом для тех, кто дочитал до конца — наш мультфильм, который более подробно описывает некоторые этапы создания полимеров.\r\n\r\n	https://habr.com/ru/company/sibur_official/blog/440682/	1ef080ca-09a9-474e-afa6-71cea68b971e
9	В MIT научились передавать звук с помощью лазера	аудиомания звук передача звука	Группа исследователей из MIT представила новый метод передачи направленного звука при помощи лазера. Под катом, рассказываем, на чем построена эта технология.\r\n\r\n\r\nФото PxHere / PD\r\n\r\nЛазер для передачи звука\r\nТехнология направленного звука, способная формировать аудиопоток, слышимый в небольшой области пространства, известна ещё с 1980-х годов. Однако звук от таких систем (в том числе современных) сложно назвать узконаправленным: в среднем он распространяется на зону диаметром в 50 сантиметров. Большой размер области покрытия ограничивает их применение.\r\n\r\nСегодня они используются для создания «аудиоточек» в музеях — чтобы посетители могли слушать лекции электронных гидов и не мешать другим — но не годятся для трансляции аудиопотока конкретному человеку на большом расстоянии.\r\n\r\nЭту проблему решили инженеры из MIT. Они предложили использовать для передачи направленного звука точно лазерный луч. В основе их решения лежит фотоакустический эффект, когда водяной пар в атмосфере поглощает энергию света. Этот процесс приводит к локальному повышению давления воздуха и возникновению звуковых колебаний. Эти колебания человек способен воспринимать без дополнительного носимого оборудования.\r\n\r\nКак это работает\r\nВ качестве источника излучения инженеры из MIT использовали тулиевый лазер, который обычно применяют в медицине и косметологии. Устройство способно генерировать излучение с длиной волны от 1900 до 2000 нм — ближний инфракрасный диапазон электромагнитного спектра. Решение применить тулиевый лазер связано с тем, что водяной пар в воздухе лучше всего поглощает волны именно этой длины. Ещё одна причина — свет с длиной волны 1900 нм безвреден для сетчатки глаза и кожи человека.\r\n\r\nРазработчики предложили два способа передачи звука. В первом методе задействован акустооптический модулятор — устройство, которое меняет интенсивность пропускаемого света. Оно состоит из стеклянной пластины, на которой при помощи пьезоэлектрического преобразователя создаётся бегущая ультразвуковая волна, меняющая интенсивность луча. Достоинством этого подхода стало довольно высокое качество передаваемого звука — исследователям удалось успешно воспроизвести запись речи и даже музыку.\r\n\r\nВо втором способе передачи аудиоинформации вместо модулятора используется вращающееся зеркало. Оно перемещает лазерную точку в пространстве около слушателя со скоростью звука, что приводит к интерференции акустических сигналов и их усилению.\r\n\r\nВ этом случае качество звука хуже, чем в первом методе. Однако сам звук оказывается гораздо более громким — авторам удалось достигнуть значения в 60 дБ на расстоянии в 2,5 метра (в первом случае максимумом были 30 дБ).\r\nПока что разработчикам не удалось создать систему, которая бы объединила достоинства — громкость и качество звука — обоих подходов. Но они продолжат работу в этом направлении. Инженеры планируют развивать метод на основе вращающегося зеркала. Решение связано с тем, что «сделать громче» звук в первом случае можно только за счет более мощного лазера, а он уже будет опасен для человека.\r\n\r\nДругие методы передачи направленного звука\r\nИдея использовать лазер для передачи звука на расстояние не нова. Подобную технологию предложили в Министерстве обороны США. Они использовали два оптических устройства: фемтосекундный лазер, который создает в воздухе шар плазмы, и нанолазер, настроенный на узкий диапазон длин волн и генерирующий в этом шаре звуковые колебания.\r\n\r\nВ результате в воздухе раздается неприятный шум, похожий на звук сирены. Устройство планируют применять для защиты секретных объектов от посторонних.\r\n\r\n\r\nФото D-Kuru / CC BY-SA\r\n\r\nДля передачи направленного звука также используют микроволны. Несколько лет назад группа исследователей из университета Иллинойса в Чикаго изучала возможность передачи аудиосигнала с помощью аппарата МРТ, используя черепные кости человека в качестве «носителя» звуковых колебаний. Инженерам удалось передать явно различимые акустические щелчки, но сколько-нибудь сложные аудиозаписи воспроизвести не удалось. Звуковые волны были недостаточно мощными для этого.\r\n\r\nЕще одним способом воспроизведения аудиозаписей в небольшой области пространства является ультразвук. Компания Noveto в прошлом году представила акустическую колонку, которая имеет 3D-сенсоры, отслеживающие положение головы слушателя. Затем она рассчитывает, в каком направлении и под каким углом нужно посылать ультразвуковые волны, чтобы создать у слушателя ощущение «виртуальных наушников».\r\n\r\nПерспективы направленного звука\r\nСегодня направленный звук преимущественно используют на выставках или в рекламе. Однако ожидается, что в будущем он станет более эффективным маркетинговым инструментом. Например, колонки Noveto планируют использовать вместе с системой распознавания лиц для передачи таргетированных рекламных объявлений для прохожих на улице.\r\n\r\nС новыми методами передачи звука появятся и другие сферы их применения. Например, решение инженеров из MIT предлагают использовать в системах персонального оповещения людей об опасностях, так как лазер способен транслировать звук на очень большие расстояния.\r\n\r\n\r\nДополнительное чтение из нашего «Мира Hi-Fi»:\r\n\r\n Шума стало много, шума будет мало: звуковая гигиена в городах\r\n Как превратить компьютер в радио\r\n\r\n	https://habr.com/ru/company/audiomania/blog/440588/	1ef080ca-09a9-474e-afa6-71cea68b971e
10	Дайджест свежих материалов из мира фронтенда за последнюю неделю №352 (11 — 17 февраля 2019)	дайджест фронтенд css js es6 vue react angular html5 браузеры ссылки подкасты	Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.\r\n\r\n\r\n\r\n    Медиа    |    Веб-разработка    |    CSS    |    Javascript    |    Браузеры\r\n\r\n Медиа\r\n•  Подкаст «Frontend Weekend»  #88 – Что изменилось за год у Сергея Попова (о создании Лиги А и проблеме фронтендеров без опыта) \r\n •  Подкаст «Веб-стандарты», Выпуск №161: Chrome 73 и CSS 2019, SVG, таблицы, гриды и кнопки, будущее Фоторамы.\r\n •  Подкаст «devschacht»: 69: Я  Frontend\r\n •  Подкаст «Фронтенд Юность (18+)»  #83 Пересядь на звёздный стэк \r\n •  Подкаст «CSSSR» Новости 512 — Выпуск №38 (09.02 — 15.02)\r\n •  Турнир: «Лучшая JS-фича 2018» (ЧАСТЬ 2)\r\n •   Подкаст «Frontreview» №5: Правильное Резюме и Портфолио Junior разработчика\r\n •   Ember.js: документальный фильм (официальный релиз)\r\n\r\n Веб-разработка\r\n•  HTML, который мы потеряли\r\n •  О линтерах, качестве кода, качестве вообще и управлении качеством\r\n • Краткий план по изучению фронтенда, или #100ДнейКода\r\n •  HTML5 Boilerplate обновился до версии 7\r\n •  Bootstrap 4.3.0. Релиз новой версии, в которой отказались от поддержки jQuery\r\n •  Введение в WebBluetooth\r\n •  Полное руководство — Как ускорить GIF-видео в вебе\r\n\r\n\r\nПроизводительность:\r\n•  Улучшаем производительность веб-шрифтов на реальном примере\r\n •  Приоритезация ресурсов — используем помощь браузеров\r\n •  Предварительная загрузка шрифтов и загадки приоритетов\r\n •  Пример производительности DOM\r\n •  third-party-web — подборка с краткой информацией о степени влияния третьесторонних скриптов на сайты в вебе\r\n \r\n\r\n\r\nИнструменты:\r\n•  Собираем бандл мечты с помощью Webpack\r\n •  Встречайте: pika/pack — новый способ управления npm пакетами\r\n •  Что нового в DevTools (Chrome 73) \r\n •  Puppeteer — мой новый сервер для разработки\r\n \r\n\r\n\r\nAccessibility:\r\n•  Uncanny A11y\r\n •  Советы по обеспечению доступности интерактивных элементов на мобильных устройствах\r\n •   Проектирование интерфейсов будущего: инлайновый SVG\r\n \r\n\r\n\r\nЭффектный веб:\r\n•  Эффекты фильтрации SVG. Часть 3. Эффект постеризации изображения при помощи feComponentTransfer\r\n •  Эффекты фильтрации SVG. Часть 4. Двухцветные изображения при помощи feComponentTransfer\r\n •  SVG Filter Effects: согласование текста с текстурой поверхности с помощью <feDisplacementMap> \r\n •  Эффект сеточного заполнения фона с помощью Anime.js\r\n • Water and Lemons — детализированная картина на чистом CSS\r\n \r\n\r\n\r\n\r\n CSS\r\n•  Новый опрос #StateOfCSS 2019 от создателей StateOfJS\r\n •  Темная сторона Гридов (часть 1)\r\n •  Новый подход к утилитарным классам видимости на основе переменных CSS\r\n •  10-шаговое руководство по Flexbox\r\n •  Конструируемые таблицы стилей: бесшовные переиспользуемые стили\r\n •  Процесс имплементации дизайна пользовательского интерфейса с нуля на примере шапки сайта\r\n •  CSS selectors level 4\r\n •  Введение в метрики шрифтов с подробным объяснением деталей каждого аспекта\r\n •  На Grid или на Flex?\r\n •  CSS Scroll Snap — как это работает\r\n •  В чем разница между Flexbox и Grid?\r\n\r\n JavaScript\r\n •  10 консольных команд, которые помогут дебажить JavaScript-код like a PRO\r\n •  Надёжный JavaScript: в погоне за мифом\r\n •  Практическое применение трансформации AST-деревьев на примере Putout\r\n •  Информатика в JavaScript: двусвязные списки\r\n •  5 способов создавать приложения в реальном времени с помощью JavaScript\r\n •  Как вывести JavaScript за пределы веба в 2019 году\r\n •  JavaScript: забавные моменты\r\n •  Как я избавился от новых спонсируемых постов в Facebook.\r\n •  ES5 to ESNext — вот все функции, добавленные в JavaScript с 2015 года\r\n\r\n\r\nТеория:\r\n• Всё, что нужно знать об async/await. Циклы, контроль потоков, ограничения\r\n •  Управление состоянием. Серия лекций, состоящих из пяти видео, от Ильи Климова\r\n •  Визуальное руководство по определениям и областям применения переменных JavaScript\r\n •  Основы определения и всплытия переменных в JavaScript\r\n •  Изучите чистые функции с помощью JavaScript\r\n \r\n\r\n\r\nTypeScript:\r\n•  clean-code-typescript — концепты Clean Code, адаптированные под TypeScript\r\n •  ReasonML vs TypeScript: сравнение их системы типизации\r\n •  Как использовать Typescript с React и Redux\r\n \r\n\r\n\r\n React:\r\n•  Почему React Hooks так взволновали меня?\r\n •  Создание компонента автозаполнения React с нуля\r\n •  Анимация в React\r\n •  Магия многошаговых форм на React\r\n •  Все, что вам нужно для создания пользовательского React Hook\r\n •  Как достигнуть поддержки доступности в React приложениях \r\n •  Что я почерпнула, изучив React за две ночи, после нескольких лет работы с Angular\r\n \r\n\r\n\r\n Angular:\r\n• Angular Universal: всё, что нужно знать SEO-специалисту\r\n •  Управление брейкпоинтами изображений с помощью Angular\r\n •  Тур по Angular Console\r\n •  Создания тултипа на Angular CDK\r\n \r\n\r\n\r\n VueJS:\r\n•  VueJS 3.0: Революция?. Мнение Ильи Климова\r\n •  Создание SPA на Vue.js для продажи футболок \r\n •  Превращение статических SVG рисунков в интерактивные виджеты и инфографику с Vue.js\r\n \r\n\r\n\r\n Браузеры \r\n •  Мобильная Opera обзавелась бесплатным VPN\r\n • Представлен новый интерфейс браузера Opera\r\n • Браузер Samsung Internet Browser преодолел рубеж в 1 млрд загрузок в Google Play Store\r\n • Сотрудник Microsoft: не используйте Internet Explorer по умолчанию\r\n • В Chrome появится поддержка ссылок на отдельные слова и фразы в тексте\r\n •  Экономия памяти в Brave: сокращение на 33–66% по сравнению с Chrome\r\n﻿\r\n\r\nПросим прощения за возможные опечатки или неработающие/дублирующиеся ссылки. Если вы заметили проблему — напишите пожалуйста в личку, мы стараемся оперативно их исправлять. \r\n\r\nДайджест за прошлую неделю.\r\nМатериал подготовили dersmoll и alekskorovin.	https://habr.com/ru/post/440644/	1ef080ca-09a9-474e-afa6-71cea68b971e
11	OWASP Proactive Controls: cписок обязательных требований для разработчиков ПО	OWASP Proactive Controls	\r\n\r\nПредлагаем вашему вниманию Top 10 Proactive Controls for Software developers – 10 аспектов безопасности, на которых должны сосредоточиться разработчики ПО. Данная статья содержит список техник по обеспечению безопасности, обязательных для реализации при разработке каждого нового проекта.\r\n\r\nНедостаточно защищенное ПО подрывает безопасность объектов критической инфраструктуры, относящихся, например, к здравоохранению, обороне, энергетике или финансам. Наша глобальная цифровая инфраструктура становится сложнее, количество взаимосвязей между ее компонентами увеличивается, поэтому важность обеспечения безопасности приложений возрастает экспоненциально. Больше нельзя оставлять без должного внимания относительно простые угрозы безопасности.\r\n\r\nOWASP\r\nOpen Web Application Security Project (OWASP) – открытый проект обеспечения безопасности web-приложений. Сообщество OWASP включает в себя корпорации, образовательные организации и частных лиц со всего мира. OWASP работает над созданием общедоступных статей, учебных пособий, документации, инструментов и технологий.\r\n\r\nНа проект OWASP ссылается множество стандартов, инструментов и организаций, включая MITRE, PCI DSS, DISA, FTC и множество других.\r\n\r\nПроект «Проактивная защита: Топ-10 требований OWASP» аналогичен проекту OWASP Top-10, но в нем акцент делается на методах и рекомендациях по защите от угроз, а не на самих угрозах. Каждый метод и рекомендация в данном документе связаны с одной или несколькими угрозами из списка OWASP Top-10. \r\n\r\nЦели и задачи\r\nЦель проекта «Проактивная защита: Топ-10 требований OWASP» – привлечение внимания к безопасности приложений путем рассмотрения наиболее важных аспектов ИБ, которые стоит учитывать разработчикам ПО. Мы призываем организации воспользоваться рекомендациями OWASP по проактивной защите и научить разработчиков обращать внимание на безопасность приложений, придавая значение ошибкам, имевшим место в других организациях. Надеемся, что рекомендации OWASP окажутся для вас полезными при создании безопасных приложений.\r\n\r\nЦелевая аудитория\r\nДокумент предназначается прежде всего разработчикам. Однако он будет полезен и руководителям разработки, менеджерам продуктов, специалистам по обеспечению качества, руководителям проектов, а также остальным участникам процесса создания программного обеспечения.\r\n\r\nТоп-10 требований к проактивной защите\r\nC1: Определение требований безопасности\r\nТребования безопасности описывают функции, которые необходимо реализовать для обеспечения определенных параметров безопасности ПО. Они составляются на основе промышленных стандартов, действующих законов и данных об обнаруженных уязвимостях. В требованиях определяются функции, которые нужно разработать или доработать для решения конкретных проблем с безопасностью или устранения потенциальных угроз.\r\n\r\nСтандарт подтверждения безопасности приложений OWASP (ASVS) представляет собой каталог доступных требований безопасности и параметров проверки. OWASP ASVS может служить источником расширенных требований безопасности для команд разработчиков.\r\n\r\nТребования безопасности объединены в категории на основе общих функций безопасности высшего порядка. Например, ASVS содержит следующие категории: аутентификация, контроль доступа, обработка и журналирование ошибок, а также веб-службы. Для каждой категории существует список параметров, которые рекомендуется проверять. \r\n\r\nПроцесс успешного применения требований безопасности включает в себя четыре этапа: поиск и выбор, документирование, реализация, подтверждение правильности реализации новых функций безопасности и функциональности приложения.\r\n\r\nC2: Использование безопасных фреймворков и библиотек\r\nБезопасные библиотеки и фреймворки со встроенными функциями безопасности помогают разработчикам избежать появления уязвимостей на этапах разработки и реализации. Разработчики, создающие приложение с нуля, могут не иметь достаточных знаний, времени или средств для реализации или поддержания безопасности приложения. Использование безопасных фреймворков позволяет повысить уровень защищенности приложений.\r\n\r\nПри включении сторонних библиотек или фреймворков в свое ПО необходимо учитывать следующие рекомендации:\r\n\r\n\r\nиспользуйте библиотеки и фреймворки из доверенных источников, которые активно разрабатываются и широко применяются в приложениях;\r\nсоставьте и поддерживайте в актуальном состоянии каталог всех сторонних библиотек;\r\nсвоевременно обновляйте библиотеки и компоненты. Используйте инструменты, такие как Проверки зависимостей OWASP и Retire.JS, для определения зависимостей в проектах, а также проверяйте наличие известных и опубликованных уязвимостей в стороннем коде;\r\nдля снижения вероятности атак используйте инкапсуляцию библиотек и только необходимую для вашего ПО функциональность.\r\n\r\nC3: Обеспечение безопасного доступа к базам данных\r\nДанный раздел посвящен обеспечению безопасного доступа ко всем хранилищам данных, включая реляционные базы данных и базы данных NoSQL. \r\n\r\nОдну из наиболее серьезных угроз безопасности приложения представляет внедрение SQL-кода. Этот вид атаки легко осуществим: SQL-код может быть внедрен, если недоверенные входные данные динамически добавляются в SQL-запросы, что обычно происходит путем их присоединения к основной строке. Эксплуатация данной уязвимости может привести к краже, удалению или изменению баз данных. Приложение также может быть использовано для выполнения вредоносных команд в системе, содержащей вашу базу данных, что позволит злоумышленнику закрепиться в сети.\r\n\r\nДля предотвращения SQL-внедрений необходимо избегать интерпретации непроверенных входных данных в составе SQL-команд. Наилучшим решением будет использование метода «параметризации запросов». Этот метод необходимо применять к конструкциям SQL и OQL, а также хранимым процедурам.\r\n\r\nПримеры параметризации запросов для ASP, ColdFusion, C#, Delphi, .NET, Go, Java, Perl, PHP, PL/SQL, PostgreSQL, Python, R, Ruby и Scheme можно найти на сайте http://bobby-tables.com и в памятке OWASP по параметризации запросов.\r\n\r\nC4: Кодирование и экранирование данных\r\nКодирование и экранирование являются методами защиты от внедрения кода. Кодирование, которое также называется «кодированием выходных данных», представляет собой преобразование специальных символов в эквивалентные, не опасные для интерпретатора, комбинации. Например, символ < преобразуется в сочетание < при его добавлении на HTML-страницу. Экранирование заключается в добавлении спецсимволов перед символами или строками для предотвращения их некорректной интерпретации, например, добавление символа \\ перед " (двойными кавычками) позволяет интерпретировать их в качестве части текста, а не в качестве обозначения окончания строки.\r\n\r\nКодирование лучше всего применять непосредственно перед передачей данных интерпретатору. Если применить данный метод на слишком раннем этапе обработки запроса, то кодирование или экранирование может сказаться на использовании контента в других частях программы. Например, если перед сохранением в базе данных HTML-контент экранируется, а интерфейс автоматически экранирует эти данные еще раз, то содержимое не будет отображаться корректно из-за двойного экранирования.\r\n\r\nКодирование или экранирование может быть использовано для предотвращения других форм внедрений в контент. Например, можно нейтрализовывать некоторые специальные метасимволы при вводе данных для системных команд. Это называют «экранированием команд ОС», «экранированием shell» и т.п. Подобная защита может быть использована для предотвращения «внедрения команд».\r\n\r\nСуществуют и другие формы экранирования, которые могут быть использованы для предотвращения внедрений, например, экранирование атрибутов XML, защищающее от различных форм внедрений XML и XML-путей, а также экранирование уникальных имен LDAP, позволяющее предотвратить различные LDAP-внедрения.\r\n\r\nC5: Обязательная проверка всех входных данных\r\nПроверка входных данных является частью методики программирования, обеспечивающей попадание в компоненты программы только правильно отформатированных данных.\r\n\r\nСинтаксическая и семантическая норма\r\nПриложение должно проверять данные на соответствие синтаксической и семантической норме (именно в этом порядке) перед их использованием (включая отображение пользователю).\r\n\r\nСинтаксическая норма означает соответствие данных ожидаемой форме представления. Например, в приложении пользователь может указывать четырехзначный «идентификатор» для выполнения некоторых операций. Злоумышленник может ввести данные, позволяющие ему внедрить SQL-код, поэтому приложение должно проверять, что вводимые данные представляют собой именно цифры и именно в количестве четырех символов (помимо использования соответствующей параметризации запросов).\r\n\r\nСемантическая норма означает использование только входных данных, не выходящих за рамки определенной функциональности и контекста. Например, при указании временных рамок дата начала должна предшествовать дате завершения.\r\n\r\nБелые и черные списки\r\nСуществует два основных подхода к проверке синтаксиса входных данных — проверка по черным и белым спискам.\r\n\r\nПервый способ предназначен для поиска в данных «потенциально вредоносного» контента. Например, веб-приложение может блокировать входные данные, содержащие слово SCRIPT, с целью предотвращения межсайтового выполнения сценариев. Однако подобную меру защиты можно обойти, используя для тега script строчные буквы или комбинацию из строчных и прописных букв.\r\n\r\nВторой способ предназначен для подтверждения соответствия данных требованиям набора «проверенных» правил. Например, проверка штата США по белому списку будет представлять собой поиск 2-буквенного кода в списке существующих штатов США.\r\n\r\nПри создании безопасного ПО как минимум рекомендуется использовать белые списки. Черные списки могут содержать ошибки, их можно обойти различными способами, да и сами по себе они могут представлять опасность. Несмотря на возможность обхода ограничений черных списков, они могут быть полезны в обнаружении очевидных атак. Таким образом, белые списки помогают ограничить возможность проведения атаки путем проверки соответствия данных синтаксической и семантической нормам, а черные списки помогают обнаружить и предотвратить очевидные атаки.\r\n\r\nПроверки на стороне клиента и на стороне сервера\r\nДля обеспечения безопасности проверку входных данных необходимо всегда проводить на стороне сервера. Проверки на стороне клиента могут быть полезны с точки зрения функциональности и безопасности, но зачастую их легко обойти. Таким образом, проверка на стороне сервера является более предпочтительной для обеспечения безопасности. Например, проверка JavaScript может предупредить пользователя о том, что поле должно содержать только цифры, а вот приложение на стороне сервера должно подтвердить, что вводимые данные представляют собой числа в допустимом диапазоне значений.\r\n\r\nC6: Внедрение цифровой идентификации\r\n\r\nЦифровая идентификация — это уникальное представление пользователя (или любого другого объекта) при онлайн-транзакциях. Аутентификация — это процесс подтверждения того, что человек или сущность является тем, кем представляется. Управление сессиями — это процесс, с помощью которого сервер контролирует состояние аутентификации пользователя, чтобы он мог продолжать пользоваться системой без повторной аутентификации. Специальное издание NIST 800-63B: Руководство по цифровой идентификации (Аутентификация и управление жизненным циклом) содержит подробные рекомендации по реализации требований к цифровой идентификации, аутентификации и управлению сессиями.\r\n\r\nC7: Обязательный контроль доступа\r\nКонтроль доступа (или авторизация) заключается в разрешении или запрещении специфических запросов, поступающих от пользователей, программ или процессов, а также предполагает выдачу и отзыв подобных привилегий.\r\n\r\nНеобходимо отметить, что авторизация (подтверждение права доступа к специальным функциям или ресурсам) не равняется аутентификации (подтверждению личности).\r\n\r\nКонтроль доступа обычно затрагивает многие аспекты работы ПО, в зависимости от сложности системы контроля доступа. Например, управление метаданными контроля доступа или кеширование для целей масштабируемости обычно являются дополнительными компонентами системы контроля доступа, которые необходимо создавать или обслуживать. Существует несколько разных подходов к контролю доступа:\r\n\r\n\r\nизбирательное управление доступом (DAC) — предполагает ограничение доступа к объектам (например, файлам или элементам данных) на основе идентификатора, а также принципа «необходимого знания» субъектов (например, пользователей или процессов) и/или групп, которым принадлежат объекты;\r\nмандатное управление доступом (MAC) — предполагает ограничение доступа к системным ресурсам на основе критичности данных (определяемой метками), содержащихся в этих ресурсах, и формальных полномочий (т.е. допуска) пользователей на доступ к информации указанной важности;\r\nролевая модель управления доступом (RBAC) — предполагает контроль доступа к ресурсам на основе ролей, определяющих разрешенные действия с ресурсами, а не на основе идентификаторов субъектов;\r\nуправление доступом на основе атрибутов (ABAC) — предполагает разрешение или запрещение запросов пользователя, исходя из атрибутов пользователя и атрибутов объекта, а также элементов окружения, которые могут определяться глобально и быть более релевантными для применяемых политик.\r\n\r\n\r\nC8: Повсеместная защита данных\r\nКонфиденциальные данные, такие как пароли, номера кредитных карт, медицинские записи, персональные данные и коммерческие тайны требуют дополнительной защиты, особенно если на них распространяется действие закона о неприкосновенности данных, например, Общего регламента ЕС по защите данных (GDPR), или закона о защите финансовых данных, например, Стандарта безопасности данных в сфере платежных карт (PCI DSS).\r\n\r\nЗлоумышленники могут похитить данные из веб-приложений и веб-служб множеством разных способов. Например, атакующий может подключиться к общей беспроводной сети и просмотреть или похитить конфиденциальные данные других пользователей, если они передаются через небезопасное интернет-подключение. Также злоумышленник может использовать внедрение SQL-кода, чтобы похитить пароли и другие учетные данные из приложений, а затем выложить их в открытый доступ.\r\n\r\nКлассификация данных\r\nНеобходимо классифицировать данные в вашей системе и определить, к какому уровню критичности относится каждый блок данных. Каждая категория данных затем может быть соотнесена с правилами защиты, определяемыми для каждого уровня критичности. Например, публичная маркетинговая информация, не являющаяся конфиденциальной, может быть отнесена к общедоступным данным, которые можно размещать на общедоступном сайте. Номера кредитных карт можно отнести к персональным данным пользователей, которые требуют шифрования при их хранении или передаче.\r\n\r\nШифрование передаваемых данных\r\nПри передаче конфиденциальных данных через любую сеть необходимо применять сквозную защиту соединений (или шифрование). TLS безоговорочно является самым распространенным и поддерживаемым криптографическим протоколом, обеспечивающим безопасность соединений. Он используется во многих сферах (веб-приложения, веб-службы, мобильные приложения) для безопасной передачи данных по сети. Для обеспечения безопасности соединений TLS необходимо правильно настроить.\r\n\r\nОсновная польза от протокола TLS — это защита данных веб-приложений от несанкционированного доступа и изменений при их передаче между клиентами (веб-браузерами) и сервером веб-приложения, а также между сервером веб-приложения и внутренним сервером или другими, не относящимися к браузеру, компонентами организации.\r\n\r\nШифрование хранимых данных\r\nПервое правило управления конфиденциальными данными — избегать хранения конфиденциальных данных, когда это возможно. Если сохранять конфиденциальные данные необходимо, то убедитесь в наличии у них криптографической защиты от несанкционированного доступа и изменений.\r\n\r\nКриптография является одной из самых передовых областей информационной безопасности, ее понимание требует обширных знаний и опыта. Трудно выбрать какое-то одно единственное решение, поскольку существует множество разных подходов к шифрованию, и каждый из них имеет свои преимущества и недостатки, которые веб-архитекторы и веб-разработчики должны четко понимать. Более того, серьезное криптографическое исследование обычно основывается на высшей математике и теории чисел, что создает высокий входной порог.\r\n\r\nC9: Внедрение журналирования и мониторинга событий безопасности\r\nБольшинство разработчиков уже используют журналирование при отладке и диагностике. Также важно регистрировать события безопасности (данные, связанные с обеспечением безопасности) во время работы приложения. Мониторинг — это «живой» анализ приложения и журналов безопасности с помощью различных средств автоматизации. Такие же инструменты и шаблоны могут применяться к выполняемым операциям, отладке и обеспечению безопасности.\r\n\r\nПольза от журналирования событий безопасности\r\nЖурналы регистрации событий безопасности могут быть использованы для:\r\n\r\n\r\nснабжения системы обнаружения атак данными;\r\nанализа и расследования инцидентов;\r\nвыполнения требований регулирующих органов.\r\n\r\nРеализация журналирования событий безопасности\r\nНиже представлены рекомендации по реализации журналирования событий безопасности.\r\n\r\n\r\nИспользуйте стандартные формы и способы регистрации событий в системе и между системами вашей организации. Примером стандартной платформы для регистрации событий являются службы журналирования Apache (Apache Logging Services), которые обеспечивают совместимость журналирования между приложениями на Java, PHP, .NET и C++.\r\nНе регистрируйте слишком много или слишком мало данных. Например, убедитесь в обязательной регистрации временных меток и идентификационных данных, таких как IP-адрес источника и идентификатор пользователя, но никогда не записывайте персональные или конфиденциальные данные.\r\nОбратите особое внимание на синхронизацию времени между узлами для обеспечения согласованности временных меток.\r\n\r\nЖурналирование с целью обнаружения атак и противодействия им\r\nИспользуйте журналирование для определения активности, указывающей на вредоносный характер действий пользователя. Потенциально опасная активность, подлежащая регистрации:\r\n\r\n\r\nвводимые данные находятся за пределами ожидаемого числового диапазона;\r\nвводимые данные модифицируют компоненты, которые должны оставаться неизменными (список выбора, поля флажков, прочие компоненты с ограниченным вводом);\r\nзапросы, нарушающие правила управления доступом на стороне сервера;\r\nболее подробный список маркеров атак можно найти здесь.\r\n\r\nКогда приложение обнаруживает подобную активность, оно должно как минимум зарегистрировать это событие и отметить его как опасное. В идеале приложение должно оказать противодействие атаке, например, путем аннулирования сессии пользователя и блокировки его учетной записи. Механизм противодействия позволяет программе реагировать на обнаруживаемые атаки в реальном времени.\r\n\r\nC10: Обязательная обработка всех ошибок и исключений\r\nОбработка исключений позволяет приложению реагировать на разные ошибки (например, сбой сети или подключения к базе данных) различными способами. Корректная обработка исключений и ошибок просто необходима для обеспечения надежности и безопасности вашего кода.\r\n\r\nОшибки и исключения обрабатываются на всех уровнях приложения, включая критическую бизнес-логику, функции безопасности и фреймворки.\r\n\r\nОбработка ошибок также важна с точки зрения обнаружения атак. Некоторые атаки на приложения могут вызывать ошибки, позволяющие обнаружить атаку в процессе ее проведения.\r\n\r\nНекорректная обработка ошибок\r\nИсследователи из Университета Торонто выяснили, что даже небольшая оплошность при обработке ошибок или их игнорирование может привести к критическим сбоям в работе распределенных систем.\r\n\r\nНекорректная обработка ошибок может стать причиной различных уязвимостей.\r\n\r\n\r\nУтечка данных. Разглашение конфиденциальной информации в сообщениях об ошибках может непреднамеренно помочь злоумышленникам. Например, сообщение, содержащее трассировку стека или подробности внутренней ошибки, может предоставить злоумышленнику данные о вашем окружении. Даже небольшие различия в обработке ошибок (например, сообщение о вводе некорректного имени пользователя или некорректного пароля при ошибке аутентификации) могут стать для атакующего источником важной информации. Как описывалось выше, необходимо обеспечить подробное журналирование ошибок для проведения расследований и отладки, но при этом избегать разглашения этих данных, особенно внешним клиентам.\r\nОбход защиты TLS. Уязвимость Apple «goto fail» была следствием ошибки управления в коде обработки ошибок, которая приводила к полной компрометации TLS-соединений систем Apple.\r\nОтказ в обслуживании. Отсутствие базовой обработки ошибок может привести к неработоспособности системы. Обычно это относительно простая в эксплуатации уязвимость. Другие проблемы с обработкой ошибок могут привести к повышенному использованию ресурсов ЦП или диска и таким образом ухудшить производительность системы.\r\n\r\nПолезные советы\r\n\r\nУправляйте исключениями централизованно, чтобы избежать дублирования блокировок try/catch в коде. Убедитесь в корректной обработке непредвиденных режимов работы внутри приложения.\r\nУбедитесь в том, что выводимые сообщения об ошибках не содержат критичных данных, но при этом содержат достаточно информации для соответствующего реагирования на них.\r\nОбеспечьте журналирование исключений таким образом, чтобы специалисты из команды технической поддержки, контроля качества, расследования инцидентов или реагирования на атаки имели достаточно данных для решения проблемы.\r\nТщательно протестируйте и проверьте код обработки ошибок.\r\n\r\n\r\nЗаключение\r\nДанный документ необходимо рассматривать как отправную точку, а не как исчерпывающий набор методов и практик. Мы еще раз хотим отметить, что представленные материалы предназначены для ознакомления с основами разработки безопасного программного обеспечения.\r\n\r\nПри создании программы обеспечения безопасности приложений рекомендуется выполнить следующие шаги:\r\n\r\n\r\nознакомиться с Топ-10 OWASP и Топ-10 OWASP (мобильные устройства) для понимания рисков, связанных с безопасностью веб-приложений;\r\nсогласно требованию № 1 проактивной защиты, включить в программу обеспечения безопасной разработки подробный список требований к безопасности на основе стандартов, например, Стандарта подтверждения безопасности веб-приложений OWASP (ASVS) и Стандарта подтверждения безопасности мобильных приложений OWASP (MASVS);\r\nознакомиться с положениями OWASP OpenSAMM для более общего понимания ключевых блоков создания безопасного ПО.\r\n\r\n\r\nПолная версия  перевода и оригинал. В переводе и адаптации принимали участие: JZDLin, Алексей Скачков, Иван Кочуркин и Тарас Иващенко.\r\n\r\nДанный документ выпущен под лицензией Creative Commons Attribution ShareAlike 3.0, переведен и адаптирован при участии российского отделениия консорциума OWASP.	https://habr.com/ru/company/jetinfosystems/blog/440202/	1ef080ca-09a9-474e-afa6-71cea68b971e
12	Docker и Kubernetes в требовательных к безопасности окружениях	Kubernetes Docker контейнеры	Прим. перев.: Оригинальная статья была написана инженером из Швеции — Christian Abdelmassih, — который увлекается архитектурой уровня enterprise, ИТ-безопасностью и облачными вычислениями. Недавно он получил степень магистра в области Computer Science и спешит поделиться своим трудом — магистерской диссертацией, а точнее — её частью, посвящённой проблемам изоляции контейнеризированного [и запущенного в Kubernetes] приложения. В качестве «клиента», для которого была подготовлена эта исследовательская работа, выступает ни много ни мало полиция его родины.\r\n\r\n\r\n\r\nОркестровка контейнеров и облачные (cloud-native) вычисления стали очень популярными в последние годы. Их адаптация дошла до такого уровня, что интерес к ним проявляют даже финансовые предприятия, банки, госсектор. На фоне других компаний их выделяют обширные требования в области безопасности информации и ИТ.\r\n\r\nОдин из важных аспектов — как могут использоваться контейнеры в production-окружениях и в то же время поддерживаться системное разграничение между приложениями. Поскольку такие организации используют частные облачные окружения, основанные на виртуализации поверх bare metal, потеря такой изоляции при миграции в окружение с оркестрируемыми контейнерами недопустима. С учётом этих ограничений и написана моя диссертация, а в качестве целевого клиента в ней рассматривается Полиция Швеции.\r\n\r\nКонкретным вопросом исследования, рассматриваемого в диссертации, является:\r\n\r\nКак в Docker и Kubernetes поддерживается разграничение приложений, если сравнить с виртуальными машинами, работающими поверх гипервизора ESXi, запущенного на bare metal?\r\nЭтот вопрос требует тщательной проработки. Чтобы начать с чего-то, посмотрим на общий знаменатель — приложения.\r\n\r\nВеб-приложения запутаны\r\nУязвимости в веб-приложениях — настоящий зоопарк из векторов атак. Наиболее значимые риски которых представлены в OWASP Top 10 (2013, 2017). Подобные ресурсы способствуют обучению разработчиков в области снижения типовых рисков. Однако даже если разработчики написали безупречный код, приложение всё ещё может быть уязвимым — например, через пакетные зависимости.\r\n\r\nDavid Gilbertson написал замечательную историю о том, как можно добиться инъекции кода через зловредный пакет, распространяемый, например, в рамках NPM для приложений на базе Node.js. Для обнаружения уязвимостей можно использовать сканеры зависимостей, однако они только снижают риск, но не ликвидируют его полностью.\r\n\r\nДаже если вы создаёте приложения без сторонних зависимостей, всё ещё нереалистично будет полагать, что приложение никогда не станет уязвимым.\r\n\r\nИз-за этих рисков мы не можем говорить, что веб-приложения безопасны.\r\n\r\nВместо этого стоит придерживаться стратегии «глубокой обороны» (defense in depth, DID). Взглянем же на следующий уровень: контейнеры и виртуальные машины.\r\n\r\nКонтейнеры против виртуальных машин — сказ об изоляции\r\nКонтейнер — изолированное пользовательское (user-space) окружение, которое зачастую реализуется с помощью возможностей ядра. Например, Docker для этого использует пространства имён Linux, cgroups и capabilities. В этом смысле изоляция Docker-контейнеров сильно отличается от виртуальных машин, запускаемых гипервизорами типа 1 (т.е. работающими прямо на железе; bare-metal hypervisors).\r\n\r\nРазграничение для таких виртуальных машин может быть реализовано на настолько низком уровне, что и в реальном железе, например, через Intel VT. Docker-контейнеры, в свою очередь, для разграничения опираются на ядро Linux. Это отличие очень важно учитывать, когда речь идёт об атаках уровнем ниже (layer-below attacks).\r\n\r\nЕсли злоумышленник способен исполнять код в виртуальной машине или контейнере, он потенциально может добраться до уровня ниже, выполнив атаку выхода за пределы (escape attack).\r\n\r\n\r\nв зависимости от того, используются контейнеры или виртуальные машины на железе, разграничение реализуется на разных уровнях инфраструктуры.\r\n\r\nВозможность таких атак была доказана для гипервизора VMware ESXi во время конкурса хакеров Pwn2Own 2017, а также GeekPwn2018. Результатом стала пара CVE (CVE-2017–4902, CVE-2018–6981), которые могут использоваться в атаках layer-below для выхода из виртуальных машин (virtual machine escape). Виртуальные машины на железных серверах не гарантируют абсолютной безопасности даже несмотря на то, что используют технологии разграничения уровня железа.\r\n\r\nС другой стороны, если мы посмотрим на векторы атаки на стоящий на bare-metal гипервизор в сравнении с ядром Linux, очевидно, что у последнего гораздо большая поверхность атаки — из-за его [ядра Linux] размера и спектра возможностей. Большая поверхность атаки подразумевает больше векторов потенциальных атак для облачных окружений, использующих контейнерную изоляцию. Это проявляется в растущем внимании к атакам выхода из контейнера (container escape attacks), которые стали возможными благодаря эксплоитам к ядру (например, CVE-2016–5195 [т.е. Dirty COW — прим. перев.], CVE-2017–1000405).\r\n\r\nДля повышения изоляции внутри контейнера можно использовать модули вроде SELinux или AppArmor. К сожалению, такие механизмы безопасности в ядре не предотвращают escape-атаки на само ядро. Они лишь ограничат возможные действия злоумышленника, если выход за пределы не представляется возможным. Если же мы хотим разобраться с выходами за пределы контейнера, необходим механизм изоляции вне контейнера или даже ядра. Например, песочница (sandbox)!\r\n\r\ngVisor — песочница для исполняемой среды контейнеров, код которой был открыт Google и которая добавляет дополнительное ядро между контейнером и ядром ОС. Такой тип песочницы может улучшить ситуацию с атаками выхода за пределы контейнера, которые осуществляются на уровне ядра. Однако эксплоиты к ядру — лишь один из инструментов злоумышленника.\r\n\r\nЧтобы увидеть, как другие атаки могут привести к схожим результатам, необходимо взглянуть на более общую картину, как используются контейнеры в эпоху cloud native.\r\n\r\nВлияние оркестровки контейнеров на изоляцию\r\nЧтобы управлять контейнерами, запущенными в окружениях со множеством узлов, внедряют оркестровку, лидирующую роль в которой отдают Kubernetes. Как выясняется, баги оркестратора тоже могут повлиять на изоляцию контейнеров.\r\n\r\nTim Allclair выступил с замечательной презентацией на KubeCon 2018, в которой отметил некоторые поверхности атаки. В своём докладе он упоминает пример (CVE-2017–1002101), как баги оркестровки могут повлиять на изоляцию — в данном случае через возможность монтирования дискового пространства, находящегося вне pod'а. Уязвимости подобного вида очень проблематичны, т.к. могут обходить песочницу, в которую обёрнут контейнер.\r\n\r\nВнедрив Kubernetes, мы расширили поверхность атаки. К ней относятся системы, которые хостятся на master'е Kubernetes'а. Одной из них является API-сервер Kubernetes, где недавно обнаружили уязвимость, позволяющую превышать полномочия (CVE-2018–1002105). Поскольку поверхность атаки Kubernetes master'а выходит за рамки моей диссертации, эта конкретная уязвимость не берётся во внимание.\r\n\r\nПочему escape-атаки столь важны? Контейнеры представили возможность запуска множества совместно размещённых приложений в рамках одной ОС. Так возник риск, связанный с изоляцией приложений. Если критичное для бизнеса приложение и другое уязвимое приложение работают на одном хосте, злоумышленник может через атаку уязвимого приложения получить доступ к критичному.\r\n\r\nВ зависимости от того, с какими данными работает организация, их утечка может навредить не только самой организации, но и физическим лицам, и целой стране. Как помните, речь идёт про госсектор, финансы, банки… — утечка может серьёзно повлиять на жизнь людей.\r\n\r\nТак может ли оркестровка контейнеров вообще использоваться в подобных окружениях? Перед тем, как приниматься за дальнейшие размышления, надо провести оценку рисков.\r\n\r\nКакой риск допустим?\r\nЕщё до того, как вводить меры безопасности, важно подумать над тем, какую же информацию организация на самом деле пытается защитить. Решение о том, нужны ли дальнейшие шаги по предотвращению возможных escape-атак на контейнеры, зависит от данных, с которыми работает организация, и услуг, которые она оказывает.\r\n\r\nВ перспективе это означает, что для достижения возможности выхода из контейнера на корректно настроенном хосте, защищённом песочницей для контейнера, злоумышленник должен:\r\n\r\n\r\n исполнить код в контейнере, например, через инъекцию кода или с помощью уязвимости в коде приложения;\r\n воспользоваться другой уязвимостью, zero-day или для которой ещё не применили патч, чтобы выйти из контейнера даже несмотря на то, что имеется песочница.\r\n\r\nКак можно догадаться, организация, которая не считает подобный сценарий допустимым, должна работать с данными или предлагать услуги, которые весьма требовательны к конфиденциальности, целостности и/или доступности.\r\n\r\nПоскольку диссертация посвящена именно таким клиентам, потеря системной изоляции посредством выхода за пределы контейнера непозволительна, т.к. её последствия слишком значительны. Какие же шаги можно предпринять для улучшения изоляции? Чтобы подняться выше на уровень в лестнице изоляции, стоит также посмотреть на песочницы, в которые обёрнуто ядро ОС, т.е. виртуальные машины!\r\n\r\nТехнологии виртуализации, в которых используются hosted-гипервизоры, улучшат ситуацию, однако мы хотим ограничить поверхность атаки ещё больше. Поэтому давайте изучим устанавливаемые на железо гипервизоры и посмотрим, к чему они нас приведут.\r\n\r\nГипервизоры на железе\r\nВ исследовании шведского агентства Swedish Defence Research Agency рассматривались риски виртуализации в отношении к Вооружённым силам Швеции (Swedish Armed Forces). Его заключение гласило о пользе этих технологий для вооружённых сил даже при наличии строгих требований к безопасности и рисков, которые приносит виртуализация.\r\n\r\nВ связи с этим мы можем заявить, что виртуализация применяется (в определённой степени) в оборонной промышленности, поскольку несёт допустимые риски. Поскольку агентства и предприятия в оборонной индустрии — одни из самых требовательных к ИТ-безопасности клиентов, мы можем также утверждать, что допустимый риск для них означает его допустимость и для клиентов, рассматриваемых в диссертации. И всё это — несмотря на потенциальные выходы за пределы виртуальной машины, рассмотренные выше.\r\n\r\nЕсли мы решим использовать такой тип песочниц для контейнеров, необходимо учесть несколько вещей в контексте облачной (cloud-native) специфики.\r\n\r\nУзлы-песочницы для виртуальных машин\r\nИдея заключается в том, чтобы узлами Kubernetes-кластера были виртуальные машины, использующие виртуализацию на железе. Поскольку виртуальные машины будут играть роль песочниц для контейнеров, что запускаются в pod'ах, каждый узел можно рассматривать как защищённое песочницей окружение.\r\n\r\nВажное замечание по поводу этих песочниц в контексте уже упомянутых ранее песочниц для контейнеров: такой подход позволяет помещать множество контейнеров в одну песочницу. Такая гибкость позволяет снизить накладные расходы, если сравнивать со случаем, когда у каждого контейнера своя песочница. Поскольку каждая песочница приносит свою ОС, мы хотим снизить их количество, поддерживая изоляцию.\r\n\r\n\r\nУстановленные на железе виртуальные машины — узлы кластера — выступают в роли песочниц для контейнеров. Контейнеры, запущенные в разных ВМ, разграничены с допустимым уровнем риска. Однако это не относится к контейнерам, запущенным в одной ВМ.\r\n\r\nОднако, поскольку Kubernetes способен по разным причинам изменять размещение pod'ов, что может испортить используемую идею песочниц, потребуется добавить ограничения на механизм совместного размещения pod'ов. Добиться нужного можно многими путями.\r\n\r\nК моменту написания статьи Kubernetes (v1.13) поддерживает три основных метода контроля планирования и/или запуска pod'ов:\r\n\r\n\r\n NodeSelector & NodeAffinity;\r\n Taints & Tolerations;\r\n PodAffinity & PodAntiAffinity.\r\n\r\nКакой(ие) метод(ы) использовать, зависит от приложений организации. Однако важно заметить, что методы отличаются в своей возможности отбрасывать pod'ы после того, как они вошли в стадию исполнения (execution). Сейчас на это способны только taints — через действие NoExecute. Если же никак этот момент не обрабатывать и какие-то лейблы поменяются, то всё может привести к нежелательному совместному размещению.\r\n\r\nСоответствие требованиям к совместному размещению\r\nВ диссертации предлагается идея использовать систему классификации, показывающей, как чувствительность отражается на совместном размещении. Идея в том, чтобы использовать связь 1:1 между контейнером и pod'ом и определять совместное размещение pod'ов на основе классификации контейнеризированных приложений.\r\n\r\nДля простоты и возможности повторного использования применяется следующая 3-ступенчатая система классификации:\r\n\r\n\r\n Класс O: приложение не является чувствительным и не имеет требований к изоляции. Его можно размещать на любых узлах, которые не принадлежат другим классам.\r\n Класс PG (private group): Приложение, в совокупности с набором других приложений, формирует частную группу, для которой требуется выделенный узел. Приложение может размещаться только на узлах класса PG, имеющих соответствующий идентификатор частной группы.\r\n Класс P (private): Приложение требует частного и отдельного узла и может размещаться только на пустых узлах своего класса (P).\r\n\r\nЧтобы соответствовать требованиям совместного размещения для множества классифицированных приложений используются taints и tolerations, с которыми каждому узлу назначается класс, и PodAffinity для применения дополнительных ограничений для pod'ов с приложениями класса P или PG.\r\n\r\nЭтот упрощённый пример показывает, как могут использоваться taints и tolerations для реализации контроля совместного размещения:\r\n\r\n\r\n\r\nPod'ы 2 и 3 содержат приложения из одной частной группы, а приложение на Pod 1 — более чувствительное и требует выделенного узла.\r\n\r\nОднако для классов P и PG потребуются дополнительные правила Affinity, которые гарантируют, что запросы на разграничение выполняются по мере роста кластера и размещённых в нём приложений. Посмотрим, как можно реализовать эти правила для разных классов:\r\n\r\n# Class P\naffinity:\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: "kubernetes.io/hostname"\n        namespaces: ["default"]\n        labelSelector:\n          matchExpressions:\n          - key: non-existing-key\noperator: DoesNotExist\r\nПравила Affinity для приложений класса P требуют выделенных узлов. В этом случае pod не будет планироваться, если pod выходит без non-existing-key. Всё будет работать, пока ни у одного pod'а не появится этот ключ.\r\n\r\n# Class PG\naffinity:\n  podAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: "kubernetes.io/hostname"\n        labelSelector:\n          matchLabels:\n            class-pg-group-1: foobar\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: "kubernetes.io/hostname"\n        labelSelector:\n          matchExpressions:\n          - key: class-pg-group-1\noperator: DoesNotExist\r\nДля приложений класса PG правила Affinity будут делать совместное размещение pod'ам, у которых задан идентификатор группы class-pg-group-1, и на узлах, имеющих pod'ы без идентификатора.\r\n\r\nТакой подход позволит нам с помощью системы классификации разграничивать контейнеры, опираясь на соответствующие требования контейнеризированного приложения.\r\n\r\nЧто же мы получили?\r\n\r\nЗаключение\r\nМы рассмотрели способ реализации песочниц, основанных на гипервизоре типа 1 (т.е. запускаемых на bare metal), для создания узлов в Kubernetes-кластерах и представили систему классификации, определяющую требования к разграничению контейнеризированных приложений. Если сравнивать этот подход с другими рассмотренными решениями, он имеет преимущества в смысле обеспечения системной изоляции.\r\n\r\nВажный вывод заключается в том, что стратегия изоляции ограничивает распространение escape-атаки на контейнер. Другими словами, сам по себе выход из контейнера не предотвращается, однако его последствия смягчаются. Очевидно, что вместе с этим приходят дополнительные сложности, которые необходимо учитывать, делая подобные сравнения.\r\n\r\nЧтобы воспользоваться указанным методом в облачном окружении и обеспечить масштабируемость, к автоматизации будут предъявлены дополнительные требования. Например, к автоматизации создания виртуальных машин и их использования в Kubernetes-кластере. Самым же главным будет реализация и проверка повсеместного учёта классификации приложений.\r\n\r\nТакова часть моей диссертации, посвящённая изоляции контейнеризированного приложения.\r\n\r\nЧтобы предотвратить возможность злоумышленника, выполнившего выход из контейнера на одном узле, атаковать сервисы других узлов, необходимо рассмотреть распространяемые по сети атаки (network propagated attacks). Для учёта этих рисков в моей диссертации предлагается сегментация сети кластера и представляются облачные архитектуры, в одной из которых имеется аппаратный firewall.\r\n\r\nЖелающие могут ознакомиться с полным документом — текст диссертации в публичном доступе: «Container Orchestration in Security Demanding Environments at the Swedish Police Authority».\r\n\r\nP.S. от переводчика\r\nЧитайте также в нашем блоге:\r\n\r\n\r\n «Уязвимость CVE-2019-5736 в runc, позволяющая получить права root на хосте»;\r\n «9 лучших практик по обеспечению безопасности в Kubernetes»;\r\n «11 способов (не) стать жертвой взлома в Kubernetes»;\r\n «Понимаем RBAC в Kubernetes»;\r\n «OPA и SPIFFE — два новых проекта в CNCF для безопасности облачных приложений»;\r\n «Vulnerable Docker VM — виртуалка-головоломка по Docker и pentesting».\r\n	https://habr.com/ru/company/flant/blog/440504/	1ef080ca-09a9-474e-afa6-71cea68b971e
13	NASA покупает еще два места на «Союзах», испытывает RS-25 и не отказывается от околоземной станции	пилотируемая космонавтика SLS	На прошедшей неделе появилось несколько любопытных новостей пилотируемой космонавтики. NASA собирается покупать еще два места на «Союзах», несмотря на почти готовые Dragon 2 и Starliner. Успешно прошли испытания двигателя RS-25 для SLS после декабрьской аварии. А в опубликованном документе о том, как в будущем сводить с орбиты МКС, есть строчки о том что, оказывается, несмотря на планы создания окололунной станции Gateway, NASA не собирается отказываться от станции на околоземной орбите, причем без перерыва после затопления МКС.\r\n\r\n\r\nСоюз, пристыкованный к МКС, на заднем плане видны солнечные панели ATV, 2011 год, фото NASA\r\n\r\nЕще парочку\r\nНесмотря на то, что американские астронавты должны будут полететь на МКС на аж двух моделях американских кораблей уже в этом году, NASA продолжает покупать новые места на российских «Союзах». Дополнительные два места планируется приобрести на «Союз МС-15» и "-16", осень 2019 и весна 2020. Рекомендацию дал Консультационный совет по аэрокосмической безопасности (Aerospace Safety Advisory Panel, ASAP), и NASA к нему прислушалось. По текущим планам на «Союзе МС-15» командирское кресло отдано россиянину Олегу Скрипочке, второй ложемент должен будет занять американец Кристофер Кессиди, а третье место было зарезервировано для еще не названного космонавта из ОАЭ. Именно его должны будут пересадить на какой-то из следующих кораблей. На «Союзе МС-16» пока что занято два места, так что добавление третьего вызовет минимум проблем.\r\n\r\nВ опубликованном 13 февраля документе говорится:\r\nПриобретение мест на «Союзах» обеспечит непрерывный доступ на МКС в случае задержки с запуском коммерческих экипажей, ликвидирует серьезную угрозу безопасности МКС, которую представляет отсутствие на станции американского экипажа в какой-либо момент. Доставка на «Союзах» дает гибкость и резервные возможности без ненужного давления на поставщиков коммерческих пилотируемых пусковых услуг.\r\n\r\nПредыдущий опыт показал сложности, связанные с обеспечением первых полетов в установленные сроки в последний год разработки. Как правило, тестовые полеты обнаруживают проблемы. Отсутствие американского экипажа на МКС в любой момент уменьшит операции на МКС до недопустимого уровня, что оправдывает приобретение дополнительных мест.\r\nСимволическая гонка Dragon 2 и Starliner к МКС, изображение Nathan Koga/Nasaspaceflight.com\r\n\r\nНесмотря на то, что первый беспилотный испытательный полет Dragon 2 уже несколько месяцев находится в состоянии " ну вот-вот совсем скоро", он еще не получил всех разрешений на запуск. На этой неделе состоится рассмотрение летной годности (Flight Readiness Review), на котором может быть дан как «зеленый свет», так и перечень замечаний для устранения с повторным рассмотрением. Так что упоминаемая сейчас дата первого полета корабля SpaceX 2 марта используется исключительно с приставкой «не ранее чем» и практически наверняка будет сдвинута. Для корабля Boeing сроки еще более неопределенные. Беспилотный пуск ожидается не раньше апреля-мая, а пилотируемый — не раньше августа (вполне возможно, заметно позже). К тому же, перед пилотируемым полетом оба корабля должны пройти еще одно важное испытание — тест системы аварийного спасения в полете, который для Dragon 2 ожидается в июне, а у Starliner в мае. Положение последнего осложняют изменения, внесенные в конструкцию после обнаруженных в прошлом году проблем (капсула может начать кувыркаться, что потенциально опасно для экипажа).\r\n\r\nУстранение практически неизбежных технических проблем после испытательных полетов может подвинуть даты пусков на неопределенное время, так что продление гарантированного присутствия американских астронавтов на МКС при помощи «Союзов» до осени 2020 выглядит вполне разумно.\r\n\r\nЛегкую нотку абсурда в документ вносит обращение к «заинтересованным организациям» прислать свои предложения по доставке астронавтов на МКС — Китай по политическим причинам на МКС не пускают, так что единственной «заинтересованной организацией» остается Роскосмос, который почему-то не захотели прямо упоминать.\r\n\r\nА двигатель этот разъясним\r\n\r\nКадр с испытаний, фото NASA\r\n\r\n12 декабря 2018 очередные испытания двигателя RS-25 для сверхтяжелой ракеты-носителя SLS пришлось остановить уже на тридцатой секунде — на кадрах хорошо виден пожар в верхней части двигателя. К счастью, он оказался сравнительно небольшим и не распространялся быстро, так что во избежание повреждения двигателя и испытательного стенда двигатель успели остановить вручную.\r\n\r\n\r\nСпустя восемь дней опубликовали результаты расследования — причиной пожара стала утечка газообразного водорода из стендового преобразователя давления, расположенного рядом с двигателем. Любопытно, что, несмотря на сокращенное время испытаний, многих целей удалось достичь. То, что не успели проверить, перенесли на испытания 1037, проведенное 13 февраля 2019.\r\n\r\n\r\nТест прошел успешно. Это было восьмое испытание этапа 1b (здесь более подробно про разные этапы) из плановых девяти. В нем тестировали новый контроллер двигателя, камеру сгорания, изготовленную методом горячего изостатического прессования, и отпечатанный на 3D-принтере демпфер продольных («пого») колебаний. Также двигатель испытали на максимальной тяге 113% (во времена шаттлов тяга не поднималась выше 104,5%) и минимальной, достижимой на уровне земли без специального диффузора 80% (с диффузором можно снижать до минимальных летных 65%).\r\n\r\n\r\nНовая камера сгорания, фото Aerojet Rocketdyne\r\n\r\n\r\nДемпфер, распечатанный методом селективного лазерного спекания, фото Aerojet Rocketdyne\r\n\r\nЗа нею другая приходит\r\n\r\nМКС 4 октября 2018 года, фото NASA/Роскосмос\r\n\r\nБольшие космические проекты со сроками жизни в десятилетия предполагают, что планы составляются на годы вперед. И, несмотря на то, что сейчас нет понимания, до какого года еще проработает МКС, планы по ее сведению с орбиты уже проработаны на достаточно подробном уровне. В 2016 году прошла совместная встреча NASA и Роскосмоса, на которой уточнялись конкретные детали, и возможность свести МКС с орбиты, как ожидалось, должна была появиться с 2017 года. В случае серьезной аварии экипаж ее покидает, и в течение 14 дней принимается решение о затоплении станции. За 180 дней станция постепенно теряет высоту, а Роскосмос запускает два «Прогресса», которые перекачают топливо в топливные баки станции и должны будут помочь МКС своими двигателями. По свежим планам к ним добавится «Союз». В определенный момент доступные для маневрирования двигатели включатся, станция сойдет с орбиты и сгорит в плотных слоях атмосферы. Отдельные обломки долетят до поверхности, но не должны будут причинить никому вреда, потому что плановым районом падения будет Тихий океан, ненаселенный район, закрытый для сухододства и названный «Кладбищем космических кораблей». Там лежат обломки «Мира», «Салютов» и множества грузовых «Прогрессов».\r\n\r\n\r\nКонечно, это будет очень грустный день, но, увы, у технических систем есть конечный срок жизни. В документах, посвященных этой теме, есть и внезапные хорошие новости. Консультационный совет по аэрокосмической безопасности в опубликованном на этой неделе ежегодном отчете указал, что есть «общее согласие в том, что у США есть потребность в средствах на низкой околоземной орбите, и после прекращения работы МКС не должно быть разрыва». То есть, несмотря на то, что на сегодня нет понимания, сколько лет еще МКС проработает по плану, и что будет ее заменять, США не собираются переключаться исключительно на окололунную станцию, отказавшись от околоземной. В качестве станции после МКС совет рассматривает как основную идею коммерциализацию низкой орбиты — NASA должно будет стать одним из многих заказчиков коммерческих фирм и сможет сфокусироваться на исследованиях дальнего космоса, проводя на низкой орбите необходимые для этой цели исследования. Совет призывает NASA как можно скорее разработать план для плавного перехода к пост-МКС реалиям. «Плавный переход» означает, что вне зависимости будет ли это частная космическая станция или частные ракеты/корабли, астронавты продолжат работать на околоземной орбите.	https://habr.com/ru/post/440616/	1ef080ca-09a9-474e-afa6-71cea68b971e
14	Методы рационального мышления и Магрибский молитвенный коврик	литературное творчество фантастика	\r\n\r\n— Папа, расскажи мне сказку, — подошел ко мне крошка сын.\r\n\r\n— Может быть не прямо сейчас, сына? У меня пинкидемон какой-то резиновый попался, от него пули отскакивают, — пробормотал размахивая свитчем я, — вот дойду до точки сохранения и… \r\n\r\n— Сейчас, — наставал сын, — Надо. \r\n\r\n— Ладно, — согласился я, — только чур, потом не жалуйся, что сказка не понравилась. Уж больно она страшная. \r\n\r\n— Обещаю не жаловаться, — радостно отрапортовал сын. \r\n\r\nСвоего обещания, он, конечно, не сдержал. Потому что я рассказал историю Магрибского Молитвенного Коврика. \r\n\r\n— Это какая-то неправильная сказка, — возмущался малыш, — В ней нет ни логики, ни смысла, ни морали. \r\n\r\n— Добро пожаловать в реальный мир, сына. У нас тут такое всё. \r\n\r\n— Мамины сказки лучше, — не унимался Андрей, — В них герои всегда побеждают. \r\n\r\nА вот это был удар ниже пояса. Репутацию нужно было спасать. \r\n\r\n— Ты потер нужную лампу, сынуля. Я литератор. Я могу поправить любую историю. \r\n\r\n— Ты заново перепишешь сказку? \r\n\r\n— Охлади своё детское воображение. Я не могу переписать уже рассказанную историю — она слишком глубоко вросла в ткань бытия. Я могу только продолжить сказку. \r\n\r\nИ я продолжил. \r\n\r\nТекст оригинальной суфийской притчи я цитирую по «Принцу Госплана» — фантастической повести Виктора Пелевина. И я честно не знаю, суфийская ли это притча или её написал сам Виктор Олегович. Да это и не важно: \r\n\r\nУ одного визиря был маленький сын по имени Юсуф. Однажды он вышел за пределы отцовского поместья и пошёл гулять.\r\n\r\nИ вот он дошёл до пустынной дороги, где любил прогуливаться в одиночестве, и пошёл по ней, глядя по сторонам. И вдруг он увидел какого-то старика в одежде шейха, с чёрной шляпой на голове. Мальчик вежливо приветствовал старика, и тогда тот остановился и дал ему сладкого сахарного петушка. А когда Юсуф съел его, старик спросил:\r\n\r\n— Мальчик, ты любишь сказки?\r\n\r\nЮсуф очень любил сказки, и так и ответил.\r\n\r\n— Я знаю одну сказку, — сказал старик, — это сказка про магрибский молитвенный коврик. Я бы тебе её рассказал, но уж больно она страшна.\r\n\r\nНо мальчик Юсуф, естественно, сказал, что ничего не боится, и приготовился слушать.\r\n\r\nНо вдруг где-то в той стороне, где было поместье его отца, раздался звон колокольчиков и какие-то громкие крики — так всегда бывало, когда кто-нибудь приезжал. Мальчик мгновенно позабыл про старика в чёрной шляпе и кинулся поглядеть, кто это приехал. Оказалось, что это был всего лишь какой-то незначительный подчинённый его отца, и мальчик со всех ног побежал назад, но старика на дороге уже не было. Тогда он очень расстроился и пошёл назад в поместье.\r\n\r\nВыбрав минуту, он подошёл к отцу и спросил:\r\n\r\n— Папа! Ты знаешь что-нибудь про магрибский молитвенный коврик?\r\n\r\nИ вдруг его отец побледнел, затрясся всем телом, упал на пол и умер. Тогда мальчик очень испугался и побежал к маме.\r\n\r\n— Мама! — крикнул он, — несчастье!\r\n\r\nМама подошла к нему, улыбнулась, положила ему на голову руку и спросила:\r\n\r\n— Что такое, сынок?\r\n\r\n— Мама, — закричал мальчик, — я подошёл к папе и спросил его про одну вещь, а он вдруг упал и умер!\r\n\r\n— Про какую вещь? — нахмурясь спросила мама.\r\n\r\n— Про магрибский молитвенный коврик!\r\n\r\nИ вдруг мама тоже страшно побледнела, затряслась всем телом, упала на пол и умерла.\r\nМальчик остался совсем один, и скоро могущественные враги его отца захватили поместье, а самого его выгнали на все четыре стороны. Он долго странствовал по всей Персии и, наконец, попал в ханаку к одному очень известному суфию и стал его учеником. \r\n\r\nПрошло несколько лет, и Юсуф подошёл к этому суфию, когда тот был один, поклонился и сказал:\r\n\r\n— Учитель, я учусь у вас уже несколько лет. Могу я задать вам один вопрос?\r\n\r\n— Спрашивай, сын мой, — улыбнувшись, сказал суфий.\r\n\r\n— Учитель, вы знаете что-нибудь о магрибском молитвенном коврике?\r\n\r\nСуфий побледнел, схватился за сердце и упал мёртвый. Тогда Юсуф кинулся прочь.\r\n\r\nС тех пор он стал странствующим дервишем, и ходил по Персии в поисках известных учителей. И все, кого бы он ни спрашивал про магрибский коврик, падали на землю и умирали. Постепенно Юсуф состарился, и стал немощным. Ему стали приходить в голову мысли, что он скоро умрёт и не оставит после себя на земле никакого следа.\r\n\r\nИ вот однажды, когда он сидел в чайхане и думал обо всём этом, он вдруг увидел того самого старика в чёрной шляпе. Старик был такой же, как и раньше — годы ничуть его не состарили. Юсуф подбежал к нему, встал на колени и взмолился:\r\n\r\n— Почтенный шейх! Я ищу вас всю жизнь! Расскажите мне о магрибском молитвенном коврике!\r\n\r\nСтарик в чёрной шляпе сказал:\r\n\r\n— Ну ладно, будь по-твоему.\r\n\r\nЮсуф приготовился слушать. Тогда старик уселся напротив него, вздохнул и умер. Юсуф целый день и целую ночь в молчании просидел возле его трупа. Потом встал, снял с него чёрную шляпу и надел себе на голову. У него оставалось несколько мелких монет, и перед уходом он купил на них у владельца чайханы сахарного петушка. Пойдя вдоль улицы, он всматривался в лица встреченных детей, выбирая, кого он наградит проклятием. Вскоре он увидел гуляющего по пустоши сорванца, похожего на него самого, пятьдесят лет назад.\r\n\r\nЮсуф подошел к ребенку и сказал:\r\n\r\n— Дитя, хочешь сахарного петушка?\r\n\r\n— Сщаз, — ответил ребенок, — А потом ты отведешь меня в кусты и попытаешься изнасиловать, старый ты извращенец. Папенька намедни предупреждал меня о подобных людях. Петушка впрочем, давай — но без всяких предварительных условий, — подумав, добавило дитя, — и вот еще, — оближи-ка конфетку, старче. Хочу убедиться, что петушок не отравлен.\r\n\r\nЮсуф с удивлением вытаращился на ребенка. Потом вздохнул – все верно, молодежь портится год от года. Сердце его ликовало – по правде сказать, сначала ему было стыдно ломать жизнь ребенку, только потому, что какой-то старик когда-то передал ему проклятье. \r\n\r\nНо, пары минут общении ему хватило, чтоб понять, что это отродье огненной гиены, определенно достойно проклятия. И с этим согласится даже небо. Даже Аллах.\r\n\r\nОн дрожащими руками потянул петушка ко рту, но был остановлен возгласом:\r\n\r\n— Стоп, стоп, хватит. Теперь я верю, что петушок не отравлен, — дитя требовательно протянуло грязную ручку.\r\n\r\n— А теперь я расскажу тебе сказку о магрибском молитвенном коврике.\r\n\r\n— А фето офязательно? — спросил ребенок, увлеченно рассасывающий сладость.\r\n\r\n— ДА! — Взревел Юсуф, и с ужасом понял, что он не знает собственно, что рассказывать. Все что было ему известно, он уже рассказал. \r\n\r\nНо тут, к его облегчению, раздался звон колокольчиков и какие-то громкие крики. Ребёнок отвернулся, и Юсуф сбежал от него, проклиная старческие колени.\r\n\r\nА Исса, так звали ребенка, мгновенно позабыв про старика, кинулась смотреть, кто это приехал. Её осторожность и прагматичность объяснялись тем, что она была девочкой, которую папочка, отпуская гулять, одевал под мальчика из соображений безопасности. \r\n\r\nУзнав, что это был всего лишь какой-то незначительный подчинённый её отца, Исса осталась в доме, справедливо рассудив, что на сегодня приключений достаточно. Мысли вернуться на дорогу и послушать сказку о магрибском молитвенном коврике от встреченного ей озабоченного старика у Иссы не возникло – название сказки показалось ей совершенно не интересным. Вот если бы сказка называлась «Али Баба и сорок девственниц» — она бы точно послушала. А магрибский коврик? Фи.\r\n\r\nВечером Исса подошла к отцу и рассказала ему о том, что видела днем. Такова была их традиция. Рассказывая про странного незнакомца, Исса упомянула, что старик всё пытался рассказать сказку о магрибском молитвенном коврике.\r\n\r\nНа этих словах её отец побледнел, затрясся всем телом, упал на пол и умер. Исса очень испугалась и побежала к начальнику охраны, чтоб он послал людей за доктором. К маме Исса не побежала. \r\n\r\nМама умерла когда Исса была маленькая. \r\n\r\nДом сразу наполнился людьми – на Востоке нельзя стать сильным и уважаемым, без поддержки клана, так что смерть отца, хоть и ослабила клан, но не сделало Иссу беспризорной сиротой. Никому, она, понятное дело, про коврик не говорила – у отца сердечный приступ, тут не до сказок.\r\n\r\nКоврик всплыл в разговоре спустя неделю, уже после похорон отца, когда присланный султаном следователь разбирался с безвременной кончиной её отца – он был совершенно здоров и его внезапная смерть вызвала перетолки при дворе.\r\n\r\nИсса рассказала о том, что предшествовало смерти её отца. О встречи со стариком, о сахарном петушке (на этих словах следователь заметно оживился) и о магрибском молитвенном коврике. Тут следователь упал на пол и умер.\r\n\r\nА Исса сделала выводы.\r\n\r\nТак что когда могущественные враги её отца пытались захватить их поместье, Исса пригласила главы их родов на переговоры в отдаленный караван сарай, откуда живым не выбрался никто. \r\n\r\nИсса встретила делегацию, держа в руках для верности корабельный рупор.\r\n\r\n— Наш дом готов сдаться. Без условий и оговорок. Почему, спросите вы? Слушайте внимательно: — и тут она рассказала всем сказку магрибском молитвенном коврике.\r\n\r\nЭтот трюк пришлось повторить еще два раза, после чего могущественные враги её дома кончились. К ней пытались подослать убийц, но и им она сумела рассказать сказку, после чего её опекун утроила охрану девушки. Благо, деньги у них были – её дом и союзные дома, пользуясь инсайдерской информацией, прибрали к рукам дворцы и земли уничтоженных Иссой домов. \r\n\r\nИсса же тем временем росла – на востоке взрослеют быстро. Растущее влияние её дома заинтересовало султана. В один прекрасный день, все охранники набросились на девушку и связали её. Исса возмущено кричала, но ничего не могла изменить – люди султана пригрозили что вырежут семьи охранников до седьмого колена, если они не доставят девушку во дворец.\r\n\r\nИсса было решила действовать по отработанной схеме, но быстро передумала. Чему весьма способствовал предусмотрительно засунутый ей в рот кляп. Доставленная во дворец, Исса было запаниковала, когда старый мордастый палач сорвал с неё одежду, и привязав к столу, начал показывать ей клещи для ногтей, раскаленные шипы и шипастую вагинальную грушу. \r\n\r\nНо успокоилась, как только палач, в ответ на её мычание, вытащил из её рта кляп.\r\n\r\nТеперь палач был в её власти. Действовать, однако, нужно было осторожно – в случае ошибки её просто могли утыкать стрелами издалека.\r\n\r\nПоэтому Исса и сказала палачу что готова рассказать свою тайну султану. И только султану. Палач её послушался – девушка рассказала ему, что её тайна столь ужасна, что если палач, пользуясь своим иструментом выпытает её, то султану придется его убить. И сыновей и его семью, и его род. Только так можно сохранить тайну. Поэтому тайну она должна рассказать султану лично. С глазу на глаз. И быть при этом в добром здравии – ведь она, по сути, единственный гарант и свидетель, что она не рассказала тайну палачу.\r\n\r\nСултан предпринял меры безопасности. Какие смог придумать. Иссу обыскали, обмотали веревками и посадили в кувшин, так что только голова торчала наружу – так султан мог не опасаться, что Исса набросится на него и задушит во время аудиенции.\r\n\r\nДоставленная в его покои и поставленная посреди комнаты, Исса не смогла сдержать нервный смех – настолько глупо это выглядело. Убедившись, что они находятся одни, девушка быстро убила ковриком султана и начала звать стражу.\r\n\r\nТут было, конечно, довольно тонкое место в её плане. Стража, могла без разговоров казнить беспомощную Иссу, но предпочла предоставить право решать её судьбу сыну султана: принцу Джафару.\r\n\r\nС которым, у Иссы все прошло гладко – принц был счастлив от долгожданной смерти папочки, поэтому быстро принял решение жениться на Иссе, благо она ему понравилась. Он ей так прямо и сказал – когда разбил кувшин и размотал веревки. (Думал он при этом о том, что такую могущественную колдунью полезно иметь в союзниках, но не суть.)\r\n\r\nИ зажили они часто и счастливо. Конечно, их союз не был типичным для востока, не не так чтоб из ряда вон – сильные женщины правительницы бывали и в этих землях. Джавар перетр*хивал гарем, Исса рожала детей. Пару раз их царство напрягали соседи, но Исса, съездив в зону войсковых действий со своим верным рупором быстро зарамсила проблему. Так прошло десять лет.\r\n\r\nИ так бы и закончилась эта история, если бы как-то раз к дворцу не проперся оборванный дервиш и начал пинать двери, требуя, чтоб его провели к кадын-эфенди. Стражи было собрались отсыпать наглецу целебных поджопников, но Исса, узнав об этом, велела привести старика к ней.\r\n\r\nКонечно, это был наш старый знакомый Юсуф. Увидев Иссу, он с проклятиями упал на колени. Исса подбежала к нему, со стаканам воды — она совершенно не держала зла на старика.\r\n\r\n— Хорошо устроилась, сучка — рычал Юсуф, оглядывая богато обставленные покои, — смотрю я, проклятье мое тебе на пользу обернулось.\r\n\r\n— Что есть, то есть, батюшка, — согласилась Исса. — Достигла чего хотела с твоей и Аллаха помощью.\r\n\r\n— Гадина. Гадюка. Ослица, эта… Волоколамская, — продолжал яриться Юсуф. — Смотреть на тебя не могу. Как услышу о очередном твоем успехе, так сдохнуть готов от обиды — на твоем месте мог бы быть я, если бы догадался, что проклятьем можно как оружием пользоваться.\r\n\r\n— А чего тянул тогда? — Спросила рассерженная Исса. Её давно никто не называл гадиной в глаза. — Завязал бы давно с этим.\r\n\r\n— Не могу. Проклятье не отпускает. Я всяко пробовал – и вены вскрывал и с моста прыгал и на базаре беляши покупал. Один раз повесился в лесу, связав руки, так полгода висел, пока веревка не истлела. Я даже стареть перестал.\r\n\r\n— А вот с этого момента поподробней, — вкрадчиво сказала Исса. \r\n\r\nСцена после титров:Вот мы и подошли к финалу нашей истории. \r\n\r\nИсса, узнав у Юсуфа все что требовалась, прекратила его страдания рассказав про коврик. Спустя несколько лет, когда её старший сын достиг пятнадцатилетия, она передала проклятие ему, перестав стареть. Потом, она передала проклятие его сыну, когда её первенец погиб во время охоты на леопарда. И его сыну, и его, и его…\r\n\r\nПотом Иссе пришлось удалиться от публичных дел, так как управлять миром проще, если никто не знает о твоем истинном возрасте. Да, Иссу нельзя убить – но можно сбросить в Марианскую впадину в свинцовом шаре. Сейчас, разменяв двенадцатый век, Исса огладывается на дела своих рук с гордостью – её народ, Саудиты, по уровню жизни занимает первое место среди остальных держав.\r\n\r\nОчень скоро путь Иссы к получению всей власти над миром завершится — фонды, организованные Иссой во всех ведущих странах мира поддерживают феминизм, толерантность, атеизм — и уже сейчас в Европе, главном конкуренте Иссы – рождаемость упала ниже уровня воспроизводства и европейцев вовсю замещают переселенцы из стран Магриба. \r\n\r\nЕдинственно, что её беспокоит – так это возросшая роль самоуправления народа. Интернет – вещь, которую Исса не может полностью контролировать, становится рупором здравого смысла, мешая манипулировать народами и реализовывать её замыслы. Люди, в своих блогах и сетевом общении смеют открыто высмеивать новый миропорядок, который она установила, подкупив и запугав элиты.\r\n\r\nПоэтому Исса записала эту историю, заменив настоящие слова силы на бессмысленно словосочетание «магрибский молитвенный коврик» — чтоб в мире было знание, о том, какой ужасающей силой владеет её семья. И что в случае бунта, в случае саботажа и неповиновения — она с этим миром сделает – просто произнеся слова силы из всех уличных громкоговорителей, телевизоров, сотовых телефонов, а также спроецировав это слово на всех мировых языках расположенными на орбите лазерами на луну, чтоб и глухие не сильно радовались.\r\n\r\nИбо нефиг.\r\n	https://habr.com/ru/post/440672/	1ef080ca-09a9-474e-afa6-71cea68b971e
15	Хоббийный CNC-роутер своими руками. Гуманитарий для гуманитариев. Часть 2	CNC-роутер ЧПУ-фрезер	Как я уже писал в предыдущей главе, изначально мой будущий суперстанок предполагался из фанеры. И я даже уже прикидывал, где буду вклеивать дополнительные раскосы и ребра жесткости, но потом как-то представил, как китайским лобздиком пиляю фанеру 4/4, заплакал и отправился за железом.\r\nБюджет на тот момент позволял профильную трубу 50х50х2,5, уголок 50х50х3, полосу 40х4. Не густо, но, насмотревшись на то, как люди лепят свои произведения из ДСП и мебельных направляющих, на порталы длиной в полтора метра, состоящие из двух несвязанных алюминиевых профилей толщиной в 40 мм, при том, что это еще и как-то умудряется кто-то пилить, я понадеялся, что и моя таратайка как-нибудь, да справится. Сейчас могу сказать, что надо было брать толстостенную трубу 50х50х6, что позволило бы избежать дополнительных извращенных отношений с закладными полосами, но на тот момент я был в плену #дешевлелучшедаром, и что сделано, то сделано.\r\nПроект на тот момент выглядел так:\r\n\r\n\r\nИзначально предполагалось, что портал будет состоять из двух несвязанных балок, укрепленных уголком. \r\n\r\nУголок увеличивал жесткость балок и позволял вывести переднюю грань более-менее в одну плоскость. Тут следует помнить, что составная конструкция при одинаковых размерах всегда уступает в жесткости монолитной, но и такое ребро жесткости уже лучше, чем ничего. К тому же данный уголок утяжеляет портал на пять с небольшим килограмм, а чем конструкция тяжелее, тем меньше она реагирует на высокочастотные колебания. Что тоже идет на пользу точности обработки. Уголок к трубе прикручивал на болты М8, расстояние между отверстиями — 90 мм.\r\nПозже я решил, что несвязанные меж собой балки все равно будет болтать, и связал их листом железа толщиной 4 мм. Как следует из заголовка, сопромат я не изучал, но здравый смысл подсказывает, что такая конструкция позволяет частично перераспределить изгибающее усилие на верхнюю балку и позволяет избежать провиса портала. Я не владею понятийным аппаратом, и мне трудно объяснить словами, поэтому свои размышления я иллюстрирую рисунком. \r\n\r\nОтдельно необходимо упомянуть, что балки портала не сваривались между собой. Сварка является термическим воздействием, в металле возникают внутренние напряжения, в результате конструкцию ведет. Когда я посчитал, что боковины портала, которые перед этим тоже были связаны на болты, можно и проварить, и сварщик убедил меня, что он ну вот точно умеет варить так, чтоб не вело, после установки на станину полутораметровые направляющие Х разбежались на пять с лишним сантиметров. Вылечилось регулировочными шайбами.\r\nРазмещение уголков для крепления балок к боковинам указано на следующем рисунке:\r\n\r\n1 — Уголки крепления балок портала к боковинам. Уголок 50х50х3 мм. 2 — ШВП оси Х.\r\n3 — Каретки подшипников оси Х. 4 — Направляющие оси Х.\r\nДля крепления использованы болты М8. В короткие уголки по одному на грань, задние уголки прикручены к стойкам портала по два болта на сторону. Передний четырехмиллиметровый лист прикручен к балкам на болты М6 через 90 мм, к стойкам портала по шесть болтов в шахматном порядке.\r\nПеред тем как устанавливать направляющие, я проверил кривизну лицевой стороны портала. Для чего взял в рыбацком леску-плетенку толщиной 0,1 мм, и, прижав ее по краям портала через одинаковые прокладки, проверил просвет слесарной линейкой. Или врут мои глаза, или леска нынче дугой натягивается, но с кривизной портала я вписался в десятку. Чему я был удивлен и обрадован. Подозреваю, что свою роль сыграл уголок. И хотя я в заднюю стенку вкручивал регулировочные болты, чтобы выдавливать переднюю стенку, ни один не пригодился. В прошлый раз в комментариях спрашивали, можно ли увеличить точность данной конструкции, думаю, что уже нельзя. Для того чтобы вывести поверхность «в ноль», ее уже необходимо фрезеровать. А фрезеровать тонкое железо нет никакого смысла, поэтому, для увеличения точности придется строить новый портал. И, если разговор о хоббийном оборудовании, использовать либо толстостенную трубу, либо, некоторые продвинутые самодельщики используют плиту из цветмета.\r\nНа этапе разработки проекта для того, чтобы представить, что мне ждать от придуманной конструкции, я запустил прочностной анализ в APM FEM. \r\n\r\nПри нагрузке в 200 Ньютонов на лицевую сторону портала (просто не имел представления, какая будет нагрузка, и решил, что явно не больше двадцати килограммов) получил прогиб балок около 0,6 мм. По факту, когда перед установкой направляющих положил портал на спину на две подставки и встал посредине одной ногой (на тот момент 110 кг), получил прогиб 0,9 мм. Поставил десятилитровое ведро с водой — 0,04 мм.\r\nЗакончив с балкой, приступаем к боковинам. Изготавливаем из тех же материалов. Устройство понятно из рисунка, стоит только подчеркнуть, что задняя нога боковины длиннее передней на 50 мм. Что позволяет установить гайки ШВП на одном уровне с каретками оси Х. Держатель кареток привернут к боковинам на четыре болта М8. Все отверстия в держателе расточены, чтобы обеспечить возможность регулировки. Также к держателю каретки приварены два ребра жесткости, дабы уменьшить боковые колебания.\r\n\r\nРасстояние между внешними гранями кареток изначально умозрительно выбрано 200 мм, но после сборки портала и оценки его жесткости сокращено до ста пятидесяти миллиметров.\r\n\r\nОсь Z изначально планировалась из фанеры, поскольку финансовые лимиты были выбраны давно и многократно, но строительная фанера, которая у нас доступна, плавает по толщине почти на миллиметр. Так что решил покупать дюраль. Выбрал плиту Д16 толщиной 16 мм. Руководствуясь соображениями, что даже мягкий металл все равно будет жестче фанеры той же толщины. Так оно, собственно, и получилось. При обработке следует учитывать, что металл хотя и мягкий, но очень вязкий. Очень сильно налипает на инструмент, буквально захватывая его. Когда я в первый раз сверлил его сверлом-елочкой без смазки, я чуть не спалил восьмисотваттную дрель. Раскраивал на циркулярке мелкозубым диском с победитовыми напайками, обильно поливая его маслом. После доводил болгаркой с лепестковым кругом. Хотя у нас в районе два машзавода и два цеха по металлообработке, разместить заказ так и не удалось. Ни официально, ни левым образом.\r\n\r\nКонструкция оси Z классическая, единственное отличие — каретки подшипников установлены на тележку оси Y, а рельсы, соответственно, на тележку оси Z. Приходилось слышать разные доводы в пользу такого решения, но единственным внятным выглядит то, что направляющие в данном случае играют роль дополнительных ребер жесткости. Следует добавить, что такое решение утяжеляет ось Z почти на три килограмма. Что требует дополнительной мощности двигателя. У меня стоит NEMA-23 длиной 112 мм, и все равно скорость перемещения по Z – 20 мм/с. Для раскроя не критично, но если будет установлен нормальный шпиндель и будут обрабатываться рельефы, придется изобретать противовес.\r\nПоскольку в качестве шпинделя используется ручной фрезер, под него была установлена полка. Посадочный диаметр данного фрезера 43 мм. Когда я заказывал (в семидесяти километрах от дома) сверление полки под шпиндель, я заказал диаметр 44 мм. Это много. Добавить две-три десятые было бы более чем достаточно. Для укрепления полки, а также для ее регулировки по бокам были дополнительно установлены два ребра жесткости толщиной 4 мм.\r\nВыбирая диаметр болтов для мягких металлов, следует помнить, что один болт с большим диаметром и шагом резьбы здесь предпочтительнее, чем несколько мелких. Поэтому ось Z, исключая крепление кареток и направляющих, собрана на винты М10. И лучше их лишний раз не крутить, в идеале собрав конструкцию сразу начисто.\r\nД16 брал в Ижевске. Плита 16х1200х150 мм весом в 9 килограмм вместе с резкой обошлась в 3050 руб. Вообще, реклама, наверно, нарушает правила сайта, но в данном случае это просто единственный адекватный продавец, которого я нашел. Торгуют от килограмма. Цены на одинаковые позиции у них оказались самыми низкими. Единственное, что мне тогда не понравилось, работают только с транспортными компаниями. А поскольку я живу не в областном центре, и до пункта выдачи мне больше сотни километров, попытался найти поставщика поближе. В нашем (Пермском) крае продавец тот же металл предлагал только кусками от половины метра погонного, запросив за такой кусок 25 000 рублей. После этого выбор был очевиден. Плиту мне тогда отрезали болгаркой. Сейчас при заказе надо уточнить, вроде у них появилось оборудование и можно заказать раскрой по размерам.\r\nЗаканчивая тему портала, надо упомянуть, что некоторые хоббийщики размещают направляющие на верхней и нижней гранях балки портала. Аргументируя это тем, что при нагрузке на фрезу сокращается расстояние между приложенным усилием и порталом. Попросту говоря, уменьшается рычаг. Однако при этом усложняется передача, двигающая ось, и установка параллельности направляющих. К сожалению, сейчас не могу уже найти использованный при проектировании источник, в котором было указано, что для защиты от перекоса, во-первых, движитель должен быть расположен в одной плоскости с каретками на одинаковом от них расстоянии, во-вторых, расстояние между внешними гранями кареток должно быть не меньше расстояния между направляющими. Приходилось читать, когда опытным путем выясняли, что по оси Х при ширине стола до шестидесяти сантиметров можно использовать один движитель, но вот у меня расстояние между направляющими по Х около метра, расстояние между внешними гранями кареток 150 мм, при этом перекос до заклинивания почти три сантиметра. Возможно, на направляющих HGR все по-другому, но для цилиндрических на опоре по оси Х все же необходимо по движителю с каждой стороны. Чтобы не выяснять потом, почему станок вместо кругов режет овалы.\r\n\r\nКогда дошло до станины, с одной стороны — деньги уже нужны были на другие цели, а с другой — я уже начал конкретно уставать от непрерывного сверления, обтачивания и подгонки. Поэтому выбрал компромиссно-временный вариант: устроил на полу песчаную подушку, выложил из пеноблока тумбу, на нее на домкратах установил четырехслойный бутерброд из фанеры 4/4 18 мм, укрепленный по бокам уголком 75х75х6 мм. Сверху положил еще два листа такой же фанеры. Площадки под направляющие устанавливал так, чтобы болтами их притянуть к уголкам под столом. В площадках предусмотрел закладные полосы, к которым были прикручены направляющие. \r\nНаправляющую установил сначала одну, выставив ее по нитке. После чего на нее был установлен портал, и вторая направляющая ставилась уже по месту. То есть, устанавливаешь портал в начале оси, первая направляющая закреплена жестко, вторая — одним краем. Гоним портал в конец оси, убеждаемся, что идет легко, закрепляем второй край. Прокатываем по всей оси, закрепляя направляющую окончательно. Так, кстати, устанавливаются направляющие на всех осях.\r\nПосле установки направляющих прямо поверх них натянул через весь стол нитки крест-накрест. С помощью уровня домкратами сначала выставил стол горизонтально, потом, добившись, чтобы нитки на пересечении слегка касались, выправил небольшое винтовое искривление. Щель между столом и тумбой слегка пропенил, чтобы их связать, но так, чтобы стол не подняло.\r\nСобственно, с механикой на этом все. На видео, правда, видно, что не доделаны еще кабель-каналы (при том, что они уже давно напилены и даже частично склеены), и не стоят концевики, но мне надо немного от этого отдохнуть. Это было очень интересно, но очень нудно.\r\nДобавлю пару слов об ошибках проекта. Во-первых, поддавшись инерции мышления, я зачем-то спроектировал кабель-канал со стороны оператора, и теперь после его установки придется гонять портал туда-сюда, чтобы установить заготовку, и во-вторых, гайку ШВП оси Y я зачем-то разместил посредине оси Z. Теперь не могу добраться до тавотницы, и когда из гайки выскочил пыльник, пришлось разбирать весь портал.\r\nВ заключение, вот вам фото первого выполненного на данном станке проекта, на котором я еще раз убедился, что из дешевой фанеры ничего хорошего не получишь.\r\n\r\nВидео работы моего станка:\r\n\r\n\r\nВидео самодельного станка здорового человека:\r\n\r\n	https://habr.com/ru/post/440678/	1ef080ca-09a9-474e-afa6-71cea68b971e
16	Размыкаем замыкания и внедряем Dependency Injection в JavaScript	javascript node.js dependency injection di functional programming jest coverage bind pool	\r\nВ этой статье мы рассмотрим, как писать чистый, легко тестируемый код в функциональном стиле, используя паттерн программирования Dependency Injection. Бонусом идет 100% юнит-тест coverage.\r\nТерминология, которая будет использоваться в статье\r\nАвтор статьи будет иметь в виду именно такое трактование нижеупомянутых терминов, понимая, что это не есть истина в последней инстанции, и что возможны другие толкования. \r\n\r\nDependency Injection\r\nЭто паттерн программирования, который предполагает, что внешние зависимости для функций и фабрик объектов приходят извне в виде аргументов этих функций. Внедрение зависимостей — это альтернатива использованию зависимостей из глобального контекста. \r\nЧистая функция\r\nЭто функция, результат работы которой зависит только от ее аргументов. Также функция не должна иметь побочных эффектов.\r\nСразу хочу сделать оговорку, что рассматриваемые нами функции побочных эффектов не имеют, но их все-таки могут иметь функции, которые нам пришли через Dependency Injection. Так что чистота функций у нас с большой оговоркой.\r\nЮнит-тест\r\nТест на функцию, который проверяет, что все вилки внутри этой функции работают именно так, как задумал автор кода. При этом вместо вызова любых других функций используется вызов моков. \r\n\r\nРазбираемся на практике\r\nРассмотрим пример. Фабрика счетчиков, которые отсчитываю tick-и. Счетчик можно остановить с помощью метода cancel.\r\nconst createCounter = ({ ticks, onTick }) => {\n  const state = {\n    currentTick: 1,\n    timer: null,\n    canceled: false\n  }\n\n  const cancel = () => {\n    if (state.canceled) {\n      throw new Error('"Counter" already canceled')\n    }\n    clearInterval(state.timer)\n  }\n\n  const onInterval = () => {\n    onTick(state.currentTick++)\n    if (state.currentTick > ticks) {\n      cancel()\n    }\n  }\n\n  state.timer = setInterval(onInterval, 200)\n\n  const instance = {\n    cancel\n  }\n\n  return instance\n}\n\nexport default createCounter\r\nМы видим человекочитаемый, понятный код. Но есть одна загвоздка — на него нельзя написать нормальные юнит-тесты. Давайте разберемся, что мешает?\r\n1) нельзя дотянуться до функций внутри замыкания cancel, onInterval и протестировать их отдельно.\r\n2) функцию onInterval невозможно протестировать отдельно от функции cancel, т.к. первая имеет прямую ссылку на вторую. \r\n3) используются внешние зависимости setInterval, clearInterval.\r\n4) функцию createCounter невозможно протестировать отдельно от остальных функций, опять же из-за прямых ссылок.\r\nДавайте решим проблемы 1) 2) — вынесем функции cancel, onInterval из замыкания и разорвем прямые ссылки между ними через объект pool.\r\nexport const cancel = pool => {\n  if (pool.state.canceled) {\n    throw new Error('"Counter" already canceled')\n  }\n  clearInterval(pool.state.timer)\n}\n\nexport const onInterval = pool => {\n  pool.config.onTick(pool.state.currentTick++)\n  if (pool.state.currentTick > pool.config.ticks) {\n    pool.cancel()\n  }\n}\n\nconst createCounter = config => {\n  const pool = {\n    config,\n    state: {\n      currentTick: 1,\n      timer: null,\n      canceled: false\n    }\n  }\n\n  pool.cancel = cancel.bind(null, pool)\n  pool.onInterval = onInterval.bind(null, pool)\n\n  pool.state.timer = setInterval(pool.onInterval, 200)\n\n  const instance = {\n    cancel: pool.cancel\n  }\n\n  return instance\n}\n\nexport default createCounter\r\nРешим проблему 3). Используем паттерн Dependency Injection на setInterval, clearInterval и также перенесем их в объект pool.\r\nexport const cancel = pool => {\n  const { clearInterval } = pool\n\n  if (pool.state.canceled) {\n    throw new Error('"Counter" already canceled')\n  }\n  clearInterval(pool.state.timer)\n}\n\nexport const onInterval = pool => {\n  pool.config.onTick(pool.state.currentTick++)\n  if (pool.state.currentTick > pool.config.ticks) {\n    pool.cancel()\n  }\n}\n\nconst createCounter = (dependencies, config) => {\n  const pool = {\n    ...dependencies,\n    config,\n    state: {\n      currentTick: 1,\n      timer: null,\n      canceled: false\n    }\n  }\n  pool.cancel = cancel.bind(null, pool)\n  pool.onInterval = onInterval.bind(null, pool)\n\n  const { setInterval } = pool\n\n  pool.state.timer = setInterval(pool.onInterval, 200)\n\n  const instance = {\n    cancel: pool.cancel\n  }\n\n  return instance\n}\n\nexport default createCounter.bind(null, {\n  setInterval,\n  clearInterval\n})\r\nТеперь почти все хорошо, но еще осталась проблема 4). На последнем шаге мы применим Dependency Injection на каждую из наших функций и разорвем оставшиеся связи между ними через объект pool. Заодно разделим один большой файл на множество файлов, чтобы потом легче было писать юнит-тесты.\r\n// index.js\n\nimport { createCounter } from './create-counter'\nimport { cancel } from './cancel'\nimport { onInterval } from './on-interval'\n\nexport default createCounter.bind(null, {\n  cancel,\n  onInterval,\n  setInterval,\n  clearInterval\n})\r\n// create-counter.js\n\nexport const createCounter = (dependencies, config) => {\n  const pool = {\n    ...dependencies,\n    config,\n    state: {\n      currentTick: 1,\n      timer: null,\n      canceled: false\n    }\n  }\n\n  pool.cancel = dependencies.cancel.bind(null, pool)\n  pool.onInterval = dependencies.onInterval.bind(null, pool)\n\n  const { setInterval } = pool\n\n  pool.state.timer = setInterval(pool.onInterval, 200)\n\n  const instance = {\n    cancel: pool.cancel\n  }\n\n  return instance\n}\r\n// on-interval.js\n\nexport const onInterval = pool => {\n  pool.config.onTick(pool.state.currentTick++)\n  if (pool.state.currentTick > pool.config.ticks) {\n    pool.cancel()\n  }\n}\r\n// cancel.js\n\nexport const cancel = pool => {\n  const { clearInterval } = pool\n\n  if (pool.state.canceled) {\n    throw new Error('"Counter" already canceled')\n  }\n  clearInterval(pool.state.timer)\n}\r\nЗаключение\r\nЧто же мы имеем в итоге? Пачку файлов, каждый из которых содержит по одной чистой функции. Простота и понятность кода немного ухудшилась, но это с лихвой компенсируется картиной 100% coverage в юнит-тестах.\r\n\r\nТакже хочу заметить, что для написания юнит-тестов нам не понадобиться производить никаких манипуляций с require и мокать файловую систему Node.js.\r\nЮнит-тесты// cancel.test.js\n\nimport { cancel } from '../src/cancel'\n\ndescribe('method "cancel"', () => {\n  test('should stop the counter', () => {\n    const state = {\n      canceled: false,\n      timer: 42\n    }\n    const clearInterval = jest.fn()\n    const pool = {\n      state,\n      clearInterval\n    }\n\n    cancel(pool)\n\n    expect(clearInterval).toHaveBeenCalledWith(pool.state.timer)\n  })\n\n  test('should throw error: "Counter" already canceled', () => {\n    const state = {\n      canceled: true,\n      timer: 42\n    }\n    const clearInterval = jest.fn()\n    const pool = {\n      state,\n      clearInterval\n    }\n\n    expect(() => cancel(pool)).toThrow('"Counter" already canceled')\n\n    expect(clearInterval).not.toHaveBeenCalled()\n  })\n})\r\n// create-counter.test.js\n\nimport { createCounter } from '../src/create-counter'\n\ndescribe('method "createCounter"', () => {\n  test('should create a counter', () => {\n    const boundCancel = jest.fn()\n    const boundOnInterval = jest.fn()\n    const timer = 42\n    const cancel = { bind: jest.fn().mockReturnValue(boundCancel) }\n    const onInterval = { bind: jest.fn().mockReturnValue(boundOnInterval) }\n    const setInterval = jest.fn().mockReturnValue(timer)\n\n    const dependencies = {\n      cancel,\n      onInterval,\n      setInterval\n    }\n    const config = { ticks: 42 }\n\n    const counter = createCounter(dependencies, config)\n\n    expect(cancel.bind).toHaveBeenCalled()\n    expect(onInterval.bind).toHaveBeenCalled()\n    expect(setInterval).toHaveBeenCalledWith(boundOnInterval, 200)\n    expect(counter).toHaveProperty('cancel')\n  })\n})\r\n// on-interval.test.js\n\nimport { onInterval } from '../src/on-interval'\n\ndescribe('method "onInterval"', () => {\n  test('should call "onTick"', () => {\n    const onTick = jest.fn()\n    const cancel = jest.fn()\n    const state = {\n      currentTick: 1\n    }\n    const config = {\n      ticks: 5,\n      onTick\n    }\n    const pool = {\n      onTick,\n      cancel,\n      state,\n      config\n    }\n\n    onInterval(pool)\n\n    expect(onTick).toHaveBeenCalledWith(1)\n    expect(pool.state.currentTick).toEqual(2)\n    expect(cancel).not.toHaveBeenCalled()\n  })\n\n  test('should call "onTick" and "cancel"', () => {\n    const onTick = jest.fn()\n    const cancel = jest.fn()\n    const state = {\n      currentTick: 5\n    }\n    const config = {\n      ticks: 5,\n      onTick\n    }\n    const pool = {\n      onTick,\n      cancel,\n      state,\n      config\n    }\n\n    onInterval(pool)\n\n    expect(onTick).toHaveBeenCalledWith(5)\n    expect(pool.state.currentTick).toEqual(6)\n    expect(cancel).toHaveBeenCalledWith()\n  })\n})\r\nЛишь разомкнув все функции до конца, мы обретаем свободу.	https://habr.com/ru/company/devexpress/blog/440552/	1ef080ca-09a9-474e-afa6-71cea68b971e
17	Классификация рукописных рисунков. Доклад в Яндексе	рукописный классификация изображений google классификатор нейронные сети компьютерное зрение распознавание образов конкурсы разработчиков	Несколько месяцев назад наши коллеги из Google провели на Kaggle конкурс по созданию классификатора изображений, полученных в нашумевшей игре «Quick, Draw!». Команда, в которой участвовал разработчик Яндекса Роман Власов, заняла в конкурсе четвертое место. На январской тренировке по машинному обучению Роман поделился идеями своей команды, финальной реализацией классификатора и интересными практиками соперников.\r\n\r\n\r\n— Всем привет! Меня зовут Рома Власов, сегодня я вам расскажу про Quick, Draw! Doodle Recognition Challenge.\r\n\r\n\r\n\r\nВ нашей команде было пять человек. Я присоединился к ней прям перед мерж-дедлайном. Нам не повезло, нас немного шикапило, но нас шикапило из мани, а их из голда. И мы заняли почетное четвертое место. \r\n\r\n\r\n\r\nТакже соревнование было знаменательно тем, что Евгений Бабахнин получил за него грандмастера, Иван Сосин — мастера, Роман Соловьев так и остался грандмастером, Алекс Паринов получил мастера, я стал экспертом, а сейчас я уже мастер.\r\n\r\n\r\n\r\nЧто это за Quick, Draw? Это сервис от Google. Google преследовал цель популяризировать ИИ и этим сервисом хотел показать, как нейронные сети работают. Вы туда заходите, нажимаете Let’s draw, и вам вылезает новая страничка, где вам говорят: нарисуйте зигзаг, у вас на это есть 20 секунд. Вы пытаетесь нарисовать за 20 секунд зигзаг, как здесь, например. Если у вас все получается, сеть говорит, что это зигзаг, и вы идете дальше. Таких картинок всего шесть.\r\n\r\nЕсли сети от Google не удалось распознать, что вы нарисовали, на задании ставился крестик. Позже я расскажу, что в дальнейшем будет значить, распознан рисунок сетью или нет.\r\n\r\nЭтот сервис собрал довольно большое количество пользователей, и все картинки, которые пользователи рисовали, логировались.\r\n\r\n\r\n\r\nУдалось собрать почти 50 млн картинок. Из этого формировался трейн и тест дата для нашего соревнования. Кстати, количество данных в тесте и количество классов не зря выделено жирным шрифтом. Я о них расскажу чуть позже.\r\n\r\nФормат данных был следующий. Это не просто RGB-картинки, а, грубо говоря, лог всего, что делал пользователь. Word — это наш таргет, countrycode — это то, откуда родом автор дудла, timestamp — время. Лейбл recognized как раз показывает то, распознала сеть от Google картинку или нет. И сам drawing — последовательность, аппроксимация кривой, которую пользователь рисует точками. И тайминги. Это время от начала рисования картинки.\r\n\r\n\r\n\r\nДанные были представлены в двух форматах. Это первый формат, а второй — упрощенный. Они оттуда выпилили тайминги и аппроксимировали этот набор точек меньшим набором точек. Для этого они использовали алгоритм Дугласа-Пекера. У вас большой набор точек, который просто аппроксимирует какую-то прямую линию, а вы на самом деле можете эту линию аппроксимировать всего двумя точками. В этом и состоит идея алгоритма.\r\n\r\nДанные были распределены следующим образом. Все равномерно, но есть некоторые выбросы. Когда мы решали задачу, то на это не смотрели. Главное, что не было тех классов, которых реально мало, нам не приходилось делать weighted samplers и data oversampling.\r\n\r\n\r\n\r\nКак выглядели картинки? Это класс «самолет» и примеры из него с метками recognized и unrecognized. Соотношение их было где-то 1 к 9. Как видно, данные достаточно шумные. Я бы предположил, что это самолет. Если же посмотреть на not recognized, это в большинстве случаев просто шум. Кто-то даже пытался написать «самолет», но видимо, по-французски. \r\n\r\nБольшинство участников просто брали сетки, отрисовывали данные из этой последовательности линий как RGB-картинки и закидывали в сеть. Примерно так же отрисовывал и я: брал палитру цветов, первую строку отрисовывал одним цветом, который был в начале этой палитры, последнюю — другим, который в конце палитры, а между ними везде делал интерполяцию по этой палитре. Кстати, это давало лучший результат, чем если вы будете рисовать как на самом первом слайде — просто черным цветом.\r\n\r\nДругие участники команды, например Иван Сосин, пробовали немного другие подходы к рисованию. Одним каналом он просто рисовал серую картинку, другим каналом — рисовал каждый штрих градиентом от начала до конца, с 32 до 255, а третим каналом рисовал градиент по всем штрихам от 32 до 255.\r\n\r\nЕще из интересного — Алекс Паринов закидывал информацию в сеть по countrycode.\r\n\r\n\r\n\r\nМетрика, которая использовалась в соревновании, это Mean Average Precision. В чем суть этой метрики для соревнования? Вы можете отдать три предикшина, и если в этих трех предикшинах нет правильного, то вы получаете 0. Если есть правильный, то учитывается его порядок. И результат по таргету будет считаться как 1, деленное на порядок вашего предсказания. Например, вы сделали три предикшина, и правильный из них первый, то вы 1 делите на 1 и получаете 1. Если предикшин верный и его порядок 2, то 1 делите на 2, получаете 0,5. Ну и т. д.\r\n\r\n\r\n\r\nС предобработкой данных — как рисовать картинки и так далее — мы немного определились. Какие архитектуры мы использовали? Мы пытались использовать жирные архитектуры, такие как PNASNet, SENet, и такие уже классические архитектуры как SE-Res-NeXt, они все больше заходят в новых соревнованиях. Также были ResNet и DenseNet. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nКак мы это обучали? Все модели, которые мы брали, мы брали сами предобученными на imagenet. Хотя данных много, 50 млн картинок, но все равно, если вы берете сеть, предобученную на imagenet, она показывала лучший результат, чем если вы будете просто обучать ее from scratch.\r\n\r\nКакие техники для обучения мы использовали? Это Cosing Annealing with Warm Restarts, о ней я поговорю чуть позже. Это техника, которую я использую практически во всех моих последних соревнованиях, и с ними получается довольно хорошо обучить сетки, достичь хорошего минимума.\r\n\r\n\r\n\r\nДальше Reduce Learning Rate on Plateau. Вы начинаете обучать сеть, задаете какой-то определенный learning rate, дальше ее учите, у вас постепенно loss сходится к какому-то определенному значению. Вы это чекаете, например, на протяжении десяти эпох loss никак не поменялся. Вы уменьшаете ваш learning rate на какое-то значение и продолжаете учить. Он у вас опять немного падает, сходится в каком-то минимуме и вы опять понижаете learning rate и так далее, пока у ваша сеть окончательно не сойдется.\r\n\r\nДальше интересная техника Don’t decay the learning rate, increase the batch size. Есть статья с одноименным названием. Когда вы обучаете сеть, вам необязательно уменьшать learning rate, вы можете просто увеличивать batch size.\r\n\r\nЭту технику, кстати, использовал Алекс Паринов. Он начинал с батча, равного 408, и когда сеть у него приходила на какое-то плато, он просто увеличивал batch size в два раза, и т. д.\r\n\r\nНа самом деле, я не помню, до какого значения у него batch size доходил, но что интересно, были команды на Kaggle, которые использовали эту же технику, у них batch size был порядка 10000. Кстати, современные фреймворки для deep learning, такие как PyTorch, например, позволяют вам это очень просто делать. Вы генерируете свой батч и подаете его в сеть не как он есть, целиком, а делите его на чанки, чтобы у вас это влезало в вашу видеокарту, считаете градиенты, и после того, как для всего батча посчитали градиент делаете обновление весов.\r\n\r\nКстати, в этом соревновании еще заходили большие batch sizes, потому что данные были довольно шумными, и большой batch size помогал вам более точно аппроксимировать градиент.\r\n\r\nТакже использовался псевдолейблинг, его по большей части использовал Роман Соловьев. Он в батч семплил где-то половину данных из теста, и на таких батчах обучал сетку.\r\n\r\nРазмер картинок играл значение, но факт в том, что у вас данных много, нужно долго обучать, и если у вас размер картинки будет довольно большим, то вы будете обучать очень долго. Но это приносило в качество вашего финального классификатора не так много, так что стоило использовать некий trade-off. И пробовали только картинки не очень большого размера.\r\n\r\nКак это все обучалось? Сначала брались картинки маленького размера, на них прогонялось несколько эпох, это довольно быстро занимало по времени. Потом давались картинки большого размера, сеть обучалась, потом еще больше, еще больше, чтобы не обучать это с нуля и не тратить очень много времени.\r\n\r\nПро оптимайзеры. Мы использовали SGD и Adam. Таким способом можно было получить single модель, которая давала скор 0,941-0,946 на паблик лидерборде, что довольно неплохо.\r\n\r\nЕсли вы заансамблируете модели неким образом, то вы получите где-то 0,951. Если применить еще одну технику, то финальный скор вы получите на паблик борде 0,954, как получили мы. Но об этом чуть позже. Дальше я расскажу, как мы асамблировали модели, и как такого финального скора удалось добиться.\r\n\r\nДальше хотел бы рассказать про Cosing Annealing with Warm Restarts или Stochastic Gradient Descent with Warm Restarts. Грубо говоря, в принципе, оптимайзер вы можете засунуть любой, но суть в следующем: если вы просто будете обучать одну сеть и постепенно она будет сходиться к какому-то минимуму, то все окей, у вас получится одна сеть, она делает определенные ошибки, но вы можете ее обучать немного по-другому. Вы будете задавать какой-то начальный learning rate, и постепенно его понижать по данной формуле. Вы его занижаете, у вас сеть приходит к какому-то минимуму, дальше вы сохраняете веса, и снова ставите learning rate, который был в начале обучения, тем самым из этого минимума выходите куда-то наверх, и опять занижаете ваш learning rate.\r\n\r\nТем самым вы можете посетить сразу несколько минимумов, в которых loss у вас будет плюс-минус одинаковым. Но факт в том, что сети с данными весами будут давать разные ошибки на вашей дате. Усреднив их, вы получите некую аппроксимацию, и ваш скор будет выше.\r\n\r\n\r\n\r\nПро то, как мы ассемблировали наши модели. В начале презентации я говорил обратить внимание на количество данных в тесте и количество классов. Если к количеству таргетов в test set вы прибавите 1 и поделите на количество классов, вы получите число 330, и об этом писалось на форуме — что классы в тесте сбалансированы. Этим можно было воспользоваться.\r\n\r\nРоман Соловьев на основе этого придумал метрику, мы ее называли Proxy Score, которая довольно хорошо коррелировала с лидербордом. Суть в чем: вы делаете предикшен, берете топ-1 ваших предиктов и считаете количество объектов для каждого класса. Дальше из каждого значения вычитаете 330 и складываете полученные абсолютные значения.\r\n\r\nПолучились такие значения. Это нам помогало не делать пробинг-лидерборда, а валидироваться локально и подбирать коэффициенты для наших ансамблей. \r\n\r\nС ансамблем вы могли получить такой скор. Что бы еще сделать? Предположим, вы воспользовались информацией, что классы в тесте у вас сбалансированы.\r\n\r\nБалансировки были разные. Пример одной из них — балансировка от ребят, которые заняли первое место.\r\n\r\nЧто делали мы? У нас балансировка была довольно простая, ее предложил Евгений Бабахнин. Мы сначала сортировали наши предсказания по топ-1 и из них выбирали кандидатов — таким образом, чтобы количество классов не превышало 330. Но для некоторых классов у вас получается так, что предиктов меньше, чем 330. Окей, давайте еще отсортируем по топ-2 и топ-3, и так же выберем кандидатов.\r\n\r\nЧем наша балансировка отличалась от балансировки первого места? Они использовали итеративный подход, брали самый популярный класс и уменьшали вероятности для этого класса на какое-то маленькое число — до тех пор, пока этот класс не становился не самым популярным. Брали следующий самый популярный класс. Так дальше и понижали, пока количество всех классов не становилось равным. \r\n\r\nВсе использовали плюс-минус один подход для обучения сетей, но не все использовали балансировку. Используя балансировку, вы могли зайти в голд, а если бы повезло, то и в мани.\r\n\r\nКак предпроцессить дату? Все предпроцессили дату плюс-минус одинаково — делалая handcrafted-фичи, пытались закодировать тайминги разным цветом штрихов и т. д. Как раз про это говорил Алексей Ноздрин-Плотницкий, который занял 8 место. \r\n\r\n\r\n\r\nОн делал по-другому. Он говорил, что все эти ваши handcrafted-фичи не работают, так делать не надо, у вас сеть должна сама все это выучивать. И вместо этого он придумал обучаемые модули, которые делали предобработку ваших данных. Он в них закидывал исходные данные без предобработки — координаты точек и тайминги.\r\n\r\nДальше по координатам он брал разность, а по таймингам это все усреднял. И у него получалась довольна длинная матрица. К ней он несколько раз применял 1D-свертку, чтобы получить матрицу размером 64хn, где n — общее количество точек, а 64 сделано для того, чтобы подать полученную матрицу уже на слой какой-либо сверточной сети, которая принимает количество каналов — 64. У него получалась матрица 64хn, дальше из этого нужно было составить тензор какого-то размера, чтобы количество каналов было равно 64. Он нормировал все точки Х, Y в диапазоне от 0 до 32, чтобы составить тензор размером 32х32. Не знаю, почему он захотел 32х32, так получилось. И в эту координату он клал фрагмент этой матрицы размером 64хn. Таким образом, он просто получал тензор 32х32х64, который можно было положить дальше в вашу сверточную нейронную сеть. У меня все.	https://habr.com/ru/company/yandex/blog/440666/	1ef080ca-09a9-474e-afa6-71cea68b971e
18	Как все начиналось: оптические диски и их история	cd компакт-диски лазерные диски история ИТ	\r\n \r\nВ общем доступе оптические компакт-диски появились в 1982 году, прототип увидел свет еще раньше — в 1979. Изначально компакты разрабатывали в качестве замены виниловым дискам, как более качественный и надежный носитель. Считается, что лазерные диски являются результатом совместной работы команд двух технологических корпораций — японской Sony и голландской Philips.\r\n \r\nПри этом базовая технология «холодных лазеров», которая и сделала возможной появление лазерных дисков, была разработана советскими учеными Александром Прохоровым и Николаем Басовым. За свое изобретение они были удостоены Нобелевской премии. В дальнейшем технология развивалась, и в 70-х годах Philips разработала способ записи компакт-дисков, который и положил начало CD. Сначала инженеры компании создали ALP (audio long play) в качестве альтернативы виниловым пластинкам.\r\n \r\nДиаметр ALP-дисков составлял примерно 30 сантиметров. Чуть позже инженеры уменьшили диаметр дисков, время проигрывания при этом снизилось до 1 часа. Лазерные диски и воспроизводящее устройство для них впервые были продемонстрированы Philips в 1979 году. После этого компания стала искать партнера для дальнейшей работы над проектом — технология виделась разработчикам как международная, а развить ее до необходимого уровня и популяризовать своими силами было сложно.\r\n \r\nНачало всего\r\nРуководство приняло решение попробовать установить контакты с технологическими компаниями из Японии, в то время эта страна находилась на острие hi-end технологий. Для этого в страну отправились делегаты Philips, им удалось встретиться с президентом Sony, который заинтересовался технологией. \r\n\r\nПочти сразу была сформирована команда инженеров Philips-Sony, они и разработали первые спецификации технологии. Вице-президент Sony настоял на увеличении объема диска, ему хотелось, чтобы компакт мог вместить девятую симфонию Бетховена, для чего объем диска расшили с 1 часа до 74 минут (есть и мнение, что это просто красивая маркетинговая история). Объем данных, которые умещаются на такой диск, составил 640 Мбайт. Инженеры разработали и параметры качества звука. Например, частота выборки стереосигналов регламентировалась на уровне 44,1 кГц (для одного канала 22,05 кГц) c разрядностью каждого в 16 бит. Так появился стандарт Red Book.\r\n \r\nНазвание новой технологии появилось не вдруг — его выбрали из нескольких вариантов, включая Minirack, Mini Disc, Compact Rack. В итоге разработчики совместили два названия, получив гибридное Compact Disc. Не в последнюю очередь это название было выбрано из-за растущей популярности аудиокассет (технология Compact Cassette).\r\n \r\nPhilips и Sony также сыграли важнейшую роль в разработке спецификации первых цифровых компакт-дисков, которая получила название Yellow Book или CD-ROM. Новая спецификация дала возможность хранить на дисках уже не только аудио, но и текстовые и графические данные. Определение типа диска производилось в автоматическом режиме при чтении заголовка. Проблема была в том, что компакт-диск, соответствующий стандарту Yellow Book, мог работать только с определенным типом накопителей, которые не были универсальными.\r\n \r\n17 августа 1982 года на фабрике Philips в немецком Городе Лангенхаген был выпущен первый CD. На нем был записан альбом The Visitors группы ABBA. Стоит отметить, что лаковое покрытие первых дисков было не слишком качественным, так что покупатели компактов часто их портили. С течением времени качество дисков улучшилось. Первые несколько лет они использовались исключительно в hi-fi аппаратуре, их использовали в качестве замены виниловым пластинкам и кассетам.\r\n\r\n\r\n \r\nНачиная с 2000 года в продаже стали появляться диски объёмом 700 Мбайт, которые давали возможность записывать аудио с общей продолжительностью до 80 минут. Они полностью вытеснили с рынка диски объемом 650 Мбайт. Есть и носители объемом в 800 МБ, но они подходили не для всех приводов, так что такие диски не получили особого распространения. Увеличить объем доступного для хранения данных пространства удалось благодаря снижению расстояния между дорожками. Так, к примеру, у дисков емкостью в 650 МБ расстояние между дорожками равно 1,7 мкм, а у 800 МБ дисков этот показатель снижен до 1,5 мкм. Также у первых скорость составляет 1,41 м/с, а у вторых 1,39 м/с.\r\n \r\n\r\n \r\nКак это работает\r\nДиск состоит из нескольких слоев. Подложка — поликарбонатная, ее толщина 1,2 мм, диаметр — 120 мм. На подложке размещается еще один слой — металл (это может быть золото, серебро или, чаще всего — алюминий). Далее металлический слой защищается при помощи лака, на который наносится графика. Подложка надежно защищает металлический слой, так что считыванию мешают уж очень глубокие царапины. Диаметр отверстия в диске — 15 мм.\r\n \r\nФормат хранения данных для дисков — Red Book (о нем говорилось выше). Ошибки при считывании корректируются при помощи кода Рида-Соломона, так что легкие царапины не снижают читаемость диска.\r\n \r\nДанные на диск записываются в виде спиральной дорожки из так называемых питов (углублений), которые выдавливаются в поликарбонатной основе. Глубина каждого пита составляет примерно 100 нм, ширина — 500 нм. Длина пита от 850 нм до 3,5 мкм. Питы рассеивают или поглощают свет, подложка — отражает. Таким образом, записанный диск является отличным примером отражательной дифракционной решетки.\r\n \r\nСчитывается диск при помощи лазерного луча с длиной волны 780 нм, который излучается полупроводниковым лазером. Принцип считывания заключается в регистрации изменения интенсивности отраженного света. Так, лазерный луч сходится на информационном слое, диаметр светового пятна в этом случае составляет 1,2 мкм. Максимальный сигнал регистрируется между питами. В случае попадания на пит регистрируется меньшая интенсивность света. Изменения интенсивности преобразуются в электрический сигнал, с которым и работает аппаратура.\r\n \r\nКак создается диск\r\n\r\nПервый этап заключается в подготовке данных для запуска в серию;\r\nФотолитография — второй этап, это процесс создания штампа диска. Сначала создается стеклянный диск, на который наносится слой фоторезистивного материала, на него и записывается информация. Материал изменяет физико-химические свойства под действием света;\r\nЗапись данных производится с использованием лазерного луча. При увеличении мощности лазера (когда нужно создать пит) химические связи молекул фоторезистивного материала разрушаются, и он застывает;\r\nФоторезист травят (разными способами, от плазмы до кислоты), с матрицы удаляются области, не затронутые воздействием лазера;\r\nДиск помещается в гальваническую ванну, где на его поверхность осаждается слой никеля;\r\nДиски штампуются литьем под давлением, в качестве исходника используется изначальный стеклянный диск;\r\nДалее на информационный слой напыляется металл;\r\nНа внешнюю сторону наносится защитный лак, на котором уже наносят графическое изображение.\r\n \r\nА что насчет CD-RW?\r\nCD-RW представляет собой разновидность компакт-диска, которая появилась в 1997 году. Изначально стандарт назывался CD-Erasable (CD-E, стираемый компакт-диск). \r\n \r\nЭто был настоящий прорыв в сфере записи и хранения информации. Ведь получить недорогой и емкий носитель информации было мечтой тысяч инженеров и пользователей. CD-RW похож по структуре и принципу действия на обычный CD, но вот записывающий слой другой — это специализированный сплав халькогенидов. Чаще всего используется серебро-индий-сурьма-теллур. При нагреве выше температуры плавления такой сплав переходит из кристаллического состояния в аморфное.\r\n \r\nФазовый переход в данном случае обратим, что является основой для процесса перезаписи. Толщина активного слоя диска составляет всего 0,1 мкм, так что лазером легко воздействовать на вещество. Процесс записи происходит при воздействии лазерного луча, активный слой в этом случае переходит в расплав (те его области, на которые подействовал лазер). Далее тепло диффундирует в подложку, и расплав переходит в аморфное состояние. У аморфных отрезков меняются такие характеристики, как диэлектрическая проницаемость, коэффициент отражения и, следовательно, интенсивность отраженного света. Она несет информацию о записи на диске. Считывание производится при помощи лазера меньшей мощности, который не может оказать влияния на активный слой. При записи активный слой нагревается до 200 градусов Цельсия, что позволяет ему снова совершить фазовый переход в кристаллическое состояние.\r\n \r\nМногократное использование CD-RW приводит к механической усталости рабочего слоя. Поэтому инженеры, разрабатывавшие технологию, использовали вещества с низким коэффициентом накопления усталости. CD-RW может выдержать около тысячи циклов перезаписи.\r\n \r\nDVD — еще больше емкости!\r\nПервые DVD появились в Японии в 1996 году, они появились как ответ на запрос пользователей и бизнеса, которым нужны были все более емкие носители. Изначально диски высокой емкости разрабатывались сразу несколькими компаниями. Появилось два независимых направления разработки: Multimedia Compact Disc (Philips и Sony), — Super Disc (8 крупных корпораций, включая Toshiba и Time Warner). Чуть позже оба направления слились в одно под влиянием корпорации IBM. Она убедила партнеров не повторять события времен «войны форматов», когда шла битва за приоритет между стандартами видеокассет «Video Home System» и «Бетамакс».\r\n\r\n\r\n \r\nТехнология была анонсирована в сентябре 1995 года, в том же году разработчики опубликовали спецификации. Первый пишущий DVD-привод увидел свет в 1997 году.\r\n \r\nУвеличить емкость записи при сохранении прежних размеров удалось за счет использования красного лазера с длиной волны 650 нм. Шаг дорожки при этом в два раза меньше, чем у CD и составляет 0,74 мкм.\r\n \r\nBlu-Ray — самый современный оптический носитель\r\nЕще одна разновидность оптического носителя с гораздо более высокой плотностью записи данных, чем у CD или DVD. Стандарт был разработан международным консорциумом BDA. Первый прототип появился в октябре 2000 года.\r\n \r\nТехнология предусматривает использование коротковолнового лазера (длина волны 405 нм), откуда и произошло название. Букву «е» убрали, поскольку выражение blue ray является общеупотребительным в английском языке и не может быть запатентовано. Использование синего (сине-фиолетового) лазера дало возможность сузить дорожку до 0,32 мкм, увеличив плотность записи данных. Скорость считывания носителя увеличена до 432 Мбит/с.\r\n \r\nUDF — универсальный дисковый формат\r\nUDF — это спецификация формата файловой системы, которая не зависит от ОС. Она разработана для хранения файлов на оптических носителях — как СD, так и DVD и Blu-Ray. У UDF нет ограничения в 2 и 4 ГБ для записываемых файлов, так что этот формат идеально подходит для дисков повышенной емкости — DVD и Blu-Ray.\r\n \r\nОптические диски и интернет \r\nТехнологические компании продолжают совершенствовать оптические диски. Так, Sony и Panasonic еще в 2016 году смогли увеличить емкость оптических носителей до 3,3 ТБ. При этом работоспособность дисков сохраняется, по словам представителей Sony, вплоть до 100 лет.\r\n \r\nТем не менее, все типы оптических дисков постепенно теряют популярность — с развитием интернета пропадает потребность для пользователей в накоплении данных на дисках. Информацию можно хранить в облаке, что гораздо удобнее (насколько это безопаснее — другой вопрос). Компакт-диски уже далеко не так популярны, как несколько лет назад, но полное забвение (как в случае аудиокассет) им, скорее всего, не грозит — их будут использовать для создания архивов важной для бизнеса информации.\r\n \r\nЕсли терабайтные оптические диски пойдут в серию, то их применение будет ограничено — может быть, с их помощью будут распространять фильмы в 4К и современные игры с набором самых разных бонусов. Но активнее всего они будут использоваться для создания бэкапов. И если в Sony говорят правду о вековой сохранности записанных данных, то бизнес будет использовать новую технологию весьма активно.	https://habr.com/ru/post/440626/	1ef080ca-09a9-474e-afa6-71cea68b971e
40	Установка diaspora*	ruby on rails diaspora social networks	«В жизни важен первый шаг», — слова из песни. В установке diaspora* — тоже. В diaspora* wiki для подминов написано, что запуск собственного сервера diaspora* требует технических умений и времени. А далее — инструкции по установке для некоторых популярных дистрибутивов Linux, а также для пары версий MacOS. Сейчас Windows не поддерживается.\r\n\r\nОднако это еще не все. В Ubuntu 16.04 и основанных на нем дистрибутивах есть два пакета diaspora-installer и diaspora-installer-mysql, установив которые пользователь получает готовый diaspora*-сервер на основе PostgreSQL/MySQL и Nginx.\r\n\r\nОтдельно в вышеупомянутых инструкциях для Linux упоминаются Raspberry Pi >= 2. Установка на эти устройства возможна, но для создания многопользовательских подов не рекомендована.\r\n\r\n«Такой под будет очень медленным», — предупреждают инструкции.\r\n\r\nИтак, Calculate Linux Desktop 18 LXQT — установлен в виртуальной машине, Elementary OS 5.0 — на отдельном разделе жесткого диска настольного компьютера, а в Raspberry Pi вставлена карта памяти с NOOBS.\r\n\r\nС CLDL-18 все в целом по инструкциям с официального веб-сайта diaspora*, результат — запуск diaspora*-сервера для разработки (на WEBrick и MySQL). На двухядерном виртуальном микропроцессоре с виртуальным гигабайтом ОЗУ все было «очень медленным».\r\n\r\n\r\n\r\nНа ElementaryOS 5.0 все было сделано буквально одной командой для запуска установки diaspora*, postgresql, nginx и их зависимостей. Во время установки программа предложила настроить базу данных с помощью dbconfig-common, выбрать имя хоста; были установлены необходимые руби-гемы.\r\n\r\n\r\n\r\n«В отличие от» установки Redmine — никаких Apache2+Passenger, только Nginx (после выполнения diaspora-install в списке установленных пакетов passenger'a нет).\r\n\r\nНа Raspberry Pi не место для «пода» на рельсах (хотя cakephp, который «изначально создавался как клон популярного Ruby on Rails», там работает) — оставим эти устройства для LibreELEC и программирования на Python.\r\n\r\n\r\n\r\nУчебник «Знакомство с diaspora*» един для всех вариантов запусков собственных подов, а также для тех, кто воспользовался чужим подом, выбрав его среди подов с открытой регистрацией, следуя соответствующей инструкции в diaspora* wiki.\r\n\r\nСеть обладает оригинальной идеологией, заключающейся в основном в вещи, о которой, возможно, никогда не задумывались пользователи коммерческих социальных сетей — в выборе места хранения их данных; впрочем, в статье о выборе пода написано об этом гораздо понятнее и конкретнее, чем на главной странице и веб-странице /about официального веб-сайта diaspora*.\r\n\r\nВыше ничего не было написано о перенаправлении портов на роутере и выборе имени домена — следующих необходимых этапах создания собственного пода.\r\n\r\n«Дорожная карта»:\r\n\r\n1. Перенаправление портов на роутере\r\n2. Выбор имени домена\r\n\r\nЧтобы увидеть приложение в действии, после запуска нового пода откройте окно браузера и пройдите по соответствующему адресу. Вы увидете дефолтную информационную страницу. Как и аналогичная страница нового приложения Rails, это своеобразный тест для diaspora*-сервера; она показывает, что ваши программы настроены достаточно правильно для отображения страницы.\r\n\r\nТакже она содержит ссылку для регистрации на этом стручке (англ. Pod), приветствие, несколько ссылок на diaspora* wiki и другую информацию.\r\n\r\nTroubleshooting\r\n «Хорошим источником бесплатной технической поддержки является интернет». А также сообщения, выдаваемые программой во время установки. Например, «You can leave the PostrgeSQL application password blank, as the „ident“ authentication method is used, allowing the diaspora user on the system to connect to the Diaspora database without a password».	https://habr.com/ru/post/440256/	1ef080ca-09a9-474e-afa6-71cea68b971e
19	JetBrains Night в Москве, 13 апреля	jetbrains conference java kotlin typescript intellij idea	Привет, Хабр!\r\n\r\nМы приглашаем всех на JetBrains Night — большую встречу с друзьями, которая пройдет 13 апреля в Москве. Приходите узнать, что интересного происходит в мире Java, Kotlin и веб-технологий. Разработчики JetBrains расскажут, чем мы занимаемся и что нового сделали за последнее время, а самое главное — как все это правильно использовать. \r\n\r\nПосле технических докладов мы проведем открытую дискуссию со спикерами и другими сотрудниками компании — ответим на вопросы о наших продуктах и работе в JetBrains.\r\n\r\n\r\n\r\nВ программе:\r\n\r\n\r\nУстранение барьеров на пути к продуктивности (на англ.) — Хади Харири, руководитель Developer Advocacy\r\nКорутины в Kotlin на сервере — Роман Елизаров, разработчик языка Kotlin\r\nРазвитие поддержки Java в IntelliJ IDEA: совершенству нет предела — Тагир Валеев, технический руководитель команды поддержки языка Java в IntelliJ IDEA\r\nЕще больше полезных советов по разработке в IntelliJ IDEA (на англ.) — Триша Ги, Developer Advocate\r\nКак мы разрабатываем WebStorm — Денис Ушаков, руководитель разработки WebStorm; Екатерина Пригара, продакт-менеджер WebStorm\r\nПишем full-stack приложение на Kotlin — Леонид Хачатуров, разработчик \r\nЭволюция TypeScript: язык и IDE — Андрей Старовойт, старший разработчик WebStorm\r\nОткрытая дискуссия с командой JetBrains\r\n\r\nJetBrains Night Moscow состоится в субботу, 13 апреля, с 16:00 до 21:00. Регистрация будет открыта с 15:00. Адрес: 1-й Красногвардейский проезд, дом 21, строение 2, комплекс Москва-Сити, башня «Око», 4-й этаж, зал Crystal Ballroom. \r\n\r\nПодробнее о мероприятии, докладах и спикерах — здесь.\r\n\r\nРегистрация на мероприятие обязательна, она открыта на сайте TimePad. Пожалуйста, обратите внимание, что участие в мероприятии платное (500 руб.).\r\n\r\nПриходите, будет интересно!\r\n\r\nКоманда JetBrains\r\nThe Drive to Develop	https://habr.com/ru/company/JetBrains/blog/440642/	1ef080ca-09a9-474e-afa6-71cea68b971e
20	Делимые факториалы	факториал математика сложная задача julia многочлены рекурсия	Недавно я был совершенно сбит с толку этим твитом «Библиотеки Ферма»:\r\n\r\n\r\n«Вот что получится, если в факториале не умножать, а делить.»\r\n\r\nКогда я увидел его, мне пришлось бросить свои дела, схватить блокнот и проверить форулу. Результат в черновом виде казался логичным. Так как мультипликативная версия  при увеличении  стремится к бесконечности, то «делительная» версия должна стремиться к нулю. И  ведёт себя именно так; полиномиальная функция  растёт медленнее, чем степенная функция  для достаточно больших :\r\n\r\n\r\nНо почему результат деления принимает именно вид ? Откуда берётся ?\r\n\r\nЧтобы ответить на этот вопрос, мне пришлось разбередить старую травму, связанную с изучением деления дробей, но я справился с болью. Двигаясь по формуле из твита слева направо, мы сначала получаем . Затем, поделив эту величину на , получаем\r\n\r\n\r\nПродолжая таким образом, мы в результате приходим к:\r\n\r\n\r\nЧтобы прийти к показанному в твите результату , мы просто умножим числитель и знаменатель на . (Хотя на мой вкус, выражение  более понятно.)\r\n\r\n\r\nЯ официально признанный фанат факториалов. Оставьте при себе свои последовательности Фибоначчи; вот моя любимая функция. Каждый раз, когда я изучаю новый язык программирования, моим первым упражнением становится написание нескольких процедур для вычисления факториалов. За многие годы я придумал несколько вариаций этой темы, например, замену в определении  на  (что даёт нам треугольные числа). Но кажется, что раньше я никогда не задумывался о замене  на . Получается странно. Так как умножение коммутативно и ассоциативно, мы можем определить  просто как произведение всех целых чисел от  до , не беспокоясь о порядке операций. Но при делении порядок игнорировать не получится. В общем случае,  и .\r\n\r\nВ твите «Библиотеки Ферма» делители поставлены в порядке по убыванию: . Очевиднее всего будет заменить это на порядок по возрастанию: . Что произойдёт, если мы зададим факториал деления как ? Ещё один возврат к школьному алгоритму деления дробей даёт нам простой ответ:\r\n\r\n\r\nДругими словами, когда мы многократно выполняем деление, выполняя подсчёт от  до , окончательный результат будет равен величине, обратной . (Мне хотелось бы поставить в конце этого предложения восклицательный знак, но увы!) Если вы ищете канонический ответ на вопрос «Что мы получим при делении вместо умножения в ?», то я бы заявил, что  — лучший кандидат, чем . Почему бы нам не принять симметрию между  и обратной ему величиной?\r\n\r\nРазумеется, есть множество других способов размещения n целочисленных значений во множестве . Но сколько именно? Как оказалось, ровно ! Поэтому, может показаться, что есть  уникальных способов задания делительной функции . Однако, изучение ответов двух показанных выше перестановок даёт нам понять, что здесь работает более простой паттерн. Какой бы элемент последовательности не появился первым, он оказывается в числителе большой дроби, а знаменателем оказывается произведение всех других элементов. Поэтому в итоге остаётся всего  различных результатов (если предположить, что мы всегда выполняем операции деления строго слева направо). Для любого целочисленного  в интервале от  до , поставив  в начало очереди, мы создаём делительное , равное , поделённому на все другие коэффициенты. Можно записать это следующим образом:\r\n\r\n\r\nИ таким образом мы решили небольшую загадку о том, как в этом твите  превратилось в .\r\nСтоит заметить, что все эти функции сходятся к нулю при стремлении  к бесконечности. С асимптотической точки зрения,  идентичны.\r\n\r\n\r\nТа-да! Миссия выполнена. Задача решена. Дело сделано. Теперь мы знаем всё, что нам нужно, о делительных факториалах, верно?\r\n\r\nНу, возможно, есть ещё один вопрос. Что скажет компьютер? Если взять наш любимый алгоритм факториала, и сделать то, что предлагается в твите, заменив все вхождения оператора  (или *) на /, то что случится? Какие из  вариантов делительного  выдаст нам программа?\r\n\r\nВот мой любимый алгоритм для вычисления факториалов в виде программы на Julia:\r\n\r\nfunction mul!(n)\n    if n == 1\n        return 1\n    else\n        return n * mul!(n - 1)\n    end\nend\r\nЭтот алгоритм познакомил целые поколения нердов с концепцией рекурсии. В текстовом виде он гласит: если  равно , то  равно . В противном случае нужно вычислить функцию , а затем умножить результат на . \r\n\r\nВы можете спросить, что произойдёт, если  будет равным нулю или отрицательным. Спросить вы можете, но лучше не надо. Для наших текущих целей .\r\n\r\nНачав с любого положительного , последовательность рекурсивных вызовов рано или поздно опустится к .\r\n\r\nФункцию можно записать более лаконично с помощью однострочного стиля определений Julia:\r\n\r\nmul!(n)  =  n == 1 ? 1 : n * mul!(n - 1)\r\nПравая часть оператора присваивания — это условное выражение, или тернарный оператор, имеющий вид a ? b : c. Здесь a — булево условие теста, которое должно вернуть значение или true, или false. Если a равно true, то вычисляется выражение b, а результат становится значением всего выражения. В противном случае вычисляется c.\r\n\r\nПросто чтобы убедиться, что я сделал всё верно, вот первые 10 факториалов, вычисленных этой программой:\r\n\r\n[mul!(n) for n in 1:10]\n10-element Array{Int64,1}:\n       1\n       2\n       6\n      24\n     120\n     720\n    5040\n   40320\n  362880\n 3628800\r\nТеперь давайте изменим это определение и преобразуем единственное вхождение * в /, оставив всё остальное неизменным (за исключением названия функции).\r\n\r\ndiv!(n)  =  n == 1 ? 1 : n / div!(n - 1)\r\nИ вот что вернёт программа, если мы запустим её для значений  от  до :\r\n\r\n[div!(n) for n in 1:20]\n20-element Array{Real,1}:\n 1                 \n 2.0               \n 1.5               \n 2.6666666666666665\n 1.875             \n 3.2               \n 2.1875            \n 3.657142857142857 \n 2.4609375         \n 4.063492063492063 \n 2.70703125        \n 4.432900432900433 \n 2.9326171875      \n 4.773892773892774 \n 3.14208984375     \n 5.092152292152292 \n 3.338470458984375 \n 5.391690662278897 \n 3.523941040039063 \n 5.675463855030418\r\nЧто? Это точно не походит на схождение к нулю, как и на  или . На самом деле значения так не выглядят, потому что и не собираются сходиться. Судя по показанному ниже графику, последовательность состоит из двух перемежающихся компонентов, каждый из которых, похоже, медленно растёт в сторону бесконечности, а также отклоняется от другого.\r\n\r\n\r\nРазбираясь с тем, что же мы здесь наблюдаем, полезно будет изменить тип выходных данных функции div!. Вместо использования оператора деления /, который возвращает значение как число с плавающей запятой, мы можем заменить его оператором //, возвращающим точное рациональное значение, округлённое до младшего члена.\r\n\r\ndiv!(n)  =  n == 1 ? 1 : n // div!(n - 1)\r\nВот последовательность значений для n в интервале 1:20:\r\n\r\n20-element Array{Real,1}:\n       1      \n      2//1    \n      3//2    \n      8//3    \n     15//8    \n     16//5    \n     35//16   \n    128//35   \n    315//128  \n    256//63   \n    693//256  \n   1024//231  \n   3003//1024 \n   2048//429  \n   6435//2048 \n  32768//6435 \n 109395//32768\n  65536//12155\n 230945//65536\n 262144//46189\r\nВ списке полно любопытных паттернов. Это двойная спираль, в которой чётные и нечётные числа зигзагами перемещаются в комплементарных нитях. Чётные числа не просто чётные, все они являются степенями . Кроме того, они появляются в парах — сначала в числителе, затем в знаменателе — и их последовательность неубывающая. Но существуют пробелы; присутствуют не все степени . Нечётная нить выглядит ещё более сложной, в числах появляются и исчезают разные небольшие простые коэффициенты. (Простые числа должны быть малыми, как минимум, меньше .)\r\n\r\nЭтот результат удивил меня. Я ожидал увидеть гораздо более смирную последовательность, наподобие тех, которые я вычислял на бумаге. Все эти изломанные скачки вверх и вниз не имели никакого смысла. Как не имел смысла и общий тренд к неограниченному росту соотношения. Как мы можем постоянно делить, получая при этом всё бОльшие и бОльшие числа?\r\n\r\nНа этом этапе можете приостановить чтение и попытаться придумать собственную теорию о том, откуда взялись эти зигзагообразные числа. Если вам нужна подсказка, то у вас она есть, и очень сильная, почти спойлер: поищите последовательность числителей или последовательность знаменателей в «Онлайн-энциклопедии целочисленных последовательностей».\r\n\r\n\r\nВот ещё одна подсказка. Небольшое изменение в программе div! полностью преобразует выходные данные. Просто изменим последнее выражение, заменив n // div!(n - 1) на div!(n - 1) // n.\r\n\r\ndiv!(n)  =  n == 1 ? 1 : div!(n - 1) // n\r\nТеперь результаты выглядят вот так:\r\n\r\n10-element Array{Real,1}:\n  1                    \n 1//2                  \n 1//6                  \n 1//24                 \n 1//120                \n 1//720                \n 1//5040               \n 1//40320              \n 1//362880             \n 1//3628800\r\nЭто обратная функция факториала, которую мы уже видели, ряд значений, сгенерированные при обходе слева направо по возрастающей последовательности делителей .\r\n\r\nНеудивительно, что изменение последнего выражения в процедуре менят результат. В конце концов, мы знаем, что деление не коммутативно и не ассоциативно. Но сложно понять, почему последовательность сгенерированных исходной программой значений даёт такую странную зигзагообразную форму. Какой механизм порождает такие парные степени двойки и попеременные нечётные и чётные значения?\r\n\r\nЯ обнаружил, что объяснить происходящее в зигзагообразной последовательности проще на итеративной версии процедуры, а не на рекурсивной. (Это заявление может показаться досадным тем, кто считает рекурсивные определения более простыми, но так уж получилось.) Вот как выглядит программа:\r\n\r\nfunction div!_iter(n)\n    q = 1\n    for i in 1:n\n        q = i // q\n    end\n    return q\nend\r\nЯ заявляю, что эта процедура с циклом по функционалу идентична рекурсивной функции, в том смысле, что если div!(n) и div!_iter(n) возвращают результат для какого-то положительного целого n, то он всегда будет одинаковым. Вот моё доказательство:\r\n\r\n[div!(n) for n in 1:20]    [div!_iter(n) for n in 1:20]\n            1                         1//1    \n           2//1                       2//1    \n           3//2                       3//2    \n           8//3                       8//3    \n          15//8                      15//8    \n          16//5                      16//5    \n          35//16                     35//16   \n         128//35                    128//35   \n         315//128                   315//128  \n         256//63                    256//63   \n         693//256                   693//256  \n        1024//231                  1024//231  \n        3003//1024                 3003//1024 \n        2048//429                  2048//429  \n        6435//2048                 6435//2048 \n       32768//6435                32768//6435 \n      109395//32768              109395//32768\n       65536//12155               65536//12155\n      230945//65536              230945//65536\n      262144//46189              262144//46189\r\nЧтобы понять процесс, порождающий эти числа, рассмотрим последовательные значения переменных  и  при каждом выполнении цикла. Изначально  и  равны ; поэтому после первого прохода цикла выражение q = i // q даёт  значение . Затем , а , то есть новое значение  равно . При третьей итерации , а , что даёт нам . Если это всё ещё сбивает вас с толку, то представьте  как . Важным наблюдением здесь является то, что при каждом обходе цикла  получает обратное значение, становясь .\r\n\r\nЕсли развернуть эти операции и посмотреть на умножения и деления, входящие в каждый элемент ряда, то возникает паттерн:\r\n\r\n\r\n\r\nВ общем виде:\r\n\r\n\r\n\r\nФункции  для нечётного  и  для чётного  имеют собственное название! Они называются двойными факториалами, и записываются как .\r\n\r\nУжасная терминология, правда? Лучше бы их назвали «полуфакториалами». И если бы я этого не знал, то прочитал бы  как «факториал факториала».\r\n\r\nДвойной факториал n определяется как произведение n и всех меньших положительных целых чисел той же чётности. Таким образом, наша любопытная последовательность зигзагообразных значений — это просто .\r\n\r\nВ статье 2012 года Генри У. Гулда и Джослин Куэнтенс (увы, находящаяся за paywall) исследуются применения двойных факториалов. Они встречаются гораздо чаще, чем можно подумать. В середине 17-го века Джон Валлис вывел следующее тождество:\r\n\r\n\r\nЕщё более странный ряд с участием куба значений двойных факториалов суммируется в . Его обнаружил не кто иной, как Сриниваса Рамануджан.\r\n\r\nГулд и Киэнтенс также рассматривали эквивалент двойного факториала для биномиальных коэффициентов. Стандартный биномиальный коэффициент определяется как:\r\n\r\n\r\nДвойная версия выглядит так:\r\n\r\n\r\nЗаметьте, что наши зигзагообразные числа соответствуют этому описанию, а потому могут считаться биномиальными коэффициентами двойных факториалов. Говоря конкретнее, они являются такими числами:\r\n\r\n\r\nОбычный бином  не очень интересен; он просто равен . Но двойная версия , как мы видели, танцует более оживлённый танец. И в отличие от обычного бинома она не всегда бывает целочисленной. (Единственные целые значения — это  и .)\r\n\r\nВзгляд на зигзагообразные числа как на частное двойных факториалов объясняет довольно многие их свойства, начиная с попеременных чётных и нечётных значений. Также мы можем увидеть, почему все чётные числа в последовательности являются степенями 2. Рассмотрим пример с . Числитель этой дроби — это , получающий от  множитель . Но знаменатель равен . Тройки сверху и снизу сокращаются, оставляя нам . Такие сокращения происходят в каждом из случаев. Каждый раз, когда в последовательности чётных чисел появляется нечётный множитель , он обязательно имеет вид , но к этому времени само  уже должно появиться в последовательности нечётных чисел.\r\n\r\n\r\nЯвляется ли последовательность зигзагообразных чисел разумным ответом на вопрос: «Что произойдёт, если мы будем делить, а не умножать в ?» Или генерирующая их компьютерная программа просто оказалась ошибочным алгоритмом? По моему личному мнению,  — более интуитивный ответ, зато  — более интересный.\r\n\r\nБолее того, само существование зигзагообразной последовательности расширяет наши горизонты. Как сказано выше, если вы настаиваете, что алгоритм деления всегда должен по порядку проходить по списку числителей , на каждом шаге деля число слева на число справа, то имеется всего  возможных результатов, и все они выглядят очень похожими. Но зигзагообразное решение обеспечивает намного более широкие возможности. Мы можем сформулировать задачу следующим образом: возьмём множество числителей , выберем его подмножество и обратим все элементы этого подмножества; теперь перемножим все числители, как обратные, так и прямые. Если обращённое подмножество пусто, то результатом будет обычный факториал . Если все числители превратились в обратные им значения, то мы получаем обратный . А если обращён каждый второй числитель, начиная с , то результатом будет элемент зигзагообразной последовательности.\r\n\r\nЭто только некоторые из множества возможных вариантов; в сумме здесь есть  подмножеств из  элементов. Например, можно брать обратные значения каждого числа, являющегося простым или степенью простого числа . При малых  результаты скачут, но постоянно остаются меньше, чем :\r\n\r\n\r\nОднако если бы я продолжил этот график для бОльших , он бы взлетел в стратосферу. Степени простых чисел становятся очень разреженными на числовой прямой.\r\n\r\n\r\nТеперь я задам вопрос. Мы видели вариации факториалов, приближающиеся к нулю при стремлении  к бесконечности, например . Мы видели другие вариации, растущие при увеличении  безгранично, в том числе сам  и зигзагообразные числа. Существуют ли какие-то разновидности процесса факториалов, сходящиеся к какой-то конечной границе, не являющейся нулём?\r\n\r\nВ первую очередь мне пришёл в голову такой алгоритм:\r\n\r\nfunction greedy_balance(n)\n    q = 1\n    while n > 0\n        q = q > 1 ? q /= n : q *= n\n        n -= 1\n    end\n    return q\nend\r\nМы циклически перебираем целые значения от  вниз до , вычисляя в процессе текущее произведение/частное . На каждом шаге, если текущее значение  больше , мы делим его на следующий числитель, в противном случае, выполняем умножение. Эта схема реализует своего рода управление обратной связью или поведение поиска цели. Если  становится слишком большим, мы уменьшаем его; если слишком маленьким, мы увеличиваем его. Я предположил, что при стремлении  к бесконечности,  будет сходиться к постоянно сужающемуся интервалу значений рядом с .\r\n\r\nНо эксперимент подкинул мне ещё один сюрприз:\r\n\r\n\r\nТакая пилообразная волна — не совсем то, чего я ожидал. Любопытно, что кривая не симметрична около ; отклонения сверху имеют бОльшую амплитуду, чем снизу. Но это искажение больше визуальное, чем математическое. Так как  является частным, расстояние от  до  такое же, как расстояние от  до , но в линейном масштабе таким не выглядит. Исправить это можно, составив логарифмический график частного:\r\n\r\n\r\nТеперь график симметричен, или хотя бы приблизительно таков, и центрирован относительно значения , которое является логарифмом . Но остаётся более серьёзная тайна. Пилообразная волна очень регулярна и имеет период , при этом не показывает признаков сжатия по направлению к ожидаемому ограничивающему значению . Численные значения предполагают, что при стремлении  к бесконечности пики кривой сходятся к значению чуть выше , а минимумы приближаются к значению чуть ниже . (Соответствующие логарифмы по основанию  примерно равны ). Мне не удалось разобраться, почему так происходит. Возможно, кто-то сможем объяснить.\r\n\r\nНеудача с этим жадным алгоритмом не означает, что мы не сможем делительный факториал, сходящийся к .\r\n\r\nЕсли мы будем работать с логарифмами числителей, то эта процедура становится случаем хорошо известной вычислительной задачи под названием «задача разбиения множества чисел». Нам даётся множество вещественных чисел, и мы должны разделить их на два множества, сумма которых равна, или как можно ближе к равенству. Это подтверждённо сложная задача, но её также называют (PDF) «простейшей сложной задачей».\r\n\r\nДля любого  мы можем обнаружить, что при использовании обратных значений какого-то другого подмножества числителей даёт нам лучшее приближение к . Для малых  мы можем решить эту задачу способом перебора: просто рассмотреть все  подмножеств и выбрать самое лучшее.\r\n\r\nЯ вычислил оптимальные разбиения вплоть до , когда выбирать нужно из миллиарда вариантов.\r\n\r\n\r\nОчевидно, что график становится всё более плоским. Можно использовать тот же метод для принудительного схождения к любому другому значению в интервале от  до .\r\n\r\nИ таким образом мы получаем ещё один ответ на вопрос, заданный твитом и начавший наше путешествие. Что произойдёт, если мы будем делить, а не умножать в ? Всё, что нам угодно.	https://habr.com/ru/post/440512/	1ef080ca-09a9-474e-afa6-71cea68b971e
21	Александр Белокрылов и Дмитрий Чуйко о Liberica JDK на jug.msk.ru	java jug jug.msk.ru jdk liberica bellsoft	14 февраля 2019 года на первой в этом году встрече сообщества московских Java-разработчиков jug.msk.ru Александр Белокрылов и Дмитрий Чуйко из компании BellSoft рассказали об особенностях разработки дистрибутива Liberica JDK.\r\n\r\n\r\n\r\nО докладчиках\r\nОба докладчика — работники компании BellSoft (Александр при этом ещё и генеральный директор компании). Компания BellSoft основана в 2017 году Java-инженерами питерского центра разработки компании Oracle. Флагманским продуктом является Liberica JDK — дистрибутив на базе Open JDK, уникальной особенностью которого стала поддержка архитектуры ARM. Кроме просмотра докладов подробнее о разработках компании можно почитать статью Алексея Войтылова «Java on Arm Processors» в недавнем номере журнала Java Magazine.\r\n\r\nАлександр и Дмитрий выступают на jug.msk.ru по второму разу — Александр ранее делал доклад 30 января 2014 года, Дмитрий — 22 мая 2017 года.\r\n\r\nАлександр успел поработать и в Sun Microsystems, и в Oracle. Работая в Oracle, занимался в том числе организацией конференций Java Day и JavaOne Russia и значительно повлиял на создание JUG.ru.\r\n\r\nНекоторые доклады Александра на конференциях в хронологическом порядке:\r\n\r\n\r\n«Перспективы развития Java технологий» (Осенний GeekFest 2010: видео часть 1 и часть 2)\r\n«Java: эволюция неизбежна» (Java Day Minsk 2013: видео)\r\n«Java Embedded у вас дома» (c Александром Мироненко) (Joker 2013: презентация, видео)\r\n«Java Embedded у вас дома» (c Александром Мироненко) (JPoint 2014: видео)\r\n«Знакомьтесь, Java 8» (SouthCamp 2014: видео)\r\n«Полноценный Java runtime, 256Kb RAM и 5 литров пива» (c Александром Мироненко) (JUG.ru-2015: видео)\r\n«Вещи в Интернете: затаскиваем облачные сервисы на безмозглые железяки» (c Александром Мироненко) (Joker 2015: презентация, видео)\r\n«11 друзей Интернета Вещей» (c Александром Мироненко) (JPoint 2016: презентация, видео)\r\n«Погружение в Интернет Вещей с Java 9» (JPoint 2018: презентация, видео)\r\n«Дорогая, попробуем ARM? Теория, приложения и рабочие нагрузки» (с Алексеем Войтыловым) (Joker 2018: презентация, видео доступно пока только участникам конференции)\r\n\r\nПрочие ссылки: твиттер, GitHub.\r\n\r\nНекоторые новые доклады Дмитрия (доклады до 22 мая 2017 года перечислены в данном обзоре) в хронологическом порядке:\r\n\r\n\r\n«Организация многопоточности по модели подписки в Java 9» (JUG.EKB-2017: видео)\r\n«Compile ahead of time. It’s fine?» (русский вариант) (JEEConf 2017: видео)\r\n«Compile ahead of time. It's fine?» (английский вариант) (GeeCON 2017: видео)\r\n«Checksums that bite Java developers» (JDK IO 2018: видео)\r\n\r\nПрочие ссылки: твиттер, GitHub.\r\n\r\nО докладах\r\nАндрей Когунь напоминает о скорой конференции JPoint 2019, представляет докладчиков и начинает встречу.\r\n\r\n\r\n\r\nВ первой части встречи Александр рассказал (иллюстрируя презентацией) об истории создания компании BellSoft, вкладе её работников в создание Open JDK, предпосылки и особенности дистрибутива Liberica JDK.\r\n\r\n\r\n\r\nУже вместе с Дмитрием оба ответили на множество вопросов слушателей, дополнив ответы слайдами уже другой презентации.\r\n\r\n\r\n\r\nПосле перерыва Дмитрий продолжил демонстрацией функциональности Java 11 для контейнерного окружения на конкретных примерах Docker-образов c Liberica JDK 11. Окончательный вариант доклада, включая слайды, будет продемонстрирован через полтора месяца на конференции JPoint.\r\n\r\n\r\n\r\nПо причине недостатка времени «Дорогая, попробуем ARM? Теория, приложения и рабочие нагрузки» был показан в укороченном виде. Часовой вариант в исполнении Александра Белокрылова и Алексея Войтылова можно посмотреть в записи с Joker 2018 (ссылки на доклад были приведены выше).\r\n\r\n\r\n\r\nПервая, вторая и третья презентации. Видео также скоро появится (см. ссылки ниже).\r\n\r\nСсылки по jug.msk.ru:\r\n\r\n\r\nTimePad — анонсы встреч и регистрация на них, подписка на оповещение по почте о встречах\r\nYouTube — видео докладов\r\nSpeaker Deck — презентации докладов\r\nVK — анонсы встреч, фотоотчёты, ссылки на материалы прошедших встреч\r\nTwitter: учётная запись (анонсы встреч, фотоотчётов, видео) и хэштег (твиты с комментариями о встречах)\r\nХабр — обзоры встреч, найти все обзоры можно по тегу\r\n\r\n18 февраля 2019 года в 11:00 и 21 февраля 2019 года в 17:00 компанией BellSoft будет проводится бесплатный вебинар «Как использовать Java на предприятии, сохранить рантайм безопасным и не попасть в лицензионный капкан?», более подробнее прочитать и зарегистрироваться можно здесь.\r\n\r\n5-6 апреля 2019 года в Москве пройдёт Java-конференция JPoint, на которой Дмитрий Чуйко представит доклад о Java в контейнерном окружении. Билеты на конференцию всё еще доступны для покупки.	https://habr.com/ru/company/jugru/blog/440560/	1ef080ca-09a9-474e-afa6-71cea68b971e
22	Задача классификации глазами школьника: определение наличия автомобиля на парковке по кадрам с камеры видеонаблюдения	python tensorflow нейронная сеть машинное обучение компьютерное зрение opencv keras	Здравствуйте, я школьник 11 классов, интересуюсь программированием, около-IT тематикой.\r\n\r\nПишу данный пост с целью поделиться своим проектом, занявшим 10 часов моей жизни на выходных и выполненным с целью понять возможности современных методов анализа данных. Публикация может рассматриваться как пример удачной реализации для людей, несведущих в этой области знания, а так же как просьба указать мои ошибки для людей, соответственно, сведущих.\r\n\r\nДано: видео-поток с камеры видеонаблюдения, на котором имеется фрагмент 100x50 пикселей с изображением конкретно парковочного места, на котором может присутствовать или отсутствовать лишь конкретный автомобиль.\r\n\r\nИзображение с камеры\r\nИзображение парковочного места\r\n\r\nЗадача: определить наличие или отсутствие автомобиля на парковочном месте.\r\n\r\nПолучение изображения с камеры\r\nЯ использую библиотеку openCV для получения и предобработки изображения.\r\nСледующий код я использовал для построения датасета, который использую для обучения нейросети: я фотографирую ежечасно парковочное место, и после получения 60 фотографий вручную разделяю их на фото с машиной и без неё.\r\n\r\ndataminer.pyimport cv2 as cv\nimport numpy as np\nimport time\n\ncap = cv.VideoCapture()\nr = 0\nwhile r <=100:\n    cap.open('http://**.**.***.***:***/*****CG?container=mjpeg&stream=main') #URL-адрес видеопотока\n    hasFrame, frame = cap.read()#Чтение кадра из потока\n    frame = frame[100:200, 300:750]\n    box = [0,335,100,385] \n    quantframe = frame[box[0]:box[2], box[1]:box[3]]#Сохранение в отдельную переменную части кадра с изображением машины\n    r+=1\n    cv.imwrite(str(r)+'.png',quantframe) #Сохранение изображения машины в файл\n    print('saved')\n    cap.release()\n    time.sleep(3600)\n    key = cv.waitKey(1)\n    if key & 0xFF == ord('q'):\n        cv.destroyAllWindows()\n        break\n\r\n\r\nОбработка изображения\r\nЯ посчитал верным решением обучать нейросеть не на исходных изображениях, а на изображениях с контурами автомобиля, найденными посредством функции cv2.findcontours(...). \r\n\r\nВот код, преобразующий исходное изображение в изображение контуров:\r\n\r\nНахождение контуровdef contoursfinder(image):\n  img = image.copy()\n  srcimg = img.copy()\n  hsv_min = np.array((0, 0, 0), np.uint8)\n  hsv_max = np.array((255, 255, 60), np.uint8) #Поскольку контуры находятся по различиям в цвете между частями картинки, необходимо подобрать параметры, исходя из цветовой гаммы картинки\n  hsv = cv.cvtColor( img, cv.COLOR_BGR2HSV )\n  thresh = cv.inRange( hsv, hsv_min, hsv_max )\n  contours, _  = cv.findContours(thresh, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)\n  img = np.zeros((100,50,3), np.uint8)\n  cv.drawContours(img, contours, -1, (255,255,255), 1, cv.LINE_AA)\n  return cv.cvtColor(img, cv.COLOR_BGR2GRAY)\n\r\n\r\nРезультат работы функции:\r\n\r\nСкрытый текст\r\nНейронная сеть\r\nЯ использовал библиотеку tensorflow(keras).\r\n\r\nАрхитектура сети списана с примера с интернетов: для меня неочевидно объяснение, почему именно так. Если знающие люди расскажут или подскажут где почитать, почему эта архитектура эффективна или почему какая-та другая будет эффективнее, буду безмерно благодарен.\r\nМодель нейросети: последовательна, состоит из двух плотных скрытых слоев в 256 и 128 нейронов и входного, выходного слоев.\r\n\r\nКодmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(100, 50)),\n    keras.layers.Dense(256, activation=tf.nn.relu),\n    keras.layers.Dense(128, activation=tf.nn.relu),\n    keras.layers.Dense(2, activation=tf.nn.softmax)\n])\nmodel.compile(optimizer=tf.train.AdamOptimizer(), \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(trainingimagesarr, trainingimagesarrlabel, epochs=1, callbacks=[tbCallBack])\n\r\n\r\nПеред обучением вся numpy матрица была поделена на 255, дабы давать на вход нейросети числа в диапазоне от 0 до 1.\r\n\r\ntrainingimagesarr = trainingimagesarr / 255.0\ntrainingimagesarrlabel = np.array(trainingimagesarrlabel)-1\n\r\nТеперь я могу вызвав функцию:\r\n\r\ndef realtest():\n  cap = cv.VideoCapture()\n  cap.open('http://**.**.***.***:***/*****CG?container=mjpeg&stream=main')\n  hasFrame, frame = cap.read()\n  frame = frame[100:200, 300:750]\n  quantframe = frame[0:100,275:325]\n  quantframe = contoursfinder(quantframe)\n  return model.predict(np.array([quantframe]))[0][1]>0.60\n\r\nполучить данные о наличии автомобиля на стоянке.\r\n\r\nСильно не пинайте, но чуть-чуть :-)\r\n\r\nСпасибо!	https://habr.com/ru/post/440608/	1ef080ca-09a9-474e-afa6-71cea68b971e
23	1С и Яндекс.Облако Compute Cloud. Вдоль и поперек	1С 1С Предприятие Яндекс Яндекс.Облако 1С-Битрикс Администрирование баз данных Облачные вычисления Облачные сервисы	Бороться и искать. Найти и перепрятать.\r\nДостаточно популярная поговорка во времена Союза.\r\nВот и сейчас, те у кого сервер 1С в локальной сети мечтают вынести его в облако, а те у кого в облаке прикупить свой в локальную сеть.\r\n7 декабря 2018 г. AlexandrSurkov пригласил желающих: Яндекс открывает Облако. Архитектура новой платформы\r\nКак у обычного пользователя у меня не нашлось чем занять этот ресурс, но как 1С-ник я подумал: А пуркуа бы и не па ? И попробовал положить в облако от Яндекса 1С Предприятие.\r\n\r\nТестирование Яндекс.Облако Compute Cloud для 1С Предприятие оставило у меня приятное впечатление. \r\nВозможно кто-то повторит его и внесет больше ясности в настройки виртуальных серверов, использованию API и так далее. Интересующихся прошу продолжить чтение…\r\n\r\n\r\n\r\n\r\n\r\nЭпиграф:\r\nРаньше я хранил деньги дома под диваном.\r\nВолновался конечно. Возвращаясь с работы проверял как там они.\r\nЧтобы это исправить я отнес их в банк.\r\nСейчас я волнуюсь еще больше.\r\nТеперь мне надо ходить проверять на месте ли мой банк.\r\nвыступление стендап\r\n\r\nПостановка задачи\r\nНе считаю лучшим решением выносить работу с 1С из локальной сети в облако. Но времена меняются и на текущий момент я хотя бы представляю специфику компании, которой это может быть полезно. Если ее деятельность завязана на интернет-торговлю. Тогда как раз важнее, чтобы интернет-магазины и 1С Предприятие были как можно ближе друг к другу. И для такой компании облачная инфраструктура это отличный выход, плюс экономия на офисе.\r\nПриходит мужик в магазин «Запчасти», спрашивает:\r\nЕсть запчасти на Ниву?\r\nЕсть, что конкретно надо?\r\nНу, там,… проволока, изолента…\r\nЕсть конечно. Странная у вас Нива. Запчасти от УАЗа подходят…\r\nанекдот.ру*\r\n\r\n\r\nНе надо забывать и о том, что Яндекс пришел на поле виртуальных серверов с большим опозданием. За это время здесь уже успели сложиться некоторые стереотипы и определились лидеры.\r\n\r\nОчевидно, что в Яндексе за прототип брали AWS или AZURE, а они не сильно подходят для хостинга 1С\r\nпо психологическим соображениямФинансовому директору и руководству в целом не интересны варианты оплаты «за ресурсы», они хотят заплатить в месяц определенную сумму и получить гарантированное качество. Можно конечно в нерабочее время останавливать сервера и подэкономиться, но обычно есть жаворонки которые работают с утра, есть совы, которые работают по ночам, а есть дятлы, которые работают круглосуточно. а по выходным с утра еще и перфоратором\r\n\r\nОднако нет вещи, которую нельзя не приспособить в хозяйстве, предварительно обработав напильником, впереди были каникулы, и можно померять Яндекс.Облако вдоль и поперек.\r\nНовый Год у программиста от обычных дней отличается тем,\r\nчто рядом с кружкой кофе лежат мандаринки.\r\nанекдот.ру\r\nНовогодние каникулы длинные, на это время в моих руках оказались две годные вещи: серверный ключ 1С и облачный хостинг, поэтому я попробовал использовать время между оливье, шампанским и поздравлением Президента, по максимуму.\r\n\r\nЗаодно получился небольшой батл между Postgres vs Microsoft SQL (модная нынче тенденция) \r\nЗаодно получилось потестировать разные варианты замера производительности и получить ответы на некоторые вопросы\r\n\r\n\r\nОблако от Яндекс поддерживает как linux так и windows, так что вариантов наметилось четыре что, как оказалось в дальнейшем было неправильно, поскольку под разной нагрузкой сервера показали разные результаты.\r\n\r\nТем кто не любит много букв\r\n\r\nПри использовании при использовании Яндекс.Облако Compute Cloud не покидает ощущение невыносимой легкости бытия.\r\nЕще бы, для начала нужен только аккаунт от Яндекса и кредитная карта с 2 рублями на счету.\r\nИнтерфейс продуман и лаконичен, все действия интуитивно понятны.\r\nНа тестовый период выдается 4000 руб в теории этого должно хватить на предварительное знакомство.\r\nИ компанию с двумя — тремя десятками пользователей 1С оно должно полностью устроить.\r\nЦены чуть выше, чем у конкурентов размером поменьше (каламбур), но понятно, что здесь вы платите за бренд, так бывает всегда.\r\nИ за гарантированную надежность, так бывает не всегда. Еще не забылась история как в рубке с телеграмм падали коннекты с AWS.\r\nК тому же, немного подешевле, поприятнее и поудобнее — это все за бугром у империалистов, а Яндекс он наш, не будем забывать о ФЗ-152.\r\nПлюсами будут API и русскоязычная поддержка. Плюсов наверняка больше, с ними можно не один месяц разбираться.\r\nОсобенно если и хостинг интернет магазина будет там же.\r\nИз замеченных недостатков: отсутствует возможность загрузить свой преднастроенный образ диска с windows и подключить LiveCD.\r\n\r\nИтог: моя рекомендация к использованию.\r\n\r\nТаблицы результатов:\r\n\r\n\r\n\r\nНе сложно, без кулинарных изысков, работает.\r\nНаверняка со временем будет достаточное количество поклонников, это даст возможность обойти некоторые грабли, найдя их на форумах, перед тем как наступить.\r\nМуж стоит на напольных весах и старательно втягивает живот.\r\nПроходящая мимо жена ухмыляется: Думаешь это тебе поможет?\r\n-Конечно поможет, я стрелки увижу.\r\nанекдот.ру\r\n\r\nВ этой статье я не претендую на роль вселенского оракула.\r\n\r\nВозможно, результаты приведенные в ней отличаются от тех которые получите вы в Яндекс.Облако Compute Cloud, от тех которые получите вы на других хостингах.\r\nКак раз и цель ее — чтобы вы увидели стрелки. Иными словами — некая печка, от которой можно плясать при выборе сервера для 1С.\r\nОсновываясь не только на стоимости и эмпирических соображениях, но и результатах собственных или (возможно провайдеры тоже прочтут ее) тестов подготовленных провайдерами хостинга.\r\n\r\nТем кого много букв не пугает — будет еще много картинок, приступим\r\n\r\nВсе измерения, проведенные в этой статье подкреплены скриншотами, поэтому будет хорошим тоном, кроме вашего бесценного опыта и огромного багажа знаний подкрепить свои замечания в комментариях хоть чем то ответным.\r\n\r\n\r\n\r\nЗаманчиво было выбрать сразу образ с предустановленным Microsoft SQL Server 2016 Express, но этот вариант у меня не взлетел.\r\n\r\n\r\n\r\nНу может и взлетел, но низэнько. Сервер стартовал со 100% нагрузкой процессора, создаваемой Trusted installer и так с ней и продолжил жить.\r\nЯ так понимаю windows метнулся за обновлениями и поддержкой русского языка и там ему приглянулось.\r\nУстраивать танцы с бубном, когда по квартире уже витал запах жаренной курочки, не хотелось и виртуальная машина ушла в корзину.\r\n\r\nЗато полностью по инструкции Сервер 1С: Предприятие на Ubuntu 16.04 и PostgreSQL 9.6, для тех, кто хочет узнать его вкус. Рецепт от Капитана взлетел сервер на Ubuntu 16.04. 3926.72 Р в месяц\r\n\r\nУ Яндекса понятное дело предустановленный образ серверный, подключение идет по SSH\r\nпоэтому были доустановлены...Xfce desktop environment sudo apt-get install xfce4\r\nxrdp the remote desktop agent sudo apt-get install xrdp\r\nПосле этого к серверу появилась возможность подключиться по rdp и стартовать клиентскую часть 1С Предприятие\r\n\r\nИ конечно без всяких вопросов стартовал windows-2012 5754.22 Р в месяц\r\nНехитрыми вычислениями можно понять, что за лицензию Microsoft Windows Server 201(x) вы отдаете 1827.50 Р в месяц\r\nИспользовать свою лицензию я так понимаю пока нельзя.\r\nЗаполучив сервера, осмотримся. А именно запустим тесты crystal disk mark, winrar и 7zip. \r\nЗачем тест архиваторами? Затем что через 10 минут можно понять, что за сервер перед тобой по быстродействию (оставив надежность за скобками, это за 10 минут не поймешь)\r\nПоказатели в принципе средние.\r\n\r\n\r\n\r\nРовные показатели жесткого диска, в моем сегменте такие не часто встретишь, обычно что то завалено.\r\nДля виртуальной машины с windows 2016 несколько другие. Возможно скорость доступа к диску зависит от общей нагрузки физического железа (просто как предположение).\r\n\r\nСкорость доступа в интернет впечатляет.\r\n\r\nЗагадочно было, что при заявленном физическом размещении в РФ, реклама показывается на финском языке. Позже с этим разобрался почитав блог Яндекса\r\nПосмотрев свойства сетевого адаптера можно предположить на чем собран хост.\r\n\r\n\r\nСтартуем тесты посерьезнее\r\n\r\nHammerDB TPC-C — подробное описание здесь же на Хабре в статье\r\nТем более, что и на Ubuntu и Windows сервера можно установить как Postgres так и Microsoft SQL\r\nСервер Postgres 9.6 на момент подготовки статьи — максимальный из поддерживаемых 1С.\r\nНастройки Postgres — рекомендованные 1С, за исключением 1 параметра, с ним не срослось, сервер просто не стартовал.\r\nПодробнее...\r\nС высокой долей вероятности дело в виртуальности дисков, на которую не закладывались при написании инструкции.\r\n\r\n\r\nРезультат связки Ubuntu Postgres\r\n\r\n\r\nРезультат связки Ubuntu MS SQL\r\n\r\n\r\nИзмерив сервер Ubuntu можно увидеть что, на двух виртуальных пользователях результаты Microsoft SQL получше.\r\nНа сервере Windows даже при таком измерении Microsoft SQL опережает Postgres значительно.\r\nРезультат связки Windows + Postgres, получше Ubuntu + Postgres, но не намного\r\n\r\n\r\n\r\nРезультат связки Windows + Microsoft SQL — абсолютный лидер\r\n\r\n\r\nПри увеличении нагрузки сервер от Microsoft масштабируется линейно\r\n\r\n\r\n(\r\n\r\nТак же линейно растет загрузка по всем показателям\r\n\r\n\r\nА вот Postgres 50 виртуальных пользователей не потянул и на 20 уперся в очередь к диску\r\n\r\n\r\nЗамер же на Ubuntu на 20 виртуальных пользователях дал опять примерно похожие показатели\r\n\r\n\r\nUbuntu + Postgres\r\n\r\n\r\nUbuntu + Microsoft SQL\r\n\r\n\r\nПромежуточные выводы:\r\n\r\nPostgres на текущий момент лучше использовать в Linux, в Windows это могут быть проекты начального уровня с небольшой нагрузкой на сервер БД.\r\nMicrosoft подтвердил стабильность даже на чужом поле, на своем он лидирует безоговорочно.\r\nТак же без тюнинга ядра, дисковой подсистемы и т.п. Postgres даже в Linux устает раньше, зато при той нагрузке, которая ему по зубам он держит ее ровнее.\r\n \r\n\r\nНу и под крики: Мы же 1Сники, надо мерять из 1С, переходим к тестам на 1С\r\n\r\nздесь удалось проверить связки\r\n\r\nWindows + MS SQL\r\nWindows + Postgres\r\nUbuntu + Postgres\r\nUbuntu + MS SQL 2019 1С Предприятие не приняло (что и не удивительно)\r\n\r\n\r\nСервер 1С 32-х разрядный, сервер БД — 64-х разрядный\r\nВерсия платформы1С: Предприятие 8.3 (8.3.13.1644)\r\n\r\nНачинаем с тестf от gilev.ru\r\n\r\n\r\n\r\nЕсли верить ему, то связка Ubuntu + Postgres процентов 20% предпочтительнее вариантов Windows + Postgres и Windows + MS SQL\r\n\r\nРезультат несколько загадочный, предположить что виртуальным машинам Linux дается больше процессорной мощности у Яндекса конечно можно, но осторожно.\r\n\r\nПереходим к тестам  от fragster.ru\r\n \r\nЗдесь картина меняется и становится похожей на тесты от HammerDB.\r\nА также все рассказы об 1С и Postgres\r\nНа части тестов сервера идут «ноздря в ноздрю», на временных таблицах MS SQL значительно лучше.\r\n\r\n\r\n\r\n\r\nНо если по честному, всех интересует с какой скоростью работают конкретные пользователи в конкретной конфигурации и в основном в рабочее время.\r\n\r\nЭто с достаточной долей достоверности показывает APDEX, по крайней мере его использует 1С и оснований не доверять нет.\r\nПоэтому третий тест на 1С, это обыкновенная демо база 1С Бухгалтерский учет 3.0 и обработка имитирующая работу 30 пользователей, каждый из которых в интервале 30 секунд производит некоторое действие в информационной базе.\r\nПодробнее...Выбраны ключевые показатели типичные для работы обычной бухгалтерии — открытие форм справочников номенклатура и контрагенты, копирование и проведение документов поступление на расчетный счет и списание с расчетного счета и поступления и реализации товаров, а также открытие форм этих документов.\r\nЗамеры так же производятся типовой встроенной подсистемой конфигурации БСП Оценка производительности.\r\n\r\n\r\n\r\nСервер Windows + MS SQL и Ubuntu + Postgres дали на выходе самый максимально возможный результат\r\n\r\n\r\nПохуже отработала связка Windows + Postgres\r\n\r\n\r\nОднако отставание от лидера не ужас ужас, а припомнив стоимость лицензии MS SQL на 30 пользователей, так и совсем небольшое.\r\nПо крайней мере в оценку «хорошо» все уложились\r\nДля очистки совести был установлен на Windows Postgres 10, помнится в нем обещана лучшая совместимость.\r\nМожет я не знал о каком то волшебном параметре, но никакого профита он не дал\r\n\r\n\r\n\r\nРаз уж пошла такая пьянка (а пьянка как раз уже заканчивалась) все же был установлен на Windows Microsoft SQL 2019\r\n\r\n\r\n\r\nУ меня его результаты получились хуже всех предыдущих. Но тут собственно никто ничего и не обещал.\r\nПотрачено около половины, выделенных на тестирование средств.\r\n\r\n\r\nНа этом месте можно подвести полный итог — Яндекс.Облако Compute Cloud хоть и новый, но очень достойный игрок на рынке облачных серверов\r\nВ том числе и для хостинга инфраструктуры 1С Предприятие для небольшого и среднего размера компаний, если им действительно нужен хостинг в облаке.\r\nВсе результаты этой статьи получены с минимальным количеством танцев с бубном или шаманством в настройках, скорее наоборот, легко и непринужденно.\r\nЧего и вам желаю.\r\nЖелающие что-то подтвердить, опровергнуть или еще раз уточнить для себя, не вижу что вас может остановить.\r\nЖелающие пригласить меня к подобным тестам или настройкам, аналогично.	https://habr.com/ru/post/440594/	1ef080ca-09a9-474e-afa6-71cea68b971e
24	Android Things перефокусируется на умные колонки и дисплеи	android things андроид iot интернет вещей madrobots	\r\n\r\nВ конце 2016 года корпорация Google представила обновленную платформу для интернета вещей, которая получила название Android Things. Тогда заявлялось, что эта платформа поддерживает разработку под Android, создатели собирались постепенно добавлять новые устройства, включая ntel Joule 570x, NXP Argon i.MX6UL и другие. \r\n\r\nСейчас руководство проекта решило изменить его позиционирование. Так что вместо всего спектра устройств интернета вещей платформа станет поддерживать лишь умные колонки и дисплеи: «Фиксируя успех, которого мы с нашими партнерами достигли в сфере умных колонок и дисплеев, мы изменяем направление работы и фокусируемся лишь на этих двух категориях». \r\n\r\nРанее Android Things был чем-то вроде специализированной платформы для IoT девайсов. Цель и была создать быструю операционную систему, под управление которой можно было бы поставить интернет-системы. Таким образом, можно было решить проблему фрагментации программных платформ для устройств интернета-вещей. \r\n\r\n\r\n\r\nПрактически каждый разработчик считает сейчас нужным создать для своего IoT-девайса собственную программную оболочку. Их великое множество, и большинство из них имеет лишь базовую защиту от внешних угроз. Android защищен от них относительно неплохо, поэтому можно было надеяться, что с приходом Android Things ситуация с IoT-гаджетами и их защитой значительно улучшится. \r\n\r\nТе системы, которые находились бы под управлением новой ОС, получали бы централизованные обновления, включая апдейты безопасности. Сейчас разработчики проприетарных девайсов обновляют их как бог на душу положит, в некоторых случаях апдейты вообще не выходят. А так поставщику аппаратного решения не нужно было бы беспокоиться о программной части — все это на себя взяла бы корпорация Google. Android Things должна была стать своеобразным центром подключаемой мелкой электроники.\r\n\r\nК сожалению, не все планы были реализованы. Сама ОС, которая была анонсирована несколько лет назад, получила версию 1.0 лишь девять месяцев назад. До этого момента компания проводила лишь масштабные тестирования своего продукта. \r\n\r\nНу а первым коммерческим продуктом, который поставлялся с Android Things стал Lenovo Smart Display.\r\n\r\nПочему ничего не вышло?\r\nНекоторые специалисты считают, что Android Things получилась слишком «тяжелой» для малых гаджетов. Маломощные устройства просто не могут работать с этой ОС, пускай она и «легкая» по сравнению с Adnroid. Корпорация Google не поставила на рынок ни одного собственного девайса с Adnroid Things. Некоторые умные гаджеты, которые она представила, работали на основе Google Cast Platform — той программной платформы, под управлением которой работает Chromecast. \r\n\r\n\r\n\r\nОС поддерживает «System on Module» (SoM) — платы, характеристики которых хоть и не слишком высокие, но и маломощными они не являются. Snapdragon 212 CPU, 1 ГБ ОЗУ и 4 ГБ внутренней памяти — весьма неплохо. \r\n\r\nЧто дальше? \r\nПоскольку главных успехов Google достигла с Android Things с умными колонками и дисплеями, то остановиться решено именно на этом этапе. Системы-модули на базе таких чипов, как NXP, Qualcomm и MediaTek в будущем поддерживаться не будут. \r\n\r\n\r\n\r\nNXP i.MX7D и Raspberry Pi 3B останутся в списке поддерживаемых девайсов, так что разработчики смогут на этой базе создавать новые решения. Образы для плат можно будет получить при помощи консоли Adnroid Things. Через консоль можно будет управлять максимум сотней устройств если говорить о некоммерческой версии платформы. \r\n\r\nНу а для других IoT-устройств корпорация предлагает сервис Cloud IoT Core для будущей среды Cloud IoT Edge. Кроме того, Google обещает разработать специализированные платы для приложений, где используются технологии машинного обучения. \r\n\r\nНу и не стоит забывать о (все еще) экспериментальной Fuchsia OS. Журналисты Bloomberg сообщали, что Fuchsia поступит на рынок программных платформ для потребительских устройств в 2021 году. \r\n\r\n\r\n	https://habr.com/ru/company/madrobots/blog/440636/	1ef080ca-09a9-474e-afa6-71cea68b971e
25	Даннинг с Крюгером, Сократ и круги знаний	Сократ Даннинг-Крюгер круги знаний	Меня давно занимает тема познания. Так я столкнулся с изречением Сократа — «Я знаю, что ничего не знаю», с эффектом Даннинга-Крюгера. Уверился в истинности этих концепций. Увидел их взаимосвязь. А кроме того мне у меня появилась уверенность, что можно математически обосновать наличие эффекта Даннинга-Крюгера.\r\nЭффект Даннинга-Крюгера\r\nЭффект Да́ннинга—Крю́гера — метакогнитивное искажение, которое заключается в том, что люди, имеющие низкий уровень квалификации, делают ошибочные выводы, принимают неудачные решения и при этом неспособны осознавать свои ошибки в силу низкого уровня своей квалификации.\r\nНиже показан упрощенный график с демонстрацией эффекта Даннинга — Крюгера.\r\n\r\nГрафик с демонстрацией эффекта Даннинга — Крюгера не дает нам никаких объяснений происходящего. Но дает нам лишь надежду, что можно выбраться из Долины отчаяния. График очень ровный и относительно неплохо отражает действительность. Для использования в психологии такого графика его почти достаточно. Иногда он вводит в заблуждение. Например, судя по графику выбравшись однажды из Долины отчаяния ты никогда в нее не вернешься. На практике выходит так, что возвращаешься и не раз. Однако такой график это хорошая отправная точка для дальнейших изысканий. \r\nГрафик функций это математический инструмент и возможно существует какая-то функция, которая нам поможет математически обосновать проявление самого эффекта.\r\nСократ\r\nЭффект Да́ннинга — Крю́гера некоторым образом перекликается с изречением Сократа — «Я знаю, что ничего не знаю».\r\nАналогичные идеи можно проследить в трудах других мыслителей, которые желающие могут прочитать самостоятельно.\r\nСмысл выражения можно наглядно представить следующим образом: вообразим, что всё наше знание — это внутренность шара, а незнание — внешность шара. Чем больше становится наше знание, тем больше становится площадь поверхности шара, а следовательно наше «соприкосновение» с незнанием.\r\nКруги Знаний\r\nМне представляется правильным рассуждение про шар знаний. Но термин Шар знаний звучит как-то антинаучно. Заменим шар знаний на круг знаний. А точнее кругами знаний. Таких кругов четыре:\r\n\r\nЯ знаю.\r\nЯ знаю, что я не знаю. Осознанное непознанное.\r\nЯ не знаю, что я не знаю. Это все знание человечества.\r\nАбсолютное знание.\r\n\r\n\r\nКаждый из внешних кругов полностью включает в себя внутренний круг.\r\n3 и 4 круги одинаковые для всего человечества. 1 и 2 круги для каждого человека индивидуальны.\r\nОбычно расширение первого круга способствует расширению и второго круга. Каждое расширение второго круга приближает нас к границе третьего круга. Если скорость роста второго круга будет намного больше скорости роста первого круга человек неизбежно попадает в Долину отчаяния на графике эффект Даннинга — Крюгера.\r\nМатематическое обоснование эффекта Даннинга-Крюгера\r\n\r\nДавайте разберемся что происходит с человеком в процессе познания и как это связано с эффектом Даннинга-Крюгера.\r\nОбозначения\r\n\r\nК1 = Я знаю.\r\nК2 = Я знаю, что я не знаю. Осознанное непознанное.\r\nК3 = Я не знаю, что я не знаю. Это все знание человечества.\r\nК4 = Абсолютное знание.\r\n\r\nНовичок\r\nК1 очень маленький. K2 чуть больше, чем К1.\r\nВ процессе познания К1 растет быстрее, чем К2.\r\nПик Глупости\r\nК1 догоняет К2. К2 очень далек от К3.\r\nДолина отчаяния\r\nК2 очень сильно вырастает. Такое бывает после перехода на крупные проекты с очень маленьких, посещения конференций или начала прослушиваний подкастов.\r\nК1 не успевает за увеличением К2.\r\nСразу становится понятно что нужно делать, чтобы выбраться из Долины Отчаяния. Нужно прокачивать существующие знания (К1). Можно ограничить рост К2. Такое стоит осознанно делать если вам абсолютно некомфортно в Долине Отчаяния. Лично мне комфортно ссылаться на Сократа и оставаться в Долине Отчаяния.\r\nНужно понимать, что даже в этой долине нет стагнации. Объем ваших знаний все равно растет. Но растет и осознанное непознанное (К2). По ощущениям вы остаетесь в этой долине. Однако продолжайте свое развитие. И тогда К1 начнет догонять К2 и выберетесь на Склон Просветления.\r\nСклон Просветления\r\nК1 растет быстрее чем К2.\r\nВот что нужно сделать, чтобы рост К1 опережал рост К2:\r\n\r\nНачать более интенсивно изучать свою область.\r\nВыбрать более узкую специализацию.\r\nОграничить рост К2 \r\n\r\nперестать слушать подкасты;\r\nперестать посещать конференции;\r\ndownshifting.\r\n\r\n\r\nСпособы 1-2 хороши. Способ 3 стоит применять при наличии психологических проблем.\r\nПлато Стабильности\r\nК1 догоняет К2. Такое уже было с нами на Пике Глупости.\r\nПлато Стабильности от Пика Глупости отличается только соотношением К2 и К3. На Плато Стабильности К2 должно быть очень близким к К3. Однако распознать это непросто. Ведь на предыдущем этапе у нас рост К2 был очень сильно ограничен. Посмотрите внимательно вокруг.\r\nПравильный график уверенности в своих знаниях\r\nЭтот график показывает зависимость уверенности от собственных знаний. Он похож на график из эффекта Даннинга-Крюгера, но будут и отличия.\r\nПредположим, что уверенность в знаниях равна отношению объема собственных знаний к объему знаний второго круга (К1/К2). Оба параметра изменяются со временем.\r\n\r\nЛинии на графике:\r\n\r\nСиняя линия показывает уверенность в собственном знании. \r\nКрасная линия показывает размер второго круга знаний.\r\nЗеленая линия показывает разность между объемом знаний второго круга и объема собственных знаний (К2-К1).\r\nПосмотреть на таблицу с данными и графиком можно тут.\r\n\r\nВывод\r\nФункция уверенности в своих знаниях выглядит так:\r\nУверенность в знаниях = K1/K2.\r\nГде К1 собственные знания, а К2 осознанное непознанное.\r\nВыбраться из Долины Отчаяния можно. Но можно туда и вновь вернуться с большим объемом знаний чем первый раз. \r\nЛюди, которые на самом деле двигают науку вперед, перманентно находятся в Долине Отчаяния, потому что у них...	https://habr.com/ru/post/440602/	1ef080ca-09a9-474e-afa6-71cea68b971e
26	Использование точечных диаграмм для визуализации данных	machine learning машинное обучение визуализация данных гистограммы диаграммы	Привет, Хабр! Представляю вашему вниманию перевод статьи «Everything you need to know about Scatter Plots for Data Visualisation» автора George Seif. \r\n\r\nЕсли вы занимаетесь анализом и визуализацией данных, то скорее Вам придется столкнуться с точечными диаграммами. Несмотря на свою простоту, точечные диаграммы являются мощным инструментом для визуализации данных. Манипулируя цветами, размерами и формами можно обеспечить гибкость и репрезентативность точечных диаграмм.\r\n\r\nВ этой статье вы узнаете практически все, что вам необходимо знать о визуализации данных используя точечные диаграммы. Мы постараемся разобрать все необходимые параметры в их использовании в коде python. Также вы можете найти несколько практических уловок.\r\n\r\nПостроение регрессии\r\nДаже самое примитивное использование точечной диаграммы уже дает сносный обзор наших данных. На рисунке 1 мы уже можем видеть островки объединённых данных и быстро выделить выбросы.\r\n\r\n\r\nРисунок 1\r\n\r\n\r\nУместно проведенные регрессионные линий визуально упрощает задачу выявления точек, близких к середине. На рисунке 2 мы провели линейный график. Довольно легко увидеть, что в данном случае линейная функция не репрезентативен, так как многие точки находятся довольно далеко от линии. \r\n\r\n\r\nРисунок 2\r\n\r\n\r\nРисунок 3 использует полином порядка 4 и выглядит гораздо более многообещающе. Похоже, что для моделирования этого набора данных нам определенно понадобится полином порядка 4.\r\n\r\n\r\nРисунок 3\r\n\r\n\r\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = sns.load_dataset('iris')\n \n# A regular scatter plot\nsns.regplot(x=df["sepal_length"], y=df["sepal_width"], fit_reg=False)\nplt.show()\n \n# A scatter plot with a linear regression fit:\nsns.regplot(x=df["sepal_length"], y=df["sepal_width"], fit_reg=True)\nplt.show()\n\n# A scatter plot with a polynomial regression fit:\nsns.regplot(x=df["sepal_length"], y=df["sepal_width"], fit_reg=True, order=4)\nplt.show()\r\nЦвет и форма точек\r\nЦвет и форму можно использовать для визуализации различных категорий в вашем наборе данных. Цвет и форма визуально очень понятны. Когда вы смотрите на график, где группы точек имеют разные цвета наших фигур, сразу становится очевидным, что точки принадлежат разным группам. \r\n\r\nНа рисунке 4 показаны классы, сгруппированные по цвету. На рисунке 5 показаны классы, разделенные по цвету и форме. В обоих случаях намного легче увидеть группировку. Теперь мы знаем, что будет легко отделить класс setosa, и на что мы должны сосредоточить внимание. Также ясно, что один линейный график не сможет разделить зеленую и оранжевую точки. Поэтому нам нужно добавить что-то для отображения больше измерений.\r\n\r\nВыбор между цветом и формой становится вопросом предпочтения. Лично я нахожу цвет немного более четким и интуитивно понятным, но выбор остается всегда за Вами.\r\n\r\n\r\nРисунок 4\r\n\r\n\r\n\r\nРисунок 5\r\n\r\n\r\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = sns.load_dataset('iris')\n \n# Use the 'hue' argument to provide a factor variable\nsns.lmplot( x="sepal_length", y="sepal_width", data=df, fit_reg=False, hue='species', legend=False)\nplt.legend(loc='lower right')\nplt.show()\n\nsns.lmplot( x="sepal_length", y="sepal_width", data=df, fit_reg=False, hue='species', legend=False, markers=["o", "P", "D"])\nplt.legend(loc='lower right')\nplt.show()\r\nМаргинальная гистограмма\r\nПример графика с маргинальными гистограммами показан на рисунке 6. Маргинальные гистограммы наложены сверху и сбоку, представляют собой распределение точек для объектов вдоль абсциссы и ординате. Это небольшое дополнение отлично подходит для более точного определения распределения точек и выбросов.\r\n\r\nНапример, на рисунке 6 мы очевидно видим высокую концентрацию точек около разметки 3,0. И благодаря этой гистограмме можно определить уровень концентрации. В правом боку видно, что вокруг разметки 3,0 есть как минимум втрое больше точек, чем для любого другого дискретного диапазона. Также с помощью правой боковой гистограммы можно с очевидностью распознать, что очевидные выбросы находятся выше отметки 3,75. По верхней диаграмме видно, что распределение точек по оси Х является более равномерным, за исключением выбросов в крайнем правом углу.\r\n\r\n\r\nРисунок 6\r\n\r\n\r\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = sns.load_dataset('iris')\n \nsns.jointplot(x=df["sepal_length"], y=df["sepal_width"], kind='scatter')\n\nplt.show()\r\nПузырьковые диаграммы\r\nС помощью пузырьковых диаграмм нам необходимо использовать несколько переменных для кодирования информации. Новым параметром, свойственный для этого вида визуализацией, является размер. На рисунке 7 мы показываем количество съеденного картофеля фри разрезе роста и веса съевших людей. Обратите внимание, что точечная диаграмма — это всего лишь инструмент двухмерной визуализации, но при использовании пузырьковых диаграмм мы умело можем отображать информацию с тремя измерениями.\r\n\r\nЗдесь мы используем цвет, положение и размер, где положение пузырьков определяет рост и вес человека, цвет определяет пол, а размер определяется количеством съеденной картошки фри. Пузырьковая диаграмма с легкостью позволяет нам удобно объединить все атрибуты в один график, чтобы мы могли видеть информацию большого размера в двухмерном виде.\r\n\r\n\r\nРисунок 7\r\n\r\n\r\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\nx = np.array([100, 105, 110, 124, 136, 155, 166, 177, 182, 196, 208, 230, 260, 294, 312])\ny = np.array([54, 56, 60, 60, 60, 72, 62, 64, 66, 80, 82, 72, 67, 84, 74])\nz = (x*y) / 60\n\nfor index, val in enumerate(z):\n    if index < 10:\n        color = 'g'\n    else:\n        color = 'r'\n    plt.scatter(x[index], y[index], s=z[index]*5, alpha=0.5, c=color)\n\nred_patch = mpatches.Patch(color='red', label='Male')\ngreen_patch = mpatches.Patch(color='green', label='Female')\nplt.legend(handles=[green_patch, red_patch])\n\nplt.title("French fries eaten vs height and weight")\nplt.xlabel("Weight (pounds)")\nplt.ylabel("Height (inches)")\nplt.show()	https://habr.com/ru/post/440674/	1ef080ca-09a9-474e-afa6-71cea68b971e
27	Освобождаемся от обработки ошибок, устраняя ошибки	go errors рефакторинг обработка ошибок golang error handling	\r\n\r\nGo2 имеет целью уменьшить накладные расходы на обработку ошибок, но знаете ли вы, что лучше, чем улучшенный синтаксис для обработки ошибок? \r\n\r\nНе нужно обрабатывать ошибки вообще. Я не говорю «удалите ваш код обработки ошибок», вместо этого я предлагаю изменить ваш код так, чтобы у вас не было много ошибок для обработки.\r\n\r\nЭта статья черпает вдохновение из главы «Define Errors Out of Existence”» книги « A philosophy of Software Design» Джона Оустерхаута. Я постараюсь применить его совет к Go.\r\n\r\nПример первый\r\nВот функция для подсчета количества строк в файле:\r\n\r\nfunc CountLines(r io.Reader) (int, error) {\n        var (\n                br    = bufio.NewReader(r)\n                lines int\n                err   error\n        )\n\n        for {\n                _, err = br.ReadString('\\n')\n                lines++\n                if err != nil {\n                        break\n                }\n        }\n\n        if err != io.EOF {\n                return 0, err\n        }\n        return lines, nil\n }\n\r\nМы создаем bufio.Reader, затем сидим в цикле, вызывая метод ReadString, увеличивая счетчик до тех пор, пока не достигнем конца файла, а затем возвращаем количество прочитанных строк. Это код, который мы хотели написать, вместо этого CountLines усложняется обработкой ошибок. \r\n\r\nНапример, есть такая странная конструкция:\r\n\r\n_, err = br.ReadString('\\n')\nlines++\nif err != nil {\n  break\n}\n\r\nМы увеличиваем количество строк перед проверкой ошибки — это выглядит странно. Причина, по которой мы должны написать это таким образом, заключается в том, что ReadString вернет ошибку, если он встретит конец файла — io.EOF — до нажатия символа новой строки. Это может произойти также, если нет символа новой строки.\r\n\r\nЧтобы решить эту проблему, мы реорганизуем логику для увеличения числа строк, а затем посмотрим, нужно ли нам выходить из цикла (эта логика все еще не верна, вы можете обнаружить ошибку?).\r\n\r\nНо мы еще не закончили проверять ошибки. ReadString вернет io.EOF, когда достигнет конца файла. Это ожидаемо, ReadString нужен какой-то способ сказать стоп, больше нечего читать. Поэтому, прежде чем вернуть ошибку вызывающей стороне CountLine, нам нужно проверить, не была ли ошибка io.EOF, и в этом случае вернуть ее вызывающему, иначе мы вернем nil, когда все хорошо. Вот почему последняя строка функции не просто \r\n\r\nreturn lines, err\r\nЯ думаю, что это хороший пример наблюдения Расса Кокса о том, что обработка ошибок может затруднить работу функции. Давайте посмотрим на улучшенную версию.\r\n\r\nfunc CountLines(r io.Reader) (int, error) {\n        sc := bufio.NewScanner(r)\n        lines := 0\n\n        for sc.Scan() {\n                lines++\n        }\n\n        return lines, sc.Err()\n}\r\nЭта улучшенная версия переход от использования bufio.Reader к bufio.Scanner. Под капотом bufio.Scanner использует bufio.Reader, добавляя слой абстракции, который помогает убрать обработку ошибок, которая затруднила работу нашей предыдущей версии CountLines (bufio.Scanner может сканировать любой шаблон, по умолчанию он ищет новые строки).\r\n\r\nМетод sc.Scan() возвращает true, если сканер нашел строку текста и не обнаружил ошибку. Таким образом, тело нашего цикла for будет вызываться только тогда, когда в буфере сканера есть строка текста. Это означает, что наша переделанная CountLines правильно обрабатывает случай, когда нет завершающего символа новой строки. Также теперь правильно обрабатывается случай, когда файл пуст.\r\n\r\nВо-вторых, поскольку sc.Scan возвращает false при возникновении ошибки, наш цикл for завершится, когда будет достигнут конец файла или возникнет ошибка. Тип bufio.Scanner запоминает первую ошибку обнаруженную ошибку, и мы исправляем эту ошибку после выхода из цикла с помощью метода sc.Err().\r\n\r\nНаконец, buffo.Scanner позаботится об обработке io.EOF и преобразует его в nil, если конец файла достигнут без возникновения ошибки.\r\n\r\nПример второй\r\nМой второй пример вдохновлен записью Errors are values в блоге Роба Пайкса.\r\n\r\nПри работе с открытием, записью и закрытием файлов обработка ошибок есть, но не очень впечатляющая, поскольку операции могут быть заключены в помощники, такие как ioutil.ReadFile и ioutil.WriteFile. Однако при работе с сетевыми протоколами низкого уровня часто возникает необходимость в построении ответа напрямую с использованием примитивов ввода-вывода, поэтому обработка ошибок может начать повторятся. Рассмотрим этот фрагмент HTTP-сервера, который создает ответ HTTP / 1.1:\r\n\r\ntype Header struct {\n        Key, Value string\n}\n\ntype Status struct {\n        Code   int\n        Reason string\n}\n\nfunc WriteResponse(w io.Writer, st Status, headers []Header, body io.Reader) error {\n        _, err := fmt.Fprintf(w, "HTTP/1.1 %d %s\\r\\n", st.Code, st.Reason)\n        if err != nil {\n                return err\n        }\n        \n        for _, h := range headers {\n                _, err := fmt.Fprintf(w, "%s: %s\\r\\n", h.Key, h.Value)\n                if err != nil {\n                        return err\n                }\n        }\n\n        if _, err := fmt.Fprint(w, "\\r\\n"); err != nil {\n                return err\n        } \n\n        _, err = io.Copy(w, body) \n        return err\n}\r\nСначала мы создаем строку состояния, используя fmt.Fprintf, и проверяем ошибку. Затем для каждого заголовка мы записываем ключ и значение заголовка, каждый раз проверяя ошибку. Наконец, мы завершаем раздел заголовка дополнительным \\r \\n, проверяем ошибку и копируем тело ответа клиенту. Наконец, хотя нам не нужно проверять ошибку из io.Copy, нам нужно преобразовать ее из формы с двумя возвращаемыми значениями, которую io.Copy возвращает в одно возвращаемое значение, которое ожидает WriteResponse.\r\n\r\nЭто не только много повторяющейся работы, каждая операция, которая по сути есть запись байтов в io.Writer, имеет различную форму обработки ошибок. Но мы можем облегчить себе задачу, представив небольшой тип-обертку.\r\n\r\ntype errWriter struct {\n        io.Writer\n        err error\n}\n\nfunc (e *errWriter) Write(buf []byte) (int, error) {\n        if e.err != nil {\n                return 0, e.err\n        }\n\n        var n int\n        n, e.err = e.Writer.Write(buf)\n        return n, nil\n}\n\r\nerrWriter выполняет контракт io.Writer, поэтому его можно использовать для переноса существующего io.Writer. errWriter передает записи своему базовому устройству записи до тех пор, пока не будет обнаружена ошибка. С этого момента он отбрасывает любые записи и возвращает предыдущую ошибку.\r\n\r\nfunc WriteResponse(w io.Writer, st Status, headers []Header, body io.Reader) error {\n        ew := &errWriter{Writer: w} \n        fmt.Fprintf(ew, "HTTP/1.1 %d %s\\r\\n", st.Code, st.Reason)\n\n        for _, h := range headers {\n                fmt.Fprintf(ew, "%s: %s\\r\\n", h.Key, h.Value)\n        }\n\n        fmt.Fprint(ew, "\\r\\n")\n        io.Copy(ew, body)\n\n        return ew.err\n}\n\r\nПрименение errWriter к WriteResponse значительно улучшает ясность кода. Каждой из операций больше не нужно ограничивать себя проверкой ошибок. Сообщение об ошибке перемещается в конец функции, проверяя поле ew.err и избегая назойливого перевода возвращаемых значений io.Copy\r\n\r\nЗаключение\r\nКогда вы столкнетесь с чрезмерной обработкой ошибок, попробуйте извлечь некоторые операции в виде вспомогательного типа-обертки.	https://habr.com/ru/post/440386/	1ef080ca-09a9-474e-afa6-71cea68b971e
28	Бухгалтерские машины, IBM 1403, и почему 132 колонки – это стандарт для принтеров	принтеры табуляторы ibm	Задумывались ли вы о том, почему у принтеров так популярна ширина текста в 132 символа? Многие принтеры выдавали строки по 132 символа, например, прорывной Centronics 101 матричный принтер (1970), повсеместный терминал DECwriter II (1975), матричный принтер Epson MX-80 (1981), и Apple Daisy Wheel Printer (1983). Даже на ЭЛТ терминалах, например, на DEC VT100 (1978) была поддержка 132 колонок. Но откуда пошла популярность 132 колонок?\r\n\r\nИзучив вопрос, я пришёл к выводу о наличии двух ответов. Первый состоит в том, что в 132 колонках нет ничего особенного. Ранние принтеры были удивительно разнообразны в вопросе длины строк – среди них встречались строки длиной 50, 55, 60, 70, 73, 80, 88, 89, 92, 100, 118, 120, 128, 130, 136, 140, 144, 150 и 160 символов. Это говорит об отсутствии убедительных технических или коммерческих причин для использования именно 132 колонок. Вместо этого 132 колонки стали фактическим стандартом из-за популярности компьютера IBM 1401 и его высокоскоростного линейного принтера 1403, который печатал по 132 колонки.\r\n\r\nВторой, более интересный ответ, состоит в том, что различные факторы в истории обработки данных, некоторым из которых исполнилось уже сто лет, привели к стандартизации нескольких размеров распечатанного текста. Один из них стал стандартом для бумаги для линейного принтера, на которой умещалось 132 символа.\r\n\r\nКомпьютер IBM 1401 и принтер 1403\r\nПервым принтером, использовавшим 132 колонки, судя по всему, был IBM 1403, служивший устройством вывода для бизнес-компьютера IBM 1401. IBM 1401 был самым популярным компьютером в начале 1960-х, в основном из-за небольшой стоимости. Ранние компьютеры встречались только в крупных корпорациях, поскольку стоили дорого; аренда компьютера IBM 705 стоила $43 000 в месяц (в текущих ценах это почти $400 000). Но IBM 1401 можно было арендовать за $2500 в мес., что открывало доступ на этот рынок для бизнесов среднего размера, использовавших его для расчёта заработной платы, инвентаризации, бухгалтерии и других предпринимательских задач. В результате к середине 1960-х компании использовали более 10 000 компьютеров IBM 1401.\r\n\r\n\r\nПринтер IBM 1403 перед популярным бизнес-компьютером 1401 (справа) и плёночными накопителями 729 (слева)\r\n\r\nПринтер IBM 1403 был важной частью успеха 1401-го. Этот высокоскоростной линейный принтер мог печатать по 600 строк качественного текста в минуту, и считался лучшим по качеству принтером до появления лазерных. «Даже сегодня, принтер 1403 остаётся стандартом качества для высокоскоростной ударной печати», по крайней мере, с точки зрения IBM. К концу 1960-х половина бесконечных формуляров была напечатана на принтерах IBM 1403.\r\n\r\nИз-за большой популярности принтера, его формат в 132 колонки стал фактическим стандартом, и для обратной совместимости его стали поддерживать более поздние принтеры и терминалы. Бумага формата 14 7/8" × 11" с зелёными полосками и по сей день популярна, и продаётся в магазинах канцтоваров.\r\n\r\nБухгалтерские машины / табуляторы\r\nТеперь обсудим историю, приведшую к появлению 132 колонок на бумаге 14 7/8". Главным действующим лицом в ней является бухгалтерская машина, или табулятор. Сейчас эти машины почти позабыты, но в докомпьютерную эру они были основой обработки данных в бизнесе. История табуляторов восходит к переписи населения США 1890 года, когда Герман Холлерит изобрёл машину для табулирования данных (то есть, их подсчёта), хранящихся на перфокартах. Позднее табуляторы использовали реле и электромеханические счётчики для суммирования значений, их «программировали» на выполнение различных задач при помощи коммутационных панелей с проводами, и он могли обрабатывать до 150 перфокарт в минуту.\r\n\r\n\r\nЭлектрическая бухгалтерская машина IBM 403. Слева видна коммутационная панель с жёлтыми проводами. Сверху видна каретка принтера. Карточки скармливаются в загрузочный лоток слева.\r\n\r\nМожет сбивать с толку тот факт, что словом «табулятор» обозначали две разные машины. Исторически «табулятором» называли человека, составляющего таблицы. Первым типом машины под названием «табулятор» была работающая с перфокартами машина Холлерита, обрабатывавшая перфокарты для переписи населения 1890 года. Отметим, что эти табуляторы отображали выходные данные на циферблатах, и не печатали ничего, в том числе – никаких таблиц.\r\n\r\n\r\nКопия табулятора Холлерита. Карты вставлялись вручную справа, а циферблаты показывали результаты.\r\n\r\nВторым типом табулятора была табуляторная пишущая машинка (1890). Это просто были пишущие машинки с остановками, позволявшими легко печатать информацию в виде таблиц (кнопка tab на современной клавиатуре происходит именно от этих машинок). У десятичного табулятора (1896) было несколько клавиш tab, позволявшие делать отступы для чисел, состоявших из одного, двух, трёх и т.п. знаков.\r\n\r\n\r\nПечатная машинка Underwood 6 с десятичным табулятором (1934)\r\n\r\nПозднее табуляторы от IBM, работавшие с перфокартами, получили принтер и возможность выводить данные с отступами, став, таким образом, табуляторами в обоих смыслах. Вскоре после этого IBM перестала называть их табуляторами и стала называть электронными бухгалтерскими машинами (Electric Accounting Machine, EAM; 1934).\r\n\r\nК 1943 году табуляторы были популярны у коммерческих предприятий и правительств; IBM обслуживала порядка 10 000 табуляторов. Эти машины были сложными, они могли обрабатывать условия, добавляя или вычитая данные с тремя уровнями промежуточных значений, и форматировать алфавитно-цифровой вывод. Бухгалтерские машины использовались для разнообразных задач по обработке данных – бухгалтерии, инвентаризации, выставления счетов, выдачи чеков, распечатки почтовых этикеток или даже налоговых форм W-2. И хотя они разрабатывались для коммерческого применения, в 1930-х и 40-х они использовались и в научных целях, наиболее известной из которых была симуляция ядерной бомбы в Манхэттенском проекте.\r\n\r\nБухгалтерская машина IBM 285 (1933)\r\nСамые ранние табуляторы выводили результаты на механических счётчиках, и оператору приходилось записывать их после каждого промежуточного итога. Разработка печатного устройства для табулятора в 1920-х устранила этот неудобный ручной этап. Одним из популярных печатающих табуляторов был IBM 285, представленный в 1933. Эта машина печатала значения, используя от 3 до 7 «печатных наборов», каждый из которых состоял из 10 брусков с цифрами. На картинке ниже показан вывод в 7 колонок, созданный 285-м табулятором с семью печатными наборами.\r\n\r\n\r\nВывод IBM 285 Electric Accounting Machine, с 7 колонками. Используется стандартное для печатных машинок межстрочное расстояние (6 строк на дюйм), с удвоенным расстоянием между строками. Заголовки печатались на формах заранее.\r\n\r\nРасстояние между символами составляло 5/32" (важность этого значения проявится позже), что давало колонки шириной в 1 7/8". Такое расстояние было на 50% больше стандарта печатных машинок (10 символов на дюйм), хотя табуляторы использовали стандартное межстрочное расстояние (6 строк на дюйм). Как видно на картинке, это приводило к большим пробелам между символами. Так почему же бухгалтерская машина использовала расстояние между символами в 5/32"? Чтобы понять это, надо перенестись на десять лет назад.\r\n\r\nУ ранних перфокарт от IBM было 45 столбцов с круглыми отверстиями, расположенными на расстоянии 5/32" друг от друга. На картинке ниже показана одна из таких карт. В каждом столбце было одно отверстие, обозначающее цифру от 0 до 9. Одна из машин, использовавшихся для работы с перфокартами, была «интерпретатором». Она считывала карту и распечатывала её содержимое на её верхней части, над отверстиями. Интерпретатор использовал механизм печати на 45 колонок, а печатающие штанги были расположены на расстоянии 5/32" друг от друга, так, чтобы совпадать с отверстиями.\r\n\r\n\r\n45-колоночная перфокарта IBM из начала 1920-х. Карта использовала круглые отверстия, в отличие от прямоугольных, на более «современных» 80-колоночных перфокартах\r\n\r\nВ 1928 году IBM представила «современную» перфокарту, на которой содержалось 80 колонок данных (см. ниже). Карты использовали прямоугольные отверстия, чтобы их можно было расположить ближе друг к другу (на расстоянии 0,087" друг от друга). Однако IBM сохранила многие механизмы, разработанные для 45-колоночных карт с их расстоянием в 5/32". В результате появились такие рассогласованные продукты, как интерпретатор IBM 550 (1930), который читал 80-колоночную перфокарту и распечатывал у неё наверху 45 символов. В результате символы не были выровнены по отверстиям, как можно увидеть ниже. По той же причине 285-я бухгалтерская машина использовала принтер с печатающими штангами с расстоянием в 5/32", хотя работала с 80-колоночными перфокартами.\r\n\r\n\r\nИнтерпретатор карт IBM 550 считывал данные с 80-колоночной перфокартуы и распечатывал 45 символов этих данных наверху\r\n\r\nБухгалтерские машины IBM 405 (1934) и 402 (1948)\r\nТабулятор IBM 285 мог распечатывать только цифры, но в 1934 году IBM представила 405-й табулятор, который мог печатать буквенно-цифровую информацию, за которым последовала улучшенная 402-я бухгалтерская машина в 1948-м. Алфавитно-цифровой вывод значительно расширил возможности использования табулятора, поскольку теперь он мог печатать счета, ярлыки с адресами, записи о сотрудниках или другие формы, где требовались буквенно-цифровые данные. У IBM 405 было 88 печатных штанг, двигавшихся по вертикали для печати строки выходных данных (см. ниже). Обратите внимание на щель между блоками штанг, где помещается резиновая направляющая.\r\n\r\n\r\nIBM 405 печатала при помощи двух наборов печатающих штанг: 43 буквенно-цифровых слева и 45 цифровых справа.\r\n\r\nНа рисунке ниже показан пример выдачи 405-го табулятора, где слева видны буквенно-цифровые символы. Как и у более ранних табуляторов, расстояние между символами в 5/32" приводит к широко расставленным символам. Заголовки и рамки табулятор не печатал, они были заранее напечатаны на форме.\r\n\r\n\r\nВыходные данные табулятора IBM 405, в виде счёта. Судя по всему, тогда кокаин был обычным продуктом.\r\n\r\nСначала формы представляли собой листки бумаги, подаваемые вручную, но затем для удобства их поменяли на формы постоянной подачи. Чтобы формы не соскальзывали, вдоль краёв бумаги стали делать перфорацию, чтобы формы можно было подавать при помощи штырьковых механизмов. Часто у этих форм использовалась полоска шириной в 1/2" по краям, которую можно было удалять вместе с перфорацией. Поэтому расстояние от отверстия с одного края до отверстия с другого было на 1/2" уже общей ширины, а участок, где можно было вести печать, был на 1" уже общей ширины.\r\n\r\nПредприятия заказывали специально сделанные под их нужды формы, но обычно эти формы делали стандартной ширины. И, как ни удивительно, эти, казалось бы, произвольно выбранные размеры всё ещё остаются стандартными и сегодня. Многие из стандартных форм имеют ширину, округлённую до целых дюймов, вроде 8" и 11", однако встречаются и странные значения, к примеру, 27/32" или 18 15/16". \r\n\r\nРазмеры, кратные 1 7/8", произошли от табулятора IBM 286, у которого можно было установить от 3 до 7 печатающих наборов шириной в 1 7/8". В результате и родились такие стандарты ширины форм, как 8", 9 7/8", 11 3/4", 13 5/8" и 15 1/2" (с учётом небольших полей). Многие из стандартов затем округлили до целых дюймов, например, 11" и 16".\r\n\r\nШирина 12 27/32" произошла от папок-регистраторов с арочным механизмом для свободного крепления бумаг, которые появились в 1896. В 1916 производители таких папок собрались на конференцию в Атлантик-Сити, где договорились о стандартных размерах: 9 1/4"×11 7/8", 11 1/4"×11 7/8" и 7 1/2"×10 3/8". Два самых маленьких размера встречаются до сих пор. Чтобы поддерживать папки размером 11 7/8", IBM, очевидно, отрезала от бумаги 1/32", чтобы расстояние от отверстия до отверстия делилось на 5/32", что даёт 11 27/32". Добавление двух отступов для отверстий шириной в 1/2" по краям приводит к стандартной ширине формы 12 27/32". \r\n\r\nБольшая часть непонятных стандартов по ширине от отверстия до отверстия кратна ширине символа 5/32"; на картинке ниже я выделил их жёлтым. Думаю, что такой выбор кратности был сделан сознательно.\r\n\r\n\r\n\r\n88 символов 402-го как раз вписывался в форму ширины 14 7/8", а также являлся кратным 5/32". Думаю, поэтому бумага шириной 14 7/8" стала стандартной. Бумага такого формата с зелёными полосками используется и сегодня, причём стоит отметить, что она стала популярной ещё до появления коммерческих компьютеров.\r\n\r\nБухгалтерская машина IBM 407 accounting machine (1949)\r\nПоследователем бухгалтерской машины IBM 402 стала IBM 407, вышедшая в 1949-м. С нашей точки зрения наиболее важным в ней стало то, что она перешла с печатных штанг на печатные колёса [ещё не лепестковые печатные устройства, которые изобрели только в 1969 / прим. перев.]. На колесе по окружности было расположено по 47 знаков (букв, цифр и символов), и оно с большой скоростью вращалось, поворачиваясь для печати нужного знака. Табулятор использовал 120 колёс для печати 120 символов.\r\n\r\n\r\nПечатное колесо бухгалтерской машины IBM 407\r\n\r\nУзкие колёса позволяли 407-й печатать по 10 знаков на дюйм (стандартное количество для печатной машинки). Ниже показан пример того, как табулятор мог выписывать чеки на заранее напечатанных формах. Вывод 407-го больше похож на обычную печать на машинке, чем широко расставленные символы моделей 405 и 402.\r\n\r\n\r\nПример вывода бухгалтерской машины IBM 407\r\n\r\nВ инструкции к 407-й описано, как составлять для неё формы и перечислено 11 стандартных размеров форм. Несмотря на переход от знаков 5/32" до более узких знаков шириной 0,1", большинство новых стандартных форм совпадали по ширине со старыми для 402-й (я отметил их зелёным). Компания отказалась от многих странных вариантов ширины (к примеру, 17 25/32"), но размеры 13 5/8" и 14 7/8" сохранились, что окажется важным позже.\r\n\r\n\r\nСтандартная ширина форм для IBM 407\r\n\r\nПринтер IBM 1403 (1959) и его 132 колонки\r\nИ, наконец, мы приходим к линейному принтеру 1403 (1959). Этот принтер поддерживал длину строки в 100, 120 и 132 знака при 10 знаках на дюйм. 120 символов в строке, очевидно, полезно для обратной совместимости с 407. Но что насчёт 132 символов?\r\n\r\nВ форму шириной 13 5/8" удобно помещаются в 120 знаков в строке, которые выдавал 407-й (или 1403-й), оставляя небольшие поля. Следующим по размеру стандартом был 14 7/8". Увеличение ширины на 1,25" давало возможность добавить 12,5 знаков. Поэтому переход со 120 на 132 знака был очевидным улучшением продукта, поскольку теперь он подходил для следующей стандартной ширины формы. Одно лишь возражение – 130 знаков кажутся более осмысленным и круглым числом – у принтера UNIVAC в строке было 130 знаков – так почему же не использовать 130 вместо 132? Из-за сложной системы выравнивания цепочки и печатных молоточков 1403-го, лучше подходит длина строки, делящаяся на 3 (к примеру, 132). Подозреваю, это была главная причина, по которой IBM 1403 использовал 132 знака в строке вместо 130. Ширина в 128 знаков могла показаться более подходящей, являясь степенью двойки, но на самом деле 1401 была десятичной машиной, поэтому никаких преимуществ у 128 нет.\r\n\r\n\r\nПринтер IBM 1403, выдающий множество Мандельброта на стандартной бумаге 14 7/8"×11" с зелёными полосками. Слева стоит компьютер IBM 1401\r\n\r\nЗаключение\r\nПодводя итоги моей гипотезе, можно сказать, что строка длиной в 132 знака на бумаге шириной 14 7/8" происходит от измерений перфокарт более чем столетней давности. Ранние 45-колоночные перфокарты IBM привели к созданию печатных механизмов с большими интервалами между знаками шириной в 5/32", что совпадало с расстояниями между отверстиями. И хотя в 1928 IBM перешла на карты в 80 колонок, бухгалтерские машины продолжали использовать символы 5/32" в 1930-х и 40-х. Это привело к стандартизированным вариантам ширины форм, из которой наиболее важной стала ширина 14 7/8", в которую помещалась строка из 88 знаков. В 1949 табуляторы IBM перешли на стандарт 10 знаков на дюйм. Такой размер знака и ширина бумаги в 14 7/8" привели к естественной длине строки в 132 знака, что и было реализовано в принтере IBM 1403 в 1959.\r\n\r\nИз-за огромной популярности принтера 1403, 132 символа в строке на бумаге 14 7/8" стали фактическим стандартом, который поддержали многие другие компании. Поэтому, даже теперь, когда перфокарты уже давно исчезли, можно свободно приобрести бумагу 14 7/8" с зелёными полосками.	https://habr.com/ru/post/440604/	1ef080ca-09a9-474e-afa6-71cea68b971e
29	«Покажи мне свои кроссовки, и я скажу, кто ты»: новый подкаст о тематических медиапроектах	SNEAKERMANIA Glyph Media медиа телеграм-каналы карьера в медиа	Это — подкаст с контент-мейкерами и редакторами. Гость сегодняшнего выпуска — Владимир Борисенков — главный по кроссовкам в проекте «SNEAKERMANIA» и ряде других изданий.\r\n\r\n\r\nпрослушать интервью в Telegram или в веб-плеере\r\n\r\n Владимир Борисенков, основатель проекта SNEAKERMANIA\r\n\r\n\r\nalinatestova: «Challenger», «Sports.Ru», «Sneakerhead» — практически у всех проектов, в которых ты занят, так или иначе есть акцент на спорт. Расскажи, пожалуйста, как так получилось и как ты из мира спорта перешёл к созданию собственного медиа?\r\n\r\n\r\nВладимир: Я просто всегда играл в баскетбол, потому что на него меня в детстве отдал отец. Я ходил, заинтересовался всей этой историей и решил, почему бы не попробовать себя в спортивных медиа. В своё время я в Vk начал вести какие-то паблики, посвященные тем или иным командам. Одна из первых была «Реал Мадрид». На тот момент мне было 16 или 17 лет. \r\n\r\nЗатем я написал в Sports.ru парню, который занимался соц. редакцией. Это что-то вроде SMM, но с более глубоким погружением в текстовую составляющую. Говорю: «Так и так, хочу поработать у вас, есть что-нибудь?». Не просил денег. Мне сказали: «Вот, возьми паблик. Если у тебя получится его раскачать, то мы тебя возьмем в редакцию». На аутсорс, правда.\r\n\r\nВ общем, получилось так, что весьма быстро я его сделал очень популярным, и на это обратили внимание. Меня взяли туда работать.\r\n\r\nА: Круто.\r\n\r\nВ: Да, получилось интересно. Мне его отдали просто. По крайней мере, в Sports.ru мне никогда не задавали вопросов: «Что хочешь? Что не хочешь?». Берёшь и делаешь.\r\n\r\nТам сказали: «Что хочешь, то и делай, не забывай публиковать ссылки на сайт», например. Какие-то минимальные требования. За счёт этой свободы у меня получилось там что-то.\r\n\r\n\r\nА: Понятно, что баскетбол — это то, чем ты занимался с детства, часть твоей жизни, которая тебя сопровождала и сопровождает. А написание текстов и редакторство?\r\n\r\nВедь не каждый человек хорошо пишет — несмотря на то, что все прошли школу и знают русский язык. Как у тебя возник интерес к этой теме?\r\n\r\n\r\nВ: Я точно могу сказать, что я не суперкрутой автор. Я знаю миллион чуваков, которые пишут гораздо круче. Мне повезло в том плане, что когда я пришёл в Sports.ru, там есть негласное правило у всей редакции — когда ты приходишь работать, то заводишь блог на «Трибуне».\r\n\r\nВот и я завёл блог. Он у меня был так себе поначалу, если честно. Я просто учился, и мне банально было интересно рассказывать про кроссовки. Я понял, что про футбол не смогу круто писать, потому что нужно очень большое погружение в тему. А так я занимался баскетболом, был в этой теме и решил, что попробую что-нибудь про баскетбол делать. Потом посмотрел на авторов, которые на «Трибуне» пишут про баскетбол, понял, какие это «мастодонты». С ними соревноваться в познании статистических фактов — просто какое сумасшествие.\r\n\r\nИ я решил, почему бы не раскрыть тему про кроссовки. Начал об этом делать.\r\nПрикольно, что когда я начал, очень много узнавал из комментариев о себе и о своём тексте. Было неприятно иногда, что тебя ругают, но если делать выводы, то в целом это даёт плоды. \r\n\r\nКогда людям интересно, они готовы тебе помочь и подсказать. Условно, до этого момента я не знал ничего об HTML-разметке или о том, как embed-ить видео. Такие моменты выхватываешь в комментариях, учишься и потихоньку все у тебя становишься лучше.\r\n\r\nВ Challenger, о котором ты сказала, меня Маша Командная позвала. Подтянула и сказала: «Ты пишешь про кроссовки, давай». Я согласился.\r\n\r\n\r\nА: Супер. Расскажи, пожалуйста, как развивалась история с комментаторами?\r\n\r\n\r\nВ: Мне очень понравилось, что в первой волне комментариев, было очень много высказываний в духе: «Не стесняйся рубить правду».\r\n\r\nЕсли говоришь, говори от себя, а не пытайся угодить всем.\r\nМой первый блогерский опыт был, когда я написал текст, и старался сделать так, чтобы каждому он понравился. Я понял, что только я начинаю так делать, получается то, что публиковать стыдно. Мне сразу же об этом сказали, и я вынес для себя этот урок. Если хочешь что-то сделать, чтобы понравилось кому-то, то делай это честно, а не пытайся угодить всем.\r\n\r\nНу и банально: там я научился делить на абзацы текст. До этого у меня была «простыня», меня в комментариях выругали за это и сказали: «Чувак, пользуйся кнопкой Enter». То есть какие-то банальные вещи узнаешь и потихоньку-потихоньку… \r\n\r\nОпять же никто не отменял смотреть других блогеров. Ты смотришь, думаешь: «О, вот это круто, попробую у себя это как-то использовать». Там реально пишут ребята с большой экспертизой в этом, что просто почитав их тексты, больше узнаёшь, чем знал до этого.\r\n\r\n\r\nА: Здорово. В целом, как ты воспринимал эти комментарии? Поначалу, ты говоришь, было неприятно, люди комментируют, какой-то негатив, может быть. Есть ли у тебя какой-то совет: как начинающему блогеру, который получает ряд рекомендаций, высказанных не самым лучшим и не самым деликатным образом — как ему с этим работать?\r\n\r\n\r\nВ: Не могу сказать, чтобы я сильно переживал. Я вообще не очень переживающий человек. Просто очень рано начал работать в интернете и во ВКонтакте, наверняка ты там есть…\r\n\r\nА: Меня нет в ВКонтакте года с 2012-го.\r\n\r\nВ: Ну тогда я тебе расскажу. Там весьма токсичная публика. Если в фейсбуке она весьма токсичная (хотя там скука), происходящее во ВКонтакте, тебе надо ощутить снова, чтобы понять, насколько в ваших фейсбуках тепло и уютно.\r\n\r\nА: Мы делаем материалы для своих клиентов в том числе и для их корпоративных блогов на Хабре, где уровень требований аудитории тоже весьма высок.\r\n\r\nВ: Да, я знаю. Поэтому у меня не было какой-то боязни комментариев. Я в начале сказал, что занимался пабликом Реал Мадрида. Ты наверняка знаешь, что каждую неделю матчи. Любой из них — огромный выплеск эмоций, в том числе со стороны комментаторов. Там и мат, и…\r\n\r\nА: Всё что угодно, конечно.\r\n\r\nВ: Я такой: «Хм, ну попробуйте меня удивить на этот раз». Меня уже как только не называли.\r\n\r\nА: То есть паблик в ВКонтакте отлично прокачивает редакторский дзен.\r\n\r\nВ: Правда, без шуток. Допустим, если один раз побываешь в ветке обсуждения матча «Реал Мадрид — Барселона», поймешь, как много новых слов тебе придется ещё погуглить и узнать. Такого нигде не встретишь. Я просто привык, что, в принципе, все люди любят высказывать свою позицию. Пусть он лучше меня обругает — это тоже реакция. Значит, ты чего-то достиг. Хуже, когда ноль. А тут ты можешь хоть какие-то выводы для себя сделать.\r\n\r\n\r\nА: Расскажи, пожалуйста, что ты сейчас делаешь? В Sports.ru. Помимо блога.\r\n\r\n\r\nВ: К слову, блог я там уже немножко подзабросил. Мне как-то охладело писать там, потому что платформа Sports.ru предполагает такую коммуникацию, что ты не можешь там много выкладывать. То есть можешь, но это не будет работать. В один момент я понял для себя, что хочу перейти в Telegram. Собственно и перешёл. Сейчас он у меня растёт, цветёт и всё такое.\r\n\r\nВ Sports.ru я работаю на аутсорсе в направлении «Стиль». С недавних пор Sports.ru начал рассказывать, что спорт — это еще и про то, как люди одеваются. Это — поиск нового контента. На что мы раньше не обращали внимания, сейчас стало резко интересно. Кто во что одевается, кто что любит покупать и так далее. В том числе это кроссовки, бутсы, форма и многое другое.\r\n\r\n\r\nА: Ты занят сразу в нескольких проектах. Как тебе удается балансировать и достигать чего-то в каждом из них?\r\n\r\n\r\nВ: Я не могу сказать, что чего-то достигать. Лучше пусть кто-то другой оценивает.\r\n\r\nВ целом, наверное, лояльность руководства. Везде, где я работаю, мне повезло с этим. Что в Sneakerhead: я весьма свободен в своих творческих позывах. Если я считаю, что это будет круто, мне говорят: «Да, делай». Так и в Sports.ru. Никто тебя не ограничивает. Понятно, что есть какие-то рамки в любом случае. Все мы их прекрасно понимаем, но в целом весьма свободно.\r\n\r\nВ Challenger я работаю как приглашённый автор. Раньше я там чаще писал, потому что у меня было много свободного времени. Сейчас из-за того, что мой канал в Telegram резко начал расти, я отказываюсь от чего-то в пользу него. Это уже чуть больше, чем просто развлекуха.\r\n\r\n\r\nЭто прямо про производство контента. Если говорить о продуктивности, в целом я для себя вынес очень важную мысль буквально месяцев пять назад — я начал вести для себя дневник, ну и просто пишу туда задачи. Допустим, надо написать такой-то текст. Накидываю тезисы, и всё, смотрю, сколько у меня ещё незачеркнутого, и работаю. Это мне помогает.\r\n\r\nА: У тебя, в отличие от многих других людей, которые приходят к нам на подкаст, твои хобби и рабочие задачи объединены одной темой — это кроссовки, спортивная обувь и так далее. Как тебе удаётся не повторяться на разных площадках и в разных материалах?\r\n\r\nВ: Не знаю. Когда ты в это на сто процентов погружен, это помогает генерировать так много классных идей, что ты понимаешь: где-то это применимо, где-то нет.\r\n\r\nА: Идей хватает на все площадки сразу.\r\n\r\nВ: Да, конечно. Иногда рук не хватает, чтобы это написать.\r\n\r\nДопустим, для Sports.ru надо понимать, что есть определённый бэкграунд у сайта. Я не могу рассказывать о каких-то вещах, которые понятны, допустим, только фанатам кроссовок. Надо подходить с более спортивной стороны. На Sneakerhead я могу «в лоб» рассказывать о каком-нибудь дизайнере, о котором на Sports.ru никто никогда не слышал. А здесь публика скажет: «Да, это интересно». Ну и просто грамотно оценивать свои силы и понимать, для какой аудитории ты рассказываешь. Это очень важно. Когда ты это понимаешь, всё вроде выходит.\r\n\r\nА: Ты рассказывал про дневник, где набрасываешь тезисы к материалам. Сложно ли тебе переключаться с одной площадки на другую? Условно, с контента для Sports.ru на Telegram.\r\n\r\nВ: Бывает сложно, да. У всех медиа есть классическая история, что надо [что-то опубликовать] вот сейчас, мы не ждём. Я понимаю это прекрасно.\r\n\r\nДопустим, иногда я могу вечером прийти [домой] и мне просто хочется зайти на Пикабу, почитать какие-нибудь глупые шутки, мемы и посты. А тебе говорят: «Так, нужно срочно собрать пост про то, как какой-нибудь футбольный клуб классно сделал маркетинговую историю про свою игровую форму». И ты такой: «О, чёрт, ладно, пойдёмте делать».\r\n\r\nКогда ты работаешь на аутсорсе — это твои будни. Люди, которые идут на аутсорс и постоянно на это жалуются, я не знаю, к чему они вообще придут. Наверное, будут ненавидеть то, что они делают. Мне интересно работать. Я просто, бывает, вечерком прихожу и такой уже уставший, что не смотрю на телефон до последнего. Потом такой: «Ладно, окей, всё, давайте сделаем».\r\n\r\nА: В связи с этим: расскажи, пожалуйста, как выглядит твой будний день?\r\n\r\nВ: Допустим, у меня есть мой блог. Это 24/7. Там контент у меня появляется ежедневно. За всю историю существования моего блога в Telegram было всего два дня, когда контент не появлялся. Один день я был на фестивале музыкальном, там как бы без вариантов, я просто был в отрыве. А другой день я уже не помню, праздник какой-то был, я тоже уехал и у меня не было интернета.\r\n\r\nЯ встаю, читаю новости, в основном кроссовочные. Как ты сказала, всё, в принципе, крутится вокруг этой темы. Изучаю новостную повестку, для себя отмечаю что-то. Банально открываю вкладки, оставляю их и потом уже смотрю, что мне опубликовать из всего этого.\r\n\r\nВ Sneakerhead я езжу 5/2, это моя основная работа, это офис. У нас там такая лёгкая на подъём команда, нет какого-то груза. Ты просто приехал и занимаешься своим делом.\r\n\r\nВ мои обязанности входит вся текстовая составляющая проекта Sneakerhead: соцсети, релизы и корпоративный блог. Ну «корпоративным» его сложно назвать, потому что мы просто делаем маленькое медиа про кроссовки, чтобы людям было интересно. По нашему выработанному опыту это работает. Мы поняли, что на нашей условно кроссовочной площадке никто ничего не рассказывает, мы хотим быть первыми и привлекать аудиторию.\r\n\r\n\r\nА: Мы уже немножко поговорили про твой Telegram-канал SNEAKERMANIA. Расскажи, пожалуйста, как вообще появился этот проект? Одно дело, что ты начал что-то делать, но была же какая-то предыстория у него.\r\n\r\n\r\nВ: Да. Собственно блог SNEAKERMANIA появился на Sports.ru. Это то, о чем я тебе рассказывал — редакционный блог. Я его вёл-вёл-вёл, у меня там были прикольные материалы. Самый крутой у меня материал был — из того, что помню — это кроссовки Дмитрия Медведева. Я написал о них за год до того, как случились события с Навальным. Я тогда понял: «О, материалы спустя год работают». И они мне приносят больше, чем тогда, когда вышли.\r\n\r\nВ один момент я понял, что хочу чуть динамичнее писать, чтобы быстрее отдачу ощущать. В Telegram меня впечатлил «глазочек» под сообщениями. Я подумал: «Вот моя оценка». Я сразу вижу, сколько меня прочитали раз. Мне это понравилось, и я решил попробовать.\r\n\r\nЗавёл Telegram-канал. В старом блоге у меня было 1100 или 1500, что-то такое. По меркам Sports.ru — это много. Я опубликовался там, говорю: «Чуваки, вот у меня теперь есть Telegram-канал, я ещё и там рассказываю». Какая-то основная часть перекочевала туда, а дальше — сарафанное радио. Сейчас у меня уже более 8000 подписчиков.\r\n\r\nА: Супер. А вот скажи, пожалуйста: я, может быть, не настолько в тему погруженный человек, несмотря на то, что я в кроссовках.\r\n\r\nВ: Я заметил сразу. На самом деле, все люди, которые увлекаются кроссовками, первое, что делают — смотрят на обувь. Я иногда в метро думаю: «Блин, какой же я сумасшедший». Пробежался по вагону, думаешь: «Ага, тут кроссовок круче, чем мои, нет». Всё, я еду спокойно.\r\n\r\n\r\nА: Я ехала на интервью и подумала: «Хорошо, что я надела кроссовки». Может, плохо, не знаю. Сегодня кроссовки — это еще и предмет искусства и коллекционирования?\r\n\r\n\r\nВ: О, это моя любимая тема.\r\n\r\nА: Насколько велика эта подпольная империя любителей и ценителей кроссовок?\r\n\r\nВ: Большая, правда.\r\n\r\nСтоит оговориться, что идея моего канала — в том, чтобы понятным языком рассказывать о кроссовках. О дизайнерах, о том, что это не просто обувь за пять-десять тысяч, а туда вложили и работу, и творческую идею какую-то. Возможно, это красивая коллаборация, отсылки к художникам, много чего. Я об этом и начал рассказывать.\r\n\r\nБольшинство каналов просто публиковали фотографии типа: «Вот скоро выйдет такая-то модель». И всё. Ничего — ни мнения, ни экспертизы. Даже если у тебя нет её изначально, можно же какое-то своё мнение сказать. Это такое лирическое отступление.\r\n\r\nА вот тема с кроссовками резко начала расти. Думаю, возможно, ты ощущаешь это на личном примере. Все вокруг так заинтересованы, надо к лету купить кроссовки.\r\n\r\nЯ вспоминаю пять лет назад — такого не было. Кто мог представить четыре года назад, что за кроссовками дети, пацаны лет по пятнадцать-шестнадцать будут стоять в очереди зимой? По два-три дня. А сейчас это норма, никто уже не удивляется.\r\nА: Кроссовки — новый чёрный.\r\n\r\nВ: Да. Посмотри на знаменитостей — все носят кроссовки. Пять-десять лет назад все говорили: «Костюм и кроссовки — что?». Сейчас: «А, прикольно, так можно комбинировать». Это видно в каждом действии. Если ты следишь за какой-то модой и посматриваешь иногда подобные аккаунты, ты видишь, что все модные дома так или иначе тоже начинают их выпускать.\r\n\r\nА: Делают «уродливые» кроссовки.\r\n\r\nВ: Да. Зайди в любой масс-маркет — везде есть кроссовки. Все поняли, что это круто. \r\n\r\nВообще в России это давно. Просто было весьма закрытым комьюнити, и никого это не интересовало. А тут резкий бах, и все такие: «Уоу».\r\n\r\nА: То есть кроссовки из такой commodity [товар потребления, удобство — прим. ред.] становятся реально предметом искусства и интереса самых разных сфер.\r\n\r\nВ: Да, конечно. Ты наверняка знаешь Ван Гога.\r\n\r\nА: (смеётся)\r\n\r\nВ: Ну на всякий случай. Вот бренд Vans делал коллаборацию с музеем Ван Гога. Тоже кто бы мог подумать, что картины такого великого художника когда-то будут носить на ногах. Это типа: «О, ужас», а почему-то, с другой стороны — нет. В принципе, сейчас этого много.\r\n\r\nОсобенно остро это стало ощущаться, как только кроссовки стали хорошо продаваться в интернете, на вторичном рынке. Как только люди поняли, что на кроссовках можно заработать, это привлекло очень многих. Наверняка слышала, сейчас кроссовки Yeezy есть от Adidas и Канье Уэста. Я не очень их люблю, но понимаю, что он такими лимитированными парами, которые придумал, заинтересовал так много людей лишь потому, что эти кроссовки можно перепродать.\r\n\r\nА: Есть определённый дефицит на них и, соответственно, интерес.\r\n\r\nВ: Да. И люди, которые даже не покупают, в итоге всё равно такие: «Блин, а что там ещё есть?» Даже если им не удаётся купить и перепродать, они интересуются, копают и так погружаются в это. Я с каждым днём ощущаю колоссальный прилив интереса и поэтому не опускаю руки, потому что вижу, что людям безумно интересно.\r\n\r\nДаже моя мама заинтересовалась кроссовками. При том, что она — такая женщина, которая любит только туфли. А тут она такая: «А что там по кроссовкам есть?»\r\n\r\nА: По сути твой канал — не просто про кроссовки, а про кроссовки как культурный и социальный феномен.\r\n\r\n\r\nВ: Да. Возможно, для кого-то это прозвучит дико. Я прекрасно пойму, когда скажут: «Чего? Это же на ноги надел и пошёл». Это нормально. Просто человеку начинаешь рассказывать, что бывает вот такое, очень часто с художниками и музыкантами делают какие-то совместные работы. Это творческая история, почему нет. Мне нравится, что сейчас это — ещё один способ самовыражения. Для меня лично это так. Я иногда по кроссовкам могу понять, какую музыку любит человек или какие у него увлечения есть.\r\n\r\nА: Покажи мне свои кроссовки, и я скажу, кто ты.\r\n\r\nВ: Ну да, это реально работает. Не со всеми, но бывает.\r\n\r\n\r\nА: Круто. Я помню, ты у себя в фейсбуке писал о том, что летом выступал на фестивале Faces&Laces [ежегодный фестиваль уличной культуры в Москве — прим. ред].\r\n\r\nВ: Да, я был инфопартнёром его.\r\n\r\nА: Меня заинтересовало следующее: ощутил ли ты какой-то переход из просто человека, который ведёт канал про кроссовки, в популярного блогера, инфопартнёра фестиваля?\r\n\r\nВ: Да нет, всё как было, так и осталось. Просто у меня появилось чуть больше возможностей в плане интеграций и знакомств. А так нет. Я не сделал чего-то такого, что нереально сделать. Просто я летом поймал себя на мысли (когда на фестивале прямо стоял), что ровно год назад я был там же и думал: «Блин, было бы здорово здесь как-то поучаствовать». \r\n\r\nПрошёл год — я уже инфопартнёр. Я даже не успел заметить, и это прикольно. Там из инфопартнёров были Esquire, Афиша, а из блогов — только мой. Выступают зарубежные артисты, а за ними — мой логотип во всю сцену. И ты такой: «Чего?» Это невозможно спокойно осознать, это случается «комом» и всё. Какого-то резкого фейма нет.\r\n\r\nТот опыт, который я получил, теперь мне позволяет иногда банально попасть на закрытые мероприятия, на которые до этого я не мог попасть. Или бренды тебя замечают. Когда ты поучаствовал в таком большом мероприятии, на тебя сразу — чуть больше внимания. Но я как писал про кроссовки, так и пишу. Заработок никогда не был для меня целью, по крайней мере блог — не про заработок.\r\n\r\nА: Наверное, это причина [популярности] как раз.\r\n\r\nВ: Наверное. Я стал замечать, что людям нравится следить за сумасшедшими людьми, которые увлечены своим делом. Это нормально. Я в какой-то мере сумасшедший, возможно.\r\n\r\n\r\nА: Не так давно ты стал официальным куратором Яндекс.Музыки.\r\n\r\n\r\nВ: Да, я и сам не ожидал.\r\n\r\nА: Расскажи, пожалуйста, это — ещё одно увлечение или оно как-то вписывается в эту общую канву? Как-то связано оно со спортом?\r\n\r\nВ: Там опять же всё связано: сарафанное радио, классика, в общем. \r\n\r\nЯ люблю рэп. На этой теме я сошелся с ребятами из Яндекс.Музыки. Мы познакомились с девочкой, которая курирует эти проекты, она написала мне в блог. Сказала: «Прикольно, ты пишешь про кроссики». Мы с ней разболтались.\r\n\r\nПрошло полгода, мы с ней случайно встретились, и она предложила мне: «Чувак, мне так нравится твой блог, давай ты будешь курировать Яндекс.Музыку». Я такой: «Давай».\r\nОна не знала, что у меня есть бэкграунд музыкальный. Мы с другом когда-то начинали небольшой проект, который выглядел в принципе как подкаст. Мы собирали, воровали официальные треки, склеивали их худо-бедно, на своём ноутбуке сводили и «выливали» полтора часа музыки.\r\n\r\nЯ всегда мечтал что-то делать с музыкой, потому что музыка — очень большая часть моей жизни. Банально: я еду до работы в метро в наушниках, слушаю новые релизы. Это помогает и зарядиться, и быть в повестке дня что ли.\r\nМузыка — тоже супербольшой феномен. Сейчас кого ни спросишь — у всех есть Apple Music, Яндекс.Музыка, Spotify; все это обсуждают. «А ты видел этот альбом? А ты слышала, что он сказал?» Посмотри даже интервью Дудя — там одни музыканты. Потому что это новые звёзды.\r\n\r\nСуть проекта с Яндекс.Музыкой — как она мне её преподнесла, и мне это нравится — что они хотят собрать не каких-то хайповых блогеров, а просто чуваков из локальной тусовки, которые просто бы демонстрировали свой вкус. Я ни в коем случае не пытаюсь донести мысль, что я суперзнаток и эксперт в музыке. Нет, вообще не так. Просто делюсь той музыкой, которая мне нравится, и если она нравится вам — здорово. Если нет — простите, каждому своё, как известно. \r\n\r\nПрикольно, что меня пригласили просто попробовать, а сейчас мы сидим, и мне чуть позже надо будет съездить и забрать подарок от Яндекса. Они сказали: «Вот ты куратор, мы тебе ништяков подготовили». Я такой: «О, здорово, спасибо».\r\n\r\nЭто же тоже история не про деньги — я ни рубля с неё не получаю. Речи о деньгах не было, и мне не сильно интересно это монетизировать. Просто прикольно. Тебе дают такую площадку и говорят, что мы тебе столько народа приведем, они узнают о тебе. Здорово, давайте.\r\n\r\nА: Класс. Мне очень нравится, что все направления этой истории — про твою вовлечённость, твою мотивацию и твой личный интерес, который выражается в пользу для людей.\r\n\r\nВ: Да. Мне просто не нравится делать то, что не нравится. Звучит как-то очень просто, ну а зачем? Если тебе это не интересно — ни к чему хорошему это обычно не приводит.\r\n\r\nА тут музыка — класс, давайте. Я ещё когда первый плейлист собирал, думал: «Ну всё, как диджей сейчас. Ещё чуть-чуть и можно на Ибицу ехать». Но нет, Ибица пока мне не писала.\r\n\r\nА: Ну год пройдет, и…\r\n\r\nВ: Возможно. Я через год такой на «Стрелке», рядом с Храмом Христа Спасителя диджей-сет отыгрываю. Возможно, кто знает. Будет здорово, я бы попробовал.\r\n\r\n\r\nА: Класс. Под конец у нас — микроблиц из двух вопросов.\r\n\r\n\r\n\r\nА: Крутые кроссовки должны…\r\n\r\nВ: Запоминаться.\r\n\r\nА: Спорт помогает…\r\n\r\nВ: Самовыражаться.\r\n\r\nА: Класс, спасибо.\r\n\r\n\r\nНаш микроформат по теме контент-маркетинга:\r\n\r\n Почему компаниям нужен англоязычный блог на Хабре\r\n Стамина — качество, без которого не обойтись\r\n Tech isn’t just for geeks anymore\r\n\r\nP.S. В профиле glphmedia — ссылки на все выпуски нашего подкаста.	https://habr.com/ru/company/vsce/blog/440528/	1ef080ca-09a9-474e-afa6-71cea68b971e
30	Приключения с ptrace(2)	ptrace хитрости	 На Хабре уже писали про перехват системных вызовов с помощью ptrace; Алекса написал про это намного более развёрнутый пост, который я решил перевести.\r\n\r\nС чего начать\r\nОбщение между отлаживаемой программой и отладчиком происходит при помощи сигналов. Это существенно усложняет и без того непростые вещи; ради развлечения можете прочесть раздел BUGS в man ptrace.\r\n\r\nЕсть как минимум два разных способа начать отладку:\r\n\r\n\r\nptrace(PTRACE_TRACEME, 0, NULL, NULL) сделает родителя текущего процесса отладчиком для него. Никакого содействия от родителя при этом не требуется; man ненавязчиво советует: «A process probably shouldn't make this request if its parent isn't expecting to trace it.» (Где-нибудь ещё в манах вы видели фразу «probably shouldn't»?) Если у текущего процесса уже был отладчик, то вызов не удастся.\r\nptrace(PTRACE_ATTACH, pid, NULL, NULL) сделает текущий процесс отладчиком для pid. Если у pid уже был отладчик, то вызов не удастся. Отлаживаемому процессу шлётся SIGSTOP, и он не продолжит работу, пока отладчик его не «разморозит».\r\n\r\nЭти два метода полностью независимы; можно пользоваться либо одним, либо другим, но нет никакого смысла их сочетать. Важно отметить, что PTRACE_ATTACH действует не мгновенно: после вызова ptrace(PTRACE_ATTACH), как правило, следует вызов waitpid(2), чтобы дождаться, пока PTRACE_ATTACH «сработает».\r\n\r\nЗапустить дочерний процесс под отладкой при помощи PTRACE_TRACEME можно следующим образом: \r\n\r\nstatic void tracee(int argc, char **argv)\n{\n    if (ptrace(PTRACE_TRACEME, 0, NULL, NULL) < 0)\n        die("child: ptrace(traceme) failed: %m");\n\n    /* Остановиться и дождаться, пока отладчик отреагирует. */\n    if (raise(SIGSTOP))\n        die("child: raise(SIGSTOP) failed: %m");\n\n    /* Запустить процесс. */\n    execvp(argv[0], argv);\n\n    /* Сюда выполнение дойти не должно. */\n    die("tracee start failed: %m");\n}\n\nstatic void tracer(pid_t pid)\n{\n    int status = 0;\n\n    /* Дождаться, пока дочерний процесс сделает нас своим отладчиком. */\n    if (waitpid(pid, &status, 0) < 0)\n        die("waitpid failed: %m");\n    if (!WIFSTOPPED(status) || WSTOPSIG(status) != SIGSTOP) {\n        kill(pid, SIGKILL);\n        die("tracer: unexpected wait status: %x", status);\n    }\n    /* Если требуются дополнительные опции для ptrace, их можно задать здесь. */\n\n    /*\n     * Обратите внимание, что в предшествующем коде нигде\n     * не указывается, что мы собирается отлаживать дочерний процесс.\n     * Это не ошибка -- таков API у ptrace!\n     */\n\n     /* Начиная с этого момента можно использовать PTRACE_SYSCALL. */\n}\n\n/* (argc, argv) -- аргументы для дочернего процесса, который мы собираемся отлаживать. */\nvoid shim_ptrace(int argc, char **argv)\n{\n    pid_t pid = fork();\n    if (pid < 0)\n        die("couldn't fork: %m");\n    else if (pid == 0)\n        tracee(argc, argv);\n    else\n        tracer(pid);\n\n    die("should never be reached");\n}\n\r\nБез вызова raise(SIGSTOP) могло бы оказаться, что execvp(3) выполнится раньше, чем родительский процесс будет к этому готов; и тогда действия отладчика (например, перехват системных вызовов) начнутся не с начала выполнения процесса.\r\n\r\nКогда отладка начата, то каждый вызов ptrace(PTRACE_SYSCALL, pid, NULL, NULL) будет «размораживать» отлаживаемый процесс до первого входа в системный вызов, а потом — до выхода из системного вызова.\r\n\r\nТелекинетический ассемблер\r\nptrace(PTRACE_SYSCALL) не возвращает отладчику никакой информации; он просто обещает, что отлаживаемый процесс дважды остановится при каждом системном вызове. Чтобы получать информацию о том, что происходит с отлаживаемым процессом — например, в каком именно системном вызове он остановился — нужно лезть в копию его регистров, сохранённую ядром в struct user в формате, зависящем от конкретной архитектуры. (Например, на x86_64 номер вызова будет в поле regs.orig_rax, первый переданный параметр — в regs.rdi, и т.д.) Алекса комментирует: «ощущение, как будто пишешь на Си ассемблерный код, работающий с регистрами удалённого процессора». \r\n\r\nВместо структуры, описанной в sys/user.h, может быть удобнее пользоваться константами-индексами, определёнными в sys/reg.h:\r\n\r\n#include <sys/reg.h>\n\n/* Получить номер системного вызова. */\nlong ptrace_syscall(pid_t pid)\n{\n#ifdef __x86_64__\n    return ptrace(PTRACE_PEEKUSER, pid, sizeof(long)*ORIG_RAX);\n#else\n    // ...\n#endif\n}\n\n/* Получить аргумент системного вызова по номеру. */\nuintptr_t ptrace_argument(pid_t pid, int arg)\n{\n#ifdef __x86_64__\n    int reg = 0;\n    switch (arg) {\n        case 0:\n            reg = RDI;\n            break;\n        case 1:\n            reg = RSI;\n            break;\n        case 2:\n            reg = RDX;\n            break;\n        case 3:\n            reg = R10;\n            break;\n        case 4:\n            reg = R8;\n            break;\n        case 5:\n            reg = R9;\n            break;\n    }\n\n    return ptrace(PTRACE_PEEKUSER, pid, sizeof(long) * reg, NULL);\n#else\n    // ...\n#endif\n}\n\r\nПри этом две остановки отлаживаемого процесса — на входе в системный вызов и на выходе из него — никак не различаются с точки зрения отладчика; так что отладчик должен сам помнить, в каком состоянии находится каждый из отлаживаемых процессов: если их несколько, то никто не гарантирует, что пара сигналов от одного процесса придёт подряд. \r\n\r\nПотомки\r\nОдна из опций ptrace, а именно PTRACE_O_TRACECLONE, обеспечивает, что все дети отлаживаемого процесса будут автоматически браться под отладку в момент выхода из fork(2). Дополнительный тонкий момент здесь в том, что потомки, взятые под отладку, становятся «псевдо-детьми» отладчика, и waitpid будет реагировать не только на остановку «непосредственных детей», но и на остановку отлаживаемых «псевдо-детей». Man предупреждает по этому поводу: «Setting the WCONTINUED flag when calling waitpid(2) is not recommended: the “continued” state is per-process and consuming it can confuse the real parent of the tracee.» — т.е. у «псевдо-детей» получается по два родителя, которые могут ждать их остановки. Для программиста отладчика это означает, что waitpid(-1) будет ждать остановки не только непосредственных детей, а любого из отлаживаемых процессов.\r\n\r\nСигналы\r\n(Бонус-контент от переводчика: этой информации нет в англоязычной статье)\r\nКак уже было сказано в самом начале, общение между отлаживаемой программой и отладчиком происходит при помощи сигналов. Процесс получает SIGSTOP при подключении к нему отладчика, и затем SIGTRAP каждый раз, когда в отлаживаемом процессе происходит что-то «интересное» — например, системный вызов или получение внешнего сигнала. Отладчик, в свою очередь, получает SIGCHLD каждый раз, когда один из отлаживаемых процессов (не обязательно непосредственный ребёнок) «замерзает» или «размерзает».\r\n\r\n«Разморозка» отлаживаемого процесса осуществляется вызовом ptrace(PTRACE_SYSCALL) (до первого сигнала либо системного вызова) либо ptrace(PTRACE_CONT) (до первого сигнала). Когда сигналы SIGSTOP/SIGCONT используются ещё и для целей, не связанных с отладкой, то с ptrace могут возникнуть проблемы: если отладчик «разморозит» отлаживаемый процесс, получивший SIGSTOP, то извне это будет выглядеть, как будто сигнал был проигнорирован; если же отладчик не станет «размораживать» отлаживаемый процесс, то и внешний SIGCONT не сможет его «разморозить».\r\n\r\nТеперь самое интересное: Linux запрещает процессам отлаживать самих себя, но не препятствует созданию циклов, когда родитель и ребёнок отлаживают друг друга. В этом случае, когда один из процессов получает любой внешний сигнал, то он «замерзает» по SIGTRAP — тогда второму процессу шлётся SIGCHLD, и тот тоже «замерзает» по SIGTRAP. Вытащить таких «со-отладчиков» из дедлока невозможно посылкой SIGCONT извне; единственный способ — убить (SIGKILL) ребёнка, тогда родитель выйдет из-под отладки и «размёрзнет». (Если убивать родителя, то ребёнок умрёт вместе с ним.) Если же ребёнок включит опцию PTRACE_O_EXITKILL, то с его смертью умрёт и отлаживаемый им родитель.\r\n\r\nТеперь вы знаете, как реализовать пару процессов, которые при получении любого сигнала оба зависают вечным сном, и умирают только вместе. Зачем это может быть нужно на практике, я пояснять не буду :-)	https://habr.com/ru/post/439882/	1ef080ca-09a9-474e-afa6-71cea68b971e
31	Julia и оптимизация	julia многомерная оптимизация метод ньютона метод нелдера-мида LBFGS метод Брента минимизация линейное программирование	\r\nПришло время рассмотреть пакеты предоставляющие методы решения задач оптимизации. Очень много проблем можно свести к поиску минимума некоторой функции, поэтому следует иметь в арсенале парочку-другую солверов, а уж тем более целый пакет.\r\nВступление\r\nЯзык Julia продолжает набирать популярность. На https://juliacomputing.com можно посмотреть, почему этот язык выбирают астрономы, робототехники и финансисты, а на https://academy.juliabox.com можете начать бесплатные курсы по изучению языка и применению его в во всяком там машинлёнинге. Тем же, кто всерьёз надумал начать учиться советую просмотреть видео, почитать статьи и пощёлкать юпитерские ноутбуки на https://julialang.org/learning/ или хотя бы пройтись по хабу снизу вверх: там будет и установка, и возможности, и применение к делам насущным. А теперь приступим к библиотекам.\r\nBlackBoxOptim\r\nBlackBoxOptim — пакет глобальной оптимизации для Юлии (http://julialang.org/). Он поддерживает как многоцелевые, так и одноцелевые задачи оптимизации и ориентирован на (мета) эвристические / стохастические алгоритмы (DE, NES и т. Д.), которые НЕ требуют, чтобы оптимизируемая функция была дифференцируемой, в отличие от более традиционных, детерминированных алгоритмов, которые часто основаны на градиентах / дифференцируемости. Он также поддерживает параллельные вычисления для ускорения оптимизации функций, которые оцениваются медленно.\r\nЗагружаем и подключаем библиотеку\r\n]add BlackBoxOptim\nusing BlackBoxOptim\r\nЗадаём функцию Розенброка:\r\nf(x) = (1.0 - x[1])^2 + 100.0 * (x[2] - x[1]^2)^2\r\nИщем минимум на отрезке (-5;5) для каждой координаты для двумерной задачи:\r\nres = bboptimize(f; SearchRange = (-5.0, 5.0), NumDimensions = 2)\r\nНа что последует ответ:\r\nStarting optimization with optimizer DiffEvoOpt{FitPopulation{Float64},RadiusLimitedSelector,BlackBoxOptim.AdaptiveDiffEvoRandBin{3},RandomBound{RangePerDimSearchSpace}}\n0.00 secs, 0 evals, 0 steps\n\nOptimization stopped after 10001 steps and 0.12400007247924805 seconds\nTermination reason: Max number of steps (10000) reached\nSteps per second = 80653.17866385692\nFunction evals per second = 81628.98454510146\nImprovements/step = 0.2087\nTotal function evaluations = 10122\n\nBest candidate found: [1.0, 1.0]\n\nFitness: 0.000000000\r\nи еще много неудобочитаемых данных, но минимум нашелся. Так как используется стохастика, вызовов функции будет многовато, так что для многомерных задач лучше использовать подбор методов\r\nfunction rosenbrock(x)\n  return( sum( 100*( x[2:end] - x[1:end-1].^2 ).^2 + ( x[1:end-1] - 1 ).^2 ) )\nend\n\nres = compare_optimizers(rosenbrock; SearchRange = (-5.0, 5.0), NumDimensions = 30, MaxTime = 3.0);\r\nConvex\r\nConvex — это пакет Julia для Disciplined Convex Programming (дисциплинарного выпуклого программирования?). Convex.jl может решать линейные программы, смешанные целочисленные линейные программы и DCP-совместимые выпуклые программы, используя различные решатели, включая Mosek, Gurobi, ECOS, SCS и GLPK, через интерфейс MathProgBase. Он также поддерживает оптимизацию с комплексными переменными и коэффициентами.\r\nusing Pkg # просто другой способ загрузки пакетов\nPkg.add("Convex")\nPkg.add("SCS")\r\nНа сайте есть много примеров: Томография (процесс восстановления распределения плотности по заданным интегралам по участкам распределения. Например можно работать с томографией на черно-белых изображениях), максимизация энтропии, логистическая регрессия, линейное программирование и т. д.\r\nНапример нужно удовлетворить условиям:\r\n\r\nusing Convex, SCS, LinearAlgebra\n\nx = Variable(4)\np = satisfy(norm(x) <= 100, exp(x[1]) <= 5, x[2] >= 7, geomean(x[3], x[4]) >= x[2])\nsolve!(p, SCSSolver(verbose=0))\nprintln(p.status)\nx.value\r\nДаст ответ\r\nOptimal\n4×1 Array{Float64,2}:\n  0.0              \n  8.554892320716046\n 15.329934133156783\n 15.329934133156783\r\nJuMP\r\n\r\nJuMP является предметно-ориентированным языком моделирования для математической оптимизации, встроенным в Julia. В настоящее время он поддерживает ряд открытых и коммерческих солверов (Artelys Knitro, BARON, Bonmin, Cbc, Clp, Couenne, CPLEX, ECOS, FICO Xpress, GLPK, Gurobi, Ipopt, MOSEK, NLopt, SCS).\r\nJuMP позволяет легко определять и решать задачи оптимизации без экспертных знаний, но в то же время позволяет экспертам внедрять передовые алгоритмические методы, такие как использование эффективных «горячих» стартов в линейном программировании или использование обратных вызовов для взаимодействия с решателями ветвей и границ. JuMP также быстр — бенчмаркинг показал, что он может справляться с вычислениями на скоростях, аналогичных специализированным коммерческим инструментам, таким как AMPL, при сохранении выразительности универсального языка программирования высокого уровня. JuMP может быть легко встроен в сложные рабочие процессы, включая симуляции и веб-серверы.\r\nДанный инструмент позволяет без глубоких знаний справляться с такими задачами как: \r\n\r\nLP = линейное программирование\r\nQP = квадратичное программирование\r\nSOCP = коническое программирование второго порядка (включая задачи с выпуклыми квадратичными ограничениями и / или целью)\r\nMILP = Смешанное целочисленное линейное программирование\r\nНЛП = Нелинейное программирование\r\nMINLP = смешанно-целочисленное нелинейное программирование\r\nSDP = полуопределенное программирование\r\nMISDP = смешанно-целочисленное полуопределенное программирование\r\n\r\nРазбора его возможностей хватит на несколько статей, поэтому пока перейдем к следующему:\r\nOptim\r\nOptim Есть много решателей, доступных как из бесплатных, так и из коммерческих источников, и многие уже обернуты для использования в Julia. Немногие из них написаны на этом языке. С точки зрения производительности это редко является проблемой, так как они часто пишутся либо на Fortran, либо на C. Однако решатели, написанные непосредственно на Julia, действительно имеют некоторые преимущества.\r\nПри написании программного обеспечения (пакетов) Julia, для которого требуется что-то оптимизировать, программист может либо написать свою собственную процедуру оптимизации, либо использовать один из многих доступных решателей. Например, это может быть что-то из набора NLOpt. Это означает добавление зависимости, которая не написана в Julia, и необходимо сделать больше предположений относительно среды, в которой находится пользователь. Есть ли у пользователя надлежащие компиляторы? Можно ли использовать код GPL в проекте? \r\nТакже верно и то, что использование решателя, написанного на C или Fortran, делает невозможным использование одного из главных преимуществ Julia: множественная диспетчеризация. Поскольку Optim полностью написан на языке Julia, в настоящее время мы можем использовать систему диспетчеризации, чтобы упростить использование пользовательских преднастроек. Планируемая особенность в этом направлении заключается в том, чтобы позволить управляемый пользователем выбор решателей для различных этапов алгоритма, полностью основанный на диспетчеризации, а не на предопределенных возможностях, выбранных разработчиками Optim.\r\nПакет на Julia также означает, что Optim имеет доступ к функциям автоматического дифференцирования через пакеты в JuliaDiff.\r\nРуководство\r\nПриступим:\r\n]add Optim\nusing Optim\n\n# функция Розенброка\nf(x) = (1.0 - x[1])^2 + 100.0 * (x[2] - x[1]^2)^2\n\nx0 = [0.0, 0.0]\noptimize(f, x0)\r\nПолучим ответ с удобным отчетом:\r\nResults of Optimization Algorithm\n * Algorithm: Nelder-Mead # по умолчанию\n * Starting Point: [0.0,0.0]\n * Minimizer: [0.9999634355313174,0.9999315506115275]\n * Minimum: 3.525527e-09\n * Iterations: 60\n * Convergence: true\n   *  √(Σ(yᵢ-ȳ)²)/n < 1.0e-08: true\n   * Reached Maximum Number of Iterations: false\n * Objective Calls: 118\r\nА сравним-ка с моим Нелдером-Мидом!\r\nспойлерМой окажется медленнее :(\r\nУпрятаноusing BenchmarkTools\n\n@benchmark optimize(f, x0)\n\nBenchmarkTools.Trial: \n  memory estimate:  11.00 KiB\n  allocs estimate:  419\n  --------------\n  minimum time:     39.078 μs (0.00% GC)\n  median time:      43.420 μs (0.00% GC)\n  mean time:        53.024 μs (15.02% GC)\n  maximum time:     59.992 ms (99.83% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\r\nПо ходу проверки еще и выяснилось, что моя реализация не работает, если использовать начальным приближением (0, 0). В качестве критерия остановки можно использовать объем симплекса, у меня же используется норма матрицы составленной из вершин. Здесь можно почитать про геометрическую интерпретацию нормы. В обоих случаях получается матрица из нулей — частный случай вырожденной матрицы, поэтому метод не выполняет ни одного шага. Вы можете настроить создание стартового симплекса, например, задавая удаленность его вершин от начального приближения (а не как у меня — половина длины вектора, фу, какой позор...), тогда настройка метода будет более гибкой, либо проследить, чтобы все вершины не сидели в одной точке:\r\n    for i = 1:N+1\n        Xx[:,i] = fit\n    end\n\n    for i = 1:N\n        Xx[i,i] += 0.5*vecl(fit) + ε\n    end\r\nНу да, мой симплекс горааааздо медленнее:\r\nofNelderMid(fit = [0, 0.])\n\nstep= 118 7.7234e-5 f = 2.797-18 x = [1.0, 1.0]\n\n@benchmark ofNelderMid(fit = [0., 0.])\n\nBenchmarkTools.Trial: \n  memory estimate:  394.03 KiB\n  allocs estimate:  6632\n  --------------\n  minimum time:     717.221 μs (0.00% GC)\n  median time:      769.325 μs (0.00% GC)\n  mean time:        854.644 μs (5.04% GC)\n  maximum time:     50.429 ms (98.01% GC)\n  --------------\n  samples:          5826\n  evals/sample:     1\r\nТеперь больше резона вернуться к изучению пакета\r\nМожно выбирать используемый метод:\r\noptimize(f, x0, LBFGS())\n\nResults of Optimization Algorithm\n * Algorithm: L-BFGS\n * Starting Point: [0.0,0.0]\n * Minimizer: [0.9999999926662504,0.9999999853325008]\n * Minimum: 5.378388e-17\n * Iterations: 24\n * Convergence: true\n   * |x - x'| ≤ 0.0e+00: false \n     |x - x'| = 4.54e-11 \n   * |f(x) - f(x')| ≤ 0.0e+00 |f(x)|: false\n     |f(x) - f(x')| = 5.30e-03 |f(x)|\n   * |g(x)| ≤ 1.0e-08: true \n     |g(x)| = 9.88e-14 \n   * Stopped by an increasing objective: false\n   * Reached Maximum Number of Iterations: false\n * Objective Calls: 67\n * Gradient Calls: 67\r\nи получить на него детальную документацию и ссылочки на литературу\r\n?LBFGS()\r\nМожно задать Якобиан и Гессиан функции\r\nfunction g!(G, x)\n    G[1] = -2.0 * (1.0 - x[1]) - 400.0 * (x[2] - x[1]^2) * x[1]\n    G[2] = 200.0 * (x[2] - x[1]^2)\nend\n\nfunction h!(H, x)\n    H[1, 1] = 2.0 - 400.0 * x[2] + 1200.0 * x[1]^2\n    H[1, 2] = -400.0 * x[1]\n    H[2, 1] = -400.0 * x[1]\n    H[2, 2] = 200.0\nend\n\noptimize(f, g!, h!, x0)\n\nResults of Optimization Algorithm\n * Algorithm: Newtons Method\n * Starting Point: [0.0,0.0]\n * Minimizer: [0.9999999999999994,0.9999999999999989]\n * Minimum: 3.081488e-31\n * Iterations: 14\n * Convergence: true\n   * |x - x'| ≤ 0.0e+00: false \n     |x - x'| = 3.06e-09 \n   * |f(x) - f(x')| ≤ 0.0e+00 |f(x)|: false\n     |f(x) - f(x')| = 3.03e+13 |f(x)|\n   * |g(x)| ≤ 1.0e-08: true \n     |g(x)| = 1.11e-15 \n   * Stopped by an increasing objective: false\n   * Reached Maximum Number of Iterations: false\n * Objective Calls: 44\n * Gradient Calls: 44\n * Hessian Calls: 14\r\nКак видно, автоматически отработал метод Ньютона. А вот так можно задать область поиска и воспользоваться градиентным спуском:\r\nlower = [1.25, -2.1]\nupper = [Inf, Inf]\ninitial_x = [2.0, 2.0]\ninner_optimizer = GradientDescent()\nresults = optimize(f, g!, lower, upper, initial_x, Fminbox(inner_optimizer))\n\nResults of Optimization Algorithm\n * Algorithm: Fminbox with Gradient Descent\n * Starting Point: [2.0,2.0]\n * Minimizer: [1.2500000000000002,1.5625000000000004]\n * Minimum: 6.250000e-02\n * Iterations: 8\n * Convergence: true\n   * |x - x'| ≤ 0.0e+00: true \n     |x - x'| = 0.00e+00 \n   * |f(x) - f(x')| ≤ 0.0e+00 |f(x)|: true\n     |f(x) - f(x')| = 0.00e+00 |f(x)|\n   * |g(x)| ≤ 1.0e-08: false \n     |g(x)| = 5.00e-01 \n   * Stopped by an increasing objective: false\n   * Reached Maximum Number of Iterations: false\n * Objective Calls: 84382\n * Gradient Calls: 84382\r\nНу или не знаю, скажем, Вы захотели решить уравнение\r\nf_univariate(x) = 2x^2+3x+1\n\noptimize(f_univariate, -2.0, 1.0)\n\nResults of Optimization Algorithm\n * Algorithm: Brents Method\n * Search Interval: [-2.000000, 1.000000]\n * Minimizer: -7.500000e-01\n * Minimum: -1.250000e-01\n * Iterations: 7\n * Convergence: max(|x - x_upper|, |x - x_lower|) <= 2*(1.5e-08*|x|+2.2e-16): true\n * Objective Function Calls: 8\r\nа он подобрал Вам Метод Брента.\r\nИли имея экспериментальные данные нужно оптимизировать коэффициенты модели\r\n\r\n\r\nF(p, x) = p[1]*cos(p[2]*x) + p[2]*sin(p[1]*x)\n\nmodel(p) = sum( [ (F(p, xdata[i]) - ydata[i])^2 for i = 1:length(xdata)] )\n\nxdata = [-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9]\nydata = [0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001]\n\nres2 = optimize(model, [1.0, 0.2])\n\nResults of Optimization Algorithm\n * Algorithm: Nelder-Mead\n * Starting Point: [1.0,0.2]\n * Minimizer: [1.8818299027162517,0.7002244825046421]\n * Minimum: 5.381270e-02\n * Iterations: 34\n * Convergence: true\n   *  √(Σ(yᵢ-ȳ)²)/n < 1.0e-08: true\n   * Reached Maximum Number of Iterations: false\n * Objective Calls: 71\r\nY = [ F(P, x) for x in xdata]\n\nusing Plots\nplotly()\n\nplot(xdata, ydata)\nplot!(xdata, Y)\r\n\r\nБонус. Создание своей тестовой функции\r\nИспользована идея с хабровской статьи. Можно самому настроить каждый локальный минимум:\r\n"""\nhttps://habr.com/ru/post/349660/\n    :param n: количество экстремумов\n    :param a: список коэффициентов крутости экстремумов, чем выше значения, \n        тем быстрее функция убывает/возрастает и тем уже область экстремума\n    :param c: список координат экстремумов\n    :param p: список степеней гладкости в районе экстремума\n    :param b: список значений функции\n    :return: возвращает функцию, которой необходимо передавать одномерный список \nкоординат точки, возвращаемая функция вернет значение тестовой функции в данной точке\n"""\nfunction feldbaum(x; n=5, \n        a=[3 2; 4 3; 2 1; 4 5; .5 .5], \n        c=[-1 2; 2 1; -3 2; -2 -2; 1.5 -2], \n        p=[9 6; 1 1; 1.5 1.4; 1.2 1.3; 0.5 0.5], \n        b=[0 1 3.2 2 4.6])\n\n    l = zeros(n)\n    for i = 1:n\n        res = 0\n        for j = 1:size(x,1) \n            res += a[i,j] * abs(x[j] - c[i,j]) ^ p[i,j]\n        end\n        res += b[i]\n        l[i] = res\n    end\n    minimum(l)\nend\r\n\r\n\r\nА можно всё предоставить воле всемогущего рандома\r\nn=10\nm = 2\na = rand(0:0.1:6, n, m)\nc = rand(-2:0.1:2, n, m)\np = rand(0:0.1:2, n, m)\nb = rand(0:0.1:8, n, m)\n\nfunction feldbaum(x) \n\n    l = zeros(n)\n    for i = 1:n\n        res = 0\n        for j = 1:m\n            res += a[i,j] * abs(x[j] - c[i,j]) ^ p[i,j]\n        end\n        res += b[i]\n        l[i] = res\n    end\n    minimum(l)\nend\r\n\r\nНо как видно из стартовой картинки рой частиц таким рельефом не запугаешь.\r\nНа этом следует закончить. Как можно убедиться Julia обладает довольно мощным и современным математическим окружением позволяющим проводить сложные численные исследования не опускаясь до низкоуровневых абстракций программирования. А это отличный повод продолжить изучение данного языка.\r\nВсем удачной оптимизации!	https://habr.com/ru/post/440618/	1ef080ca-09a9-474e-afa6-71cea68b971e
32	Дата-центры на выбор: Лондон, Москва, Цюрих, Санкт-Петербург	RUVDS дата-центр ДЦ Linxdatacenter	Отчасти санкции, отчасти рост технологического бизнеса, отчасти рост дохода этого самого бизнеса сформировали в России условия для развития коммерческих ЦОД. Если раньше можно было горько усмехнуться над SLA, ждать пока встанет интернет-магазин на лежащем сервере, фактически доверять провайдеру «в тёмную», то сегодня бизнес формирует запрос на исключительно качественные услуги, а ЦОДы стремятся соответствовать.\r\n\r\nРынок становится ощутимо более стабильным, формируются ключевые игроки. А главное, появляются технически совершенные дата-центры, о которых даже 5 лет назад нельзя было и подумать. Ребята, хотим мы этого или нет (конечно, хотим!), но это мир хранения данных нового уровня и мир данных без границ — в прямом смысле этого слова. А где предпочитают работать ваши данные?\r\n\r\n\r\n\r\nПо оценкам iKS-Consulting, в 2018 году численность стоек в российских коммерческих ЦОД выросла на 16% — почти до 40 тыс. единиц. Темпы наращивания емкости вышли на докризисный уровень. По мнению аналитиков, основной вклад в этот прирост – более 73% — внесли компании IXcellerate, «Ростелеком-ЦОД», GeenBushDC, DataPro и «Авантаж». \r\n\r\nПродолжает консолидироваться российский рынок хостинга. Это позволяет провайдерам услуг выигрывать за счёт синергии и экономии на объёме. Сейчас в России идет процесс укрупнения, выделяются основные игроки. Уровень консолидации на текущий момент еще невысок, но будет расти.\r\n\r\n\r\nДинамика выручки на рынке коммерческих дата-центров в РФ, млрд руб. По данным IKS Consulting.\r\n\r\nВместе с тем растет и требовательность российских пользователей. Например, если у некоторых зарубежных провайдеров нет круглосуточной поддержки семь дней в неделю (24/7), то в России это стандарт, и если хостинговая компания такого сервиса не предлагает, то она долго не просуществует. Кроме того, расширяется зона ответственности хостинг-провайдера. В России он должен иметь широкую компетенцию в смежной тематике и помогать заказчикам за рамками своих текущих обязанностей.\r\n\r\nВедущие хостинг-провайдеры расширяют свои площадки, используя ресурсы лучших российских дата-центров. Так, хостинг-провайдер RUVDS в рамках развития своей стратегии ввел в эксплуатацию собственную гермозону в дата-центре Linxdatacenter в Санкт-Петербурге. При этом цены на услуги VPS в северной столице не отличаются от цен на виртуальные серверы в дата-центрах RUVDS — в Лондоне, Москве и Цюрихе, где VPS-провайдер при поддержке компании Huawei в России создал гермозону уровня надежности TIER IV. \r\n\r\n\r\nГермозоны в дата-центре Linxdatacenter в Санкт-Петербурге.\r\n\r\nХостинг-провайдер RUVDS входит в двадцатку самых крупных поставщиков услуг IaaS согласно рейтингу «CNews Analytics: Крупнейшие поставщики IaaS в России 2018». В 2017 году полученная нашей компанией выручка от оказания услуг IaaS выросла на 182%. Данный рост связан, прежде всего, с увеличением числа предоставляемых нами облачных услуг. \r\n\r\nЕсть у нас и достаточно редкие для российского рынка предложения. Например, RUVDS при поддержке страхового брокера Pure Insurance страхует в одной из самых крупных страховых компаний мира — AIG — свою ответственность перед клиентами за несанкционированное публичное раскрытие персональных данных и корпоративной информации. В перечне услуг есть и решение по антивирусной защите виртуальных серверов под управлением ОС Windows Server. Это Kaspersky Security for Virtualization Light Agent (легкий агент для виртуальных сред). \r\n\r\nТеперь RUVDS предлагает своим клиентам виртуальные серверы, размещенные в крупнейшем на сегодня дата-центре Санкт-Петербурга Linxdatacenter по адресу г. Санкт-Петербург, ул. Репищева, д. 20А. О других наших площадках мы уже не раз писали. Теперь расскажем подробнее о питерском ЦОД, получившем ряд престижных сертификатов.\r\n\r\n\r\nЦентр обработки данных Linxdatacenter в Санкт-Петербурге — крупнейший в сети ЦОД этой компании. Ее площадки расположены также в Москве, Таллине и Варшаве. По таким параметрам, как общая площадь (9000 м2) и максимальное энергопотребление (12 МВт), это один из крупнейших ЦОД в России.\r\n\r\nЭксплуатация ЦОД требует постоянного аудита процессов и документации по отраслевым стандартам, доработки инструкций на все рабочие ситуации. Без опыта подобной работы, управление дата-центром на должном уровне невозможно.\r\n\r\nВ 2018 году компания Linxdatacenter подтвердила соответствие качества управления центра обработки данных в Санкт-Петербурге требованиям операционной устойчивости Uptime Institute (Uptime Institute Management & Operations). Таким образом, Linxdatacenter стал единственным в России ЦОД с действующим сертификатом M&O Stamp of Approval.\r\n\r\nЭтот вид сертификации становится востребованным на нашем рынке. Несколько дата-центров сейчас находятся в процессе прохождения M&O. Для Linxdatacenter сертификация M&O стала приоритетом. Серьезное внимание было уделено подготовке площадки, доработке документации и обучению сотрудников. Весь проект занял около трех лет. Он потребовал серьезных изменений в рабочих процессах. Соответствие требованиям данного стандарта позволяет значительно сократить вероятность и серьезность инцидентов.\r\n\r\nДата-центр Linxdatacenter также имеет сертификаты ISO 27001, ISO 9001, PCI DSS, аттестован ФСТЭК по хранению персональных данных. Для банковских организаций, ритейлеров и предприятий, обрабатывающих персональные данные и связанных с пластиковыми картами наличие сертификата PCI DSS является одним из важнейших факторов при выборе ЦОД. Требования стандарта обязательны для соблюдения любыми компаниями, работающими с крупнейшими платёжными системами, и гарантируют защиту от кражи клиентской информации и других мошеннических действий при транзакциях. \r\n\r\nГолландская компания Linxdatacenter официально открыла дата-центр уровня Tier III в Петербурге в 2011 году. Инвестиции в его создание превысили 20 млн. евро. ЦОД спроектирован в соответствии с международными стандартами строительства дата-центров и с применением экологичных технологий для минимизации воздействия на окружающую среду.\r\n\r\n\r\nЦОД Linxdatacenter общей площадью (на тот момент) 7,5 тыс. кв. м. разместился в бизнес-центре Sky Trade.\r\n\r\nКомпания Linxdatacenter выступает также как оператор связи, ее волоконно-оптический канал соединяет ЦОД с узлом связи SPB-IX. Поэтому Linxdatacenter имеет прямой выход на этот главный магистральный узел в Северо-Западном регионе России, который, в свою очередь, напрямую соединен с узлом MSK-IX. \r\n\r\nЦОД оборудован двумя независимыми оптическими маршрутами до точек обмена трафиком и подключен к более чем 15 операторам связи. Собственная сеть связи компании охватывает все основные европейские столицы, включая Хельсинки, Таллин, Стокгольм, Амстердам, Лондон, Франкфурт, Будапешт, Бухарест и другие.\r\n\r\n\r\nЦОД Linxdatacenter задумывался как комфортная для клиентов площадка, обеспечивающая бесперебойную работу и нацеленная на максимальный результат. Часть залов дата-центра укомплектована модулями с изолированным холодным коридором.\r\n\r\nЦОД Linxdatacenter сегодня:\r\n\r\n\r\nПлощадь, кв.м \r\n\r\n9000\r\n\r\n\r\n\r\nПроектная мощность, МВатт \r\n\r\n12\r\n\r\n\r\n\r\nУровень надежности \r\n\r\nTier III\r\n\r\n\r\n\r\nСертификация \r\n\r\nISO 27001; ISO 9001; PCI DSS; аттестация на соответствие требованиям ФСТЭК по хранению персональных данных; Uptime Institute Management & Operations Stamp of Approval\r\n\r\n\r\n\r\nКол-во вводов внешнего энергоснабжения \r\n\r\n2 ввода от газопоршневой станции; 2 ввода от ДГУ; резервный ввод городской электросети\r\n\r\n\r\n\r\nРезервное энергоснабжение \r\n\r\n3 ДГУ Cummins\r\n\r\n\r\n\r\nОсновная система охлаждения \r\n\r\nдвухконтурная, с использованием чиллеров, прецизионных кондиционеров и фрикулинга\r\n\r\n\r\n\r\nРезервная система охлаждения \r\n\r\nсистема резервирования 2N и N+1\r\n\r\n\r\n\r\nСистема управления и диспетчеризации \r\n\r\nBMS Schneider Electric StruxureWare\r\n\r\n\r\n\r\nСистема безопасности\r\n\r\n6 уровней доступа; система видеонаблюдения; СКУД; установка дополнительных клиентских контуров безопасности; биометрическая система контроля доступа; служба безопасности с регулярными обходами объекта\r\n\r\n\r\n\r\nСвязность\r\n\r\nпрямое соединение с SPB-IX; более 20 операторов связи; 2 независимых оптических маршрута до точек обмена трафиком\r\n\r\n\r\n\r\nОсновное энергоснабжение обеспечивают две газопоршневые электростанции, оснащенные высокопроизводительными газовыми турбинами. Дизельная электростанция и городская электросеть служат резервными источниками питания. Таким образом, энергоснабжение ЦОД получает от двух газопоршневых станций, и одного резервного городского ввода. По существу, электропитание резервируется по схеме 3N. \r\n\r\nЕще одна особенность ЦОД – применение в нем абсорбционных холодильных машин (чиллеров). Для их работы используется тепло, выделяемое газопоршневой электростанцией. Чиллеры охлаждают воду, потребляя совсем немного электричества. Такие решения наряду с применением технологии естественного охлаждения (фрикулинга), когда при снижении температуры окружающей среды ниже +5 градусов задействуется сухая градирня, позволяют добиться высокой энергоэффективности дата-центра. Его расчетный коэффициент PUE составляет 1,33 при полной нагрузке.\r\n\r\n\r\nВход в ЦОД для клиентов. ЦОД оснащен надежными системами физической безопасности, в том числе передовыми средствами идентификации и контроля доступа. КПП — из пуленепробиваемого стекла. Непосредственно к машинным залам через турникет пройти могут только авторизованные лица. В дата-центре применяется многоуровневая система безопасности, включая контроль доступа 24/7 и систему электронных пропусков.\r\n \r\n\r\nLinxdatacenter имеет шесть уровней физического контроля доступа и охраны. Сотрудники службы безопасности работают круглосуточно и обходят объект каждые 2 часа. Все помещения и территория дата-центра просматриваются через камеры внутреннего и наружного наблюдения, видео о происходящем в дата-центре круглосуточно транслируется на мониторы службы охраны.\r\n\r\n\r\nВ ЦОД предусмотрена комфортабельная зона для переговоров и отдыха.\r\n\r\nПо периметру машинных залов установлены блоки кондиционеров с теплообменниками. Циркулирующая по ним вода охлаждает подаваемый под фальшпол воздух, который далее через перфорированные плитки фальшпола поступает в холодный коридор, Среднее потребление составляет 7 кВт на стойку. Для увеличения теплоотвода применяются средства локального охлаждения.\r\n \r\nПакет мониторинга StruxureWare поддерживает несколько основных и расширенных схем визуализации в режиме реального времени с функциями рассылки уведомлений и формирования отчетов о состоянии инженерной инфраструктуры и систем электропитания, охлаждения, безопасности и ИТ-инфраструктуры ЦОД.\r\n\r\nЗа пожарной безопасностью следит система обнаружения дыма VESDA и автоматическая газовая система пожаротушения. Пожаротушение выполнено классическим образом: датчики, баллоны с газом и желтые трубы.\r\n\r\n\r\nСтанция газового пожаротушения. Используется газ FM200. Запасы газа рассчитаны на тушение пожара в самом большом помещении. При обнаружении признаков продуктов горения в диспетчерскую подается соответствующий сигнал.\r\n\r\nВ ЦОД используется оборудование исключительно с энергопотреблением класса «А». Резервирование выполнено по схеме 2N. Все оборудование имеет два ввода питания, каждый из которых независимо оснащен ИБП и резервным питанием от дизель-генератора.\r\n\r\n\r\nПод фальшполом размещен шинопровод для питания оборудования. Схема резервирования системы электроснабжения 2N обеспечивается вплоть до шкафов с оборудованием.\r\n \r\n\r\nИсточники бесперебойного питания способны поддерживать автономную работу ЦОД в течение 15 минут.\r\n\r\nРезервное ЦОД энергоснабжение обеспечено дизельными генераторами и ИБП. После запуска дизель-генератора оборудование выходит на рабочую мощность уже через минуту, после чего дата-центр начинает питаться от дизель-генераторной установки, а не от аккумуляторных батарей. \r\n\r\n\r\nДата-центр оборудован тремя дизель генераторными установками (ДГУ) Cummins с резервированием по схеме N+1. Заключены договоры на поставку топлива для ДГУ с двумя независимыми поставщиками нефтепродуктов.\r\n \r\n\r\nЕсли пропадет питание от газопоршневых электростанций, то автоматика переводит нагрузку на ИБП и аккумуляторные батареи. 400 аккумуляторов обеспечивают 15 минут автономной работы при полной загрузке ЦОД. Большая часть используемого оборудования – от Schneider Group.\r\n\r\n\r\nНаряду с услугой по размещению оборудования, предоставлению выделенных и виртуальных серверов, услуги даата-центра включают управляемые сервисы ЦОД, такие как IааS, резервные операционные центры, услуги по хранению и резервному копированию данных, обеспечению безопасности данных, хостингу, аренде оборудования и удаленному обслуживанию.\r\n\r\n\r\nТак в действительности выглядит облако. Каждый шкаф оборудован управляемыми PDU, коммутационными панелями для медных и оптических кабелей.\r\n\r\nПо данным мировых аналитических агентств, расходы на дата-центры в 2019 году составят 16 млрд. долл. (IDC). А по итогам 2018 года, 60% всех компаний в мире использовали в своей работе ресурсы высокоразвитых технологичных дата-центров. На российском рынке, согласно прогнозам, к середине текущего года в эксплуатацию будет введено несколько сотен стоек. В целом в 2019 году ожидается ввод в эксплуатацию около трёх тысяч стоек, а в 2020 году – 2,35 тысячи.\r\n\r\nНовая площадка RUVDS предназначена для оказания клиентам услуг аренды виртуальных серверов VPS/VDS, причем услуги VPS в Санкт-Петербурге доступны клиентам компании по прежним низким ценам. Они ориентированы в первую очередь на корпоративный сегмент: государственные структуры, банки, биржевых игроков. RUVDS обладает также собственным дата-центром уровня TIER III в г. Королеве (Московская область), гермозонами в дата-центрах Interxion в Цюрихе (Швейцария), Equinix LD8 в Лондоне (Великобритания), и ММТС-9 (Москва, Россия). Все гермозоны отвечают уровню надежности не ниже TIER III, а высокая скорость работы и гибкие тарифные планы делают сервис привлекательным для клиентов.\r\n\r\nКак вы видите, обширная география и надёжные решения. Вопрос в том, где вы хотите хранить данные и почему вы выбираете тот или иной регион мира или России. В любом случае, мы знаем, как их отправить в лучшем направлении. \r\n\r\nКстати, расскажите нам, где (а ещё лучше и почему) вы предпочитаете хранить данные.\r\n\r\n	https://habr.com/ru/company/ruvds/blog/440064/	1ef080ca-09a9-474e-afa6-71cea68b971e
33	Пиар в айти: как жить, куда идти?	pr pr в it pr in it пиар в айти pr в интернете	Я знаю как минимум 5 браузеров, около 20 хостингов, 23 более-менее годных CRM-системы, 6 адекватных ERP, 12 нормальных систем управления проектами, 5 багтрекеров, сотни однообразных мобильных приложений, 4 крупных BPM-системы и проч. Перед каждой из компаний-разработчиков стоит задача показаться на глаза будущему пользователю первым и желательно его не разочаровать, потому что разубедить купить что-то другое будет дороже, сложнее и дольше. Это первая задача. Вторая задача — иметь такой имидж на рынке, чтобы к тебе были готовы идти лучшие кандидаты, чтобы о тебе мечтали новички и желательно за тебя боролись евангелисты. Третья задача — быть компанией, которой гордятся сотрудники. Если вы реально думаете, что всему этому может помочь пресс-релиз, у меня для вас плохие новости. Яндекс.Директ? Ну если есть 4 мешка денег… Участие в выставке? Ок, ваши блокноты точно разберут. Так что же такое современный пиар в айти (для zanuda mode — PR in IT)?  Он вообще существует? Опыт говорит, да.\r\n\r\n\r\nЭто я. Ну я пиарщик, я так вижу\r\n\r\nВ принципе, о PR в IT на Хабре была отличная статья от коллеги, которую я даже знаю. Но время неумолимо летит вперёд, кое-что меняется и сегодня о пиаре расскажу вам я, скромный незаметный пиарщик небольшой, но сильной компании, которой на российском рынке нужно было выжить — и выжили. Более ни слова обо мне и о моей работе, а то опять скачусь в пиар. Только каналы, советы и немного резкости. Кароч, о пиаре по-мужски.\r\n\r\nИтак, что же работает лучше всего? Лучше всего работает синергетический эффект, то есть комплекс мер и действий, которые вы будете повторять изо дня в день, не покладая рук. Именно они принесут вам наибольший результат. Из чего выбирать?\r\n\r\nЕго величество Контент\r\nЭто слово я скоро буду писать не просто с заглавной буквы, а сплошным капсом, потому что контент решает. Но это не совсем те статьи и упоминания, о которых вы подумали. Контент — это текстовое, визуальное и аудио окружение вашей компании, которое несёт эмоциональный посыл и рациональный смысл ваших продуктов. \r\n\r\nКорпоративный блог компании, блоги на площадках (например, на Хабре) — настоящее контентное лицо компании, потому что в них вам не нужно следовать каким-то требованиям, рамкам и нормативам СМИ. По сути вы пишите так, как хотите, и доносите до выращенной площадкой или вами аудитории самое важное, интересное, соответствующее вашим целям. Поэтому не стоит писать пресс-релизы, короткие новости, философские мысли вашего руководителя, сливы конкурентов и т.д. Пишите об успешных кейсах и факапах, о новых релизах, обучайте аудиторию связанным с вашей компанией знаниям, устройте тотальный ликбез в своей сфере. Это принесёт если не ошеломительный успех, то как минимум уважение и стабильный интерес публики. Как бонус — индексация в поисковиках, репосты, отсылки и многое другое.\r\n\r\nВаш сайт — это тоже контент. Много его или мало, красивый он или не очень — дело вкуса и ресурсов компании, но контент сайта должен быть полезным, информативным, точным и актуальным. Желательно, максимум информации без регистрации, СМС и десятка всплывающих окон. Не забывайте обновлять и перерабатывать информацию — поверьте, примета, что этого страдает SEO, не работает. Даже наоборот, уникальный обновляемый человекочитаемый контент — это всё, что любят поисковые системы.\r\n\r\nСтатьи в СМИ — штука сложная, причём либо она дорого стоит, либо требует огромной экспертизы. Решите для себя, чего вам проще достигнуть. В любом случае вам нужно учиться работать со СМИ и журналистами, искать информационные поводы, проводить встречи, отвечать на запросы, давать комментарии. Да, Forbes и Коммерсант вряд ли напишут про очередной хостинг, но зато можно интегрироваться в отраслевые СМИ, посвящённые телекому или ИТ. А это аудитория CTO и CIO. Перед тем, как платить за статью, обязательно запросите медиа-кит и поищите отзывы — иногда за красивым названием издания скрывается полный пшик.\r\n\r\nПосты в социальных сетях тоже контент, и они должны быть прежде всего заметными (только не как Reebok, плиз, — при всём шуме и типа росте продаж это полный шлак), а потом информативными. Пользователи листают ленту с друзьями, путешествиями, новостями, котиками, собачками и клипами, и среди этой милоты и ярмарки тщеславия они должны чётко считать мысль о том, что вот она, лучшая система управления проектами, потому что постит умный юмор, запомним-с. Берите пример с соды.\r\n\r\nКанал в Telegram — исключительно прекрасная штука, хотя прямых лидов вы с него не получите. Но его аудиторию довольно легко наращивать (упоминайте во всех интернет-активностях), с читателями легко взаимодействовать, а контент не требует сверх усилий. Просто пишите постоянно, в меру часто, по своей теме, иногда общайтесь с аудиторией. Можно вырасти в приличный отраслевой рупор, особенно, если использовать коммерческие размещения, кросс-посты и прочие способы нарастить аудиторию. Важный совет: гонитесь за качеством читателей, а не за их количеством — вряд ли вас услышат школьники, пришедшие с популярного юмористического канала с комиксами (хотя вы же помните, что многое зависит от сферы деятельности). \r\n\r\nНу и разумеется, ваши ролики на видеохостингах и аудио подкасты должны быть сильным и продуманным контентом, вплоть до тембра голоса и интонационной окраски.\r\n\r\nКто должен писать? В идеале — внутренняя редакция из числа сотрудников. Они знают ваш продукт в сто раз лучше, чем девочки с филфака на копирайтерской бирже. Если возможности и желания изыскать редакцию нет, привлекайте профессиональных с точки зрения продукта авторов: ИТ — это такая сфера, где техническая грамотность и экспертиза гораздо важнее литературных изысков. \r\n\r\nКонтекстная реклама \r\nЯндекс.Директ, Google AdWords, реклама в соц. сетях и на площадках хоть по сути своей и реклама, но прекрасно служат на благо пиара. Через них можно продвигать и продукты, и корпоративный блог, и события, и даже искать персонал. Я не буду цитировать десяток статей с Хабра и сотню с других площадок, просто тщательно составляйте объявления (и это опять контент), подбирайте слова, анализируйте результаты и исправляйте то, что работает плохо или не работает совсем. \r\n\r\nЭто в любом случае самый быстрый способ рассказать аудитории о себе, о новом продукте или релизе, предложить скидки, стимулировать активные продажи. Более оптимального сочетания скорости и эффективности пока не изобрели.\r\n\r\nИвенты \r\nИвенты в переводе с новояза это события, встречи, конференции, митапы, хакатоны, пресс-конференции, регаты, полёты, ланчи, дискотеки, да что угодно! Обязательно организуйте свои и участвуйте в чужих — так вы разовьете сеть контактов, увидите вживую своих пользователей и потенциальных клиентов, сможете найти новых сотрудников, транслировать свои знания и показать свою экспертизу. \r\n\r\nЗаранее позаботьтесь о раздатке, сувенирной продукции, сотрудниках на стенде, визуалах, визитках и особенно о коротких презентационных речах. Даже если ваш сотрудник просто идёт послушать какой-то семинар или едет на митап, хакатон и т.д., выдайте ему броскую фирменную одежду (поло, футболку, сорочку, даже галстук или бабочку — по ситуации). Так вы убьёте двух зайцев: с одной стороны, участники будут знать, кому адресовать опросы, с другой — сотрудник как бы уже демонстрирует лояльность и не каждый «агент» подойдёт его хантить.\r\n\r\nЯ видел разные мероприятия, организовывал тоже разные, были откровенны провалы и классные находки, но в целом условие простое — любое мероприятие и любое участие не должно быть позорным. Если вам по-честному нравится то, что вы приготовили, как правило, это нормально зайдёт. Только не врите самим себе.  \r\n\r\nКомментарии в СМИ\r\nЖурналисты — такие же люди, как и мы с вами. Ну то есть иногда очень даже ленивые и инертные, и не откажутся от помощи в работе. А лучшая помощь журналисту — хороший, честный экспертный комментарий без рекламы. Сейчас есть сервисы, где можно оставить запрос и откликнуться на него. Кроме этого, есть личные знакомства, социальные сети и проч. Но для того, чтобы к вам обратились, нужно, чтобы о вашей экспертизе знали. \r\n\r\nИменно поэтому пиарщик должен быть по возможности открытым, тщательно следить за своими словами и поддерживать имидж компании. Увы (а я вам так скажу — к счастью), если вы PR-менеджер, вы должны быть максимально осторожны и корректны в своих высказываниях (неплохая привычка, согласитесь). Но в идеальном варианте у вас должна быть «говорящая голова»  — внутренний эксперт, евангелист, а ещё лучше генеральный директор. Это люди, владеющие процессом, способные дать комментарий, интервью, быстро их согласовать. Ну или доверять своим сотрудникам настолько, чтобы подписать материал своим именем.\r\n\r\nCool story. На заре своей карьеры в очередной компании я написал отличную статью про сервера для известного журнала, отправил. Подписал, условно, «инженер биллинга, Иванов А.И.». Статью вернули по каким-то формальным причинам. Прошло полгода, мы отправили её же, подписав нашим генеральным.\r\n\r\nУгадайте, была ли она опубликована?Конечно.\r\n\r\nЭкспертиза\r\nВообще, раз зашла речь, отмечу, что формирование эксперта — это довольно дешёвый и эффективный метод пиара в ИТ и телекоме. Проблема в том, что это очень длительный процесс, который может занять от года до пяти и больше: сперва нужно обозначить эксперта, потом сформировать сообщество вокруг него, поддерживать его посылы и выступления, затем показать, это это именно эта экспертиза лучшая, наконец, поддерживать состояние эксперта. Очень — ОЧЕНЬ! — сложный процесс, на который вы потратите все нервы и пару ящиков виски афобазола.\r\n\r\nПресс-релизы\r\nСвой последний пресс-релиз я написал 3 года назад. Не для каждой компании они востребованы и актуальны: может так случиться, что вы просто будете тратить на них время. Для пресс-релиза должен быть хороший инфоповод, который интересен всем, а не вам и вашему боссу. Ну то есть ваш новый релиз, исправление мажорного бага или интеграция с Dropbox вряд ли кого-то заинтересует, а вот исследование, отчёт о крутой выставке, выпуск книги и проч. — вполне. \r\n\r\nСовет: не высасывайте поводы из пальца. Тут как с мальчиком, который кричал «волки, волки», а потом ему никто не поверил. Если журналист Иванов получит от компании «Мегакопытоинком» десяток пресс-релизов неинтересного содержания, одиннадцатый, интересный, с крутейшим заказным исследованием рынка, он может и не открыть. В общем, опять же, думайте: хорошо ли то, что вы делаете и кому оно может быть интересно.\r\n\r\nСувенирка и мерч\r\nПрекрасная трата денег, очень спорная история. Вот честно, если у меня есть любимый блокнот Мегафон, я ни за что не уйду на него с Теле2, потому что сувенирка — это не мотив и не подкуп, как почему-то считают многие люди из мира маркетинга. Нет, ребята, это благодарность, небольшое напоминание, знак внимания, забота, но никак не покупка лояльности. \r\n\r\nДолжна ли быть сувенирка в компании — большой вопрос (кстати, на Хабре была суперская дискуссия), но если уж вы решили делать какой-то мерч и сублимацию, то правило одно, записывайте: пусть эти штуки будут качественными. У меня есть толстовка, оставляющая комки начёса на футблоке (от компании топ-10), были сломанные ручки, зонты, испорченные сладости, неработающие флешки и т.д. И у меня есть потрясающий календарь на 2015 год, где на каждой странице тематически и дизайнерски обыграно моё имя. 2015 прошёл, а календарь я спрятал и сохранил — и, как видите, в 2019 пишу о нём на Хабре. Он стоил дешевле флешек, но насколько же приятнее. Кстати, одна из штук, которые мне импонируют — качественные виниловые наклейки с хорошим юмором. Клею на ноутбуки. \r\n\r\nСоциальная работа и благотворительность\r\nОчень неблагодарная история с точки зрения отношения клиентов, позиции руководства и возможностей. Много ограничений и т.д. Но оно того стоит: если вы по-настоящему поможете социально важным проектам, подарите нужные вещи учреждениям, обеспечите транспорт и т.д., вы получите множество упоминаний и хороший инфоповод, особенно для региональной прессы. \r\n\r\nЗнаю несколько кейсов, в том числе внутри федеральных компаний, когда социальные проекты были фактором именно внутреннего HR PR — сотрудники многое прощали руководству, которое оплачивало строительство спортивной школы, закупало канцтовары к 1 сентября для детских домов, оплачивало целевое лечение детей. Я сам гордился работой в такой компании.\r\n\r\nЗанимаясь благотворительностью, не связывайтесь с блогерами с неоднозначной репутацией, не втягивайтесь в сомнительные, непроверенные истории. В случае народного гнева против неудачной или мошеннической акции все спонсоры будут упомянуты, а силами социальных сетей ещё и весьма негативно и интенсивно. Это немного не та популярность, которая нужна (хотя управление негативом — отдельная песня!). \r\n\r\nПродуктовая интеграция и коллаборация\r\nЭти методы обычно работают в гигантских корпорациях и поднимают много шума: красный iPhone (кстати, ещё и социальная инициатива), новое веяние Microsoft loves Linux, косметические коллаборации брендов и блогеров и т.д. В принципе, если говорить грубо, в российских реалиях — это попытка купить лояльную аудиторию одной из сторон (а то и спаразитировать на ней), поэтому на контакт все идут неохотно. \r\n\r\nНо если для вас возможна какая-то внутриотраслевая коллаборация на равных — дерзайте, это отличный механизм обмена частью аудитории. Но это самый-самый сложный и дорогой способ.\r\n\r\nПартизанский маркетинг\r\nКонечно, выше насчёт самого сложного я соврал. Самый сложный, трудозатратный, зато почти бесплатный (для тех, кто не умеет считать реальные затраты) способ — это партизанский маркетинг. Речь, конечно, не о заказных отзывах на отзовиках и картах, а о реальной пахоте на ниве продвижения: партизанские выходы в СМИ (попробуйте обойти модерацию на Хабре, например), интересные акции на чужих конференциях, супер крутые рассылки, «альтруистичные» тематические блоги, SMM-вбросы, вирусные видео и картинки (каково вам яйцо в Instagram?). Нужны мозги, силы, энтузиазм, смелое, адекватное и в меру авантюрное руководство и много времени. Такие методы очень надёжны по результату, но крайне долгосрочны. Дерзайте, примеров для вдохновения — масса.\r\n\r\nЭто не все методы, есть ещё множество способов конкурентной борьбы, рекламы, продвижения и захвата рынка. Я перечисли те, которые испробовал именно в ИТ и готов отвечать за свой субъективный опыт.\r\n\r\nКонечно, я сейчас буду просто сволочью, если сделаю улыбочку и скажу, что всего можно добиться бесплатно, если иметь хороший продукт и быть востребованным и интересным бизнесом. Не особо про кого из нас можно такое сказать. Продвижение стоит денег, огромных сил, нереального и гибкого (местами хитрого) ума. Чтобы всё было успешно, нужно, чтобы сошлось: умный и смелый пиарщик, приемлемая разработка, верящий в продвижение руководитель (таких очень мало) и минимум войн внутри компании — купно за едино, в общем. Кстати, затраты на PR — величина, обратно пропорциональная толковости пиарщика. \r\n\r\nНу и раз Хабр разрешил пиар абсолютно бесплатных ивентов, то я вам расскажу об одном. Я сам хотел быть на нём и смотреть в глаза той самой аудитории пиарщиков IT (во влажных мечтах — так даже в роли спикера), но зима — штука скользкая, и я временно маломобилен. Короче, те, кто пойдёт, помните: вы пошли за себя и за того парня. Кейсориум для пиарщиков в ИТ «Просто о сложном. Продвижение ИТ-компаний: что действительно работает» пройдёт 27 февраля.\r\n\r\nP.S.: работу не ищу, за проекты не берусь, не сманиваюсь даже на 300 тыс. руб., организатором кейсориума не являюсь, не консультирую за деньги, но охотно готов комментировать и поболтать в личке. 	https://habr.com/ru/post/440688/	1ef080ca-09a9-474e-afa6-71cea68b971e
34	Обзор российского законодательства в сфере web доступности	Accessibility	Мне не раз доводилось сталкиваться с мнением, что доступность государственных сайтов закреплена законодательно, но при этом частные web ресурсы это некоим образом не касается, однако, в действительности, не все так однозначно. Этот пост — результат попытки разобраться с данным вопросом до конца и расставить все точки над i.\r\n\r\nСтатья 7 Конституции гласит, что «Российская Федерация — социальное государство, политика которого направлена на создание условий, обеспечивающих достойную жизнь и свободное развитие человека».\r\n\r\nВ соответствии со статьей 14 ФЗ №181-ФЗ «государство гарантирует инвалиду право на получение необходимой информации.»\r\n\r\nВ 2012 году для России вступила в силу конвенция по правам инвалидов, принятая резолюцией 61/106 Генеральной Ассамблеи ООН, в 9 статье которой говорится, что участники принимают надлежащие меры для обеспечения инвалидам доступа наравне с другими к физическому окружению, к транспорту, к информации и связи, включая информационно-коммуникационные технологии и системы.\r\n\r\nТаким образом, можно с уверенностью утверждать, что сайты, по крайней мере государственные ресурсы, должны бы быть в полной мере доступны для пользователей с любыми формами ограничений, однако это не совсем так.\r\n\r\nВ правовом поле РФ понятие доступности сайта (интернет ресурса) и соответствующие критерии его доступности, определяются национальным стандартом Российской федерации ГОСТ Р 52872-2012 введенного в действие 2014-01-01.\r\n\r\nВо многом данный стандарт похож на WCAG 2.0, который, собственно, и послужил прототипом, в нем так же существует 3 уровня доступности: А, АА, ААА и так же 4 принципа: воспринимаемость, надежность, управляемость и понятность, однако, отличия существуют, и одно из наиболее значительных скрыта уже в его названии: “Интернет-ресурсы. Требования доступности для инвалидов по зрению”, то есть он несколько сужает целевую группу пользователей, для которых интернет ресурс, соответствующий этому госту, будет доступен, ограничивая её инвалидами по зрению.\r\n\r\nГОСТ определяет некоторый набор требований, которому должен соответствовать сайт, однако, он утвержден для добровольного применения и может быть обязательным только при наличии какого-то нормативного документа, который непосредственно на это указывает.\r\n\r\nНаиболее общим и всеобъемлющим таким документом, тут не рассматриваются локальные нормативные акты актуальные только для какой-то отдельной организации или конкретного региона, является: Приказ Министерства связи и массовых коммуникаций РФ от 30.11.2015 N 483 «Об установлении Порядка обеспечения условий доступности для инвалидов по зрению официальных сайтов федеральных органов государственной власти, органов государственной власти субъектов Российской Федерации и органов местного самоуправления в сети». \r\n\r\nКак следует из названия Указа, он устанавливает порядок обеспечения доступности только сайтов органов государственной власти, то есть никак не относится к web ресурсам, к примеру частных компаний.\r\n\r\nНесмотря на то, что Указ был зарегистрирован в Минюсте 1 февраля 2016 г, то есть, примерно, через 2 года после того как в силу вступил ГОСТ Р 52872-2012 в самом Указе ГОСТ никак не упоминается, а требования к доступности ресурса прописываются в самом документе. Список этих требований весьма скуден и заключается в том, что гос. сайт должен иметь специальную версию для слабовидящих, которая предоставляет возможность изменять размер шрифта, картинки имеют альт тексты, а вместо PDF документов присутствуют текстовые альтернативы.\r\n\r\nОчевидно, что перечисленных мер совершенно недостаточно чтобы сделать сайт действительно доступным, возможно именно по этой причине, 11.03.2016 Роскомнадзор издал приказ N 97 «ОБ УТВЕРЖДЕНИИ РЕКОМЕНДАЦИЙ ПО ПОВЫШЕНИЮ ЭФФЕКТИВНОСТИ ОБЕСПЕЧЕНИЯ УСЛОВИЙ ДОСТУПНОСТИ ДЛЯ ИНВАЛИДОВ ПО ЗРЕНИЮ ОФИЦИАЛЬНЫХ САЙТОВ ФЕДЕРАЛЬНЫХ ОРГАНОВ ГОСУДАРСТВЕННОЙ ВЛАСТИ, ОРГАНОВ ГОСУДАРСТВЕННОЙ ВЛАСТИ СУБЪЕКТОВ РОССИЙСКОЙ ФЕДЕРАЦИИ И ОРГАНОВ МЕСТНОГО САМОУПРАВЛЕНИЯ В СЕТИ „ИНТЕРНЕТ“.\r\n\r\nВ данном документе рекомендуется указывать в техническом задании, что сайт должен соответствовать не только ГОСТу на доступность, но и даже самому WCAG 2.0, однако, и в самом названии Приказа, и в его тексте звучит слово “рекомендации”, “рекомендовано”, что недвусмысленно указывает на необязательность этих требований, это подтверждается отсутствием ссылок на данный приказ в судебных решениях по искам к администрациям различных муниципалитетов с требованиями сделать их сайт доступным.\r\n\r\nА таких судебных решений множество, начиная, примерно с конца 2015 года прокуратура активно подает иски в суды к самым различным организациям, не только таким как Администрация Торопецкого района Тверской области или Чиканская средняя общеобразовательная школа, но и обычным коммерческим предприятиям, к примеру, «Авиакомпания «Ангара».\r\n\r\nВ абсолютном большинстве случаев, ответчики по таким делам добровольно признают требования прокуратуры и берут на себя обязательство привести сайт в соответствие ГОСТу, благо список критериев, по которым предъявляются претензии, стандартно ограничивается двумя пунктами:\r\n\r\n\r\nСсылка, ведущая на специальную версию сайта для слабовидящих;\r\nВозможность масштабирования (увеличения и уменьшения) шрифта и элементов интерфейса официального сайта).\r\n\r\nВ некоторых случаях ответчик, в основном, когда ответчиком выступает коммерческое предприятие, пытается возражать и говорить, к примеру, что:\r\n“ГОСТ утвержден для добровольного применения и не является обязательным для исполнения»\r\n суд отвергает этот аргумент, утверждая что:\r\nон не является состоятельным и не может служить основанием для отказа в удовлетворении иска, поскольку требованиязакона о необходимости обеспечения беспрепятственного доступа инвалидов к информации являются императивными и подлежат неукоснительному исполнению на всей территории Российской Федерации.\r\nРезюме\r\nРоссийская нормативная база достаточно четко регламентирует, что инвалиды должны иметь возможность в полной мере использовать информационно телекоммуникационные сети, должны иметь полный и свободный доступ ко всем услугам и любой открытой информации. Существует ГОСТ, являющийся калькой с WCAG 2.0, который дает определение доступности сайта и предоставляет критерии этой доступности, но при этом нет ни одного федерального нормативного акта, который бы прямо указывал, что какие-то определенные группы сайтов обязательно должны соответствовать ГОСТу.\r\n\r\nОднако, не смотря на отсутствие четких указаний, суды неизменно встают на сторону прокуратуры, когда она пытается принудить различные организации сделать их сайт доступным путем предоставления возможности изменения масштабирования. К сожалению, на текущий момент остаётся не ясным, что решит суд, если истец пойдет в своих требованиях значительно дальше этой формальной функции и потребует действительного соответствия ГОСТу.	https://habr.com/ru/post/440648/	1ef080ca-09a9-474e-afa6-71cea68b971e
35	Корпоративный туалет	корпоративный ламанчский	Сергей понуро брел по коридорам вслед за главным инженером. Тот что-то рассказывал, показывал пальцем то на одну дверь, то на другую, объяснял, какие замечательные люди там трудятся, какие шедевры создают в разных областях. Поначалу Сергею было интересно, он шел рядом, вежливо слушал, послушно поворачивал голову вслед за указующим пальцем, но очень быстро устал.\r\n\r\nСильно выматывал диссонанс. Всегда, на всех предприятиях, на каждом сайте и собеседовании он слышал одно и то же. Мы молодцы, у нас команда, мы создаем шедевры, наши планы по развитию о-го-го, и ничто не сможет нас остановить! А потом, как приглядишься, или поработаешь с ними, то оказывается… Что там конкретно оказывается, не так уж и важно. Но оказывается обязательно.\r\n\r\nРешив, что больше это слушать невозможно, и срочно нужен перерыв, Сергей резко остановился.\r\n\r\n— Погодите! – громко сказал он. — Где у вас тут… Ну это… Ежикам позвонить можно?\r\n\r\nГлавный инженер остановился, обернулся и уставился на Сергея непонимающим взглядом.\r\n\r\n— Что, простите?\r\n\r\n— Ну ежикам позвонить. Посылку отправить. — с тупой улыбкой продолжал Сергей, но, видя, что понимания нет, прекратил использовать метафоры. — Туалет у вас где?\r\n\r\n— А… — главный инженер как будто испытал облегчение. — Идемте, я покажу.\r\n\r\nДойдя до ближайшего поворота, главный инженер свернул направо – там оказался короткий коридорчик, с двумя дверьми, слева и справа. Дальше Сергей догадался по традиционным рисункам, обозначающим разницу полов.\r\n\r\n— Столовая дальше по коридору. — показал рукой главный инженер. — Идите прямо, не ошибетесь. Я у входа подожду вас.\r\n\r\n— Хорошо. — ответил Сергей и решительно двинул в туалет.\r\n\r\nКомната для раздумий оказалась великолепной. Площадью метров пятьдесят, шесть кабинок, столько же умывальников, четыре сушки, два диспенсера с бумажными полотенцами. На полу – нескользкий кафель, или керамогранит – Сергей плохо разбирался, но ходить по такому полу было приятно, и о безопасности после уборки строители явно подумали.\r\n\r\nВсе кабинки были пусты, двери чуть приоткрыты. Сергей сначала подошел к умывальникам, немного посмотрел в зеркало – оно оказалось идеально чистым, ни одного пятнышка найти не удалось. Наконец, ему надоело строить из себя ревизорро, и он решительно направился к крайней кабинке, расположенной у стены.\r\nТак как никаких планов по поводу прямого назначения туалета у Сергея не было, он просто опустил крышку унитаза и уселся на нее сверху. Достал смартфон, и принялся бесцельно шариться по интернету. Проверил почту – ничего, кроме рекламы. В мессенджерах – тоже пусто. Начал читать новости.\r\n\r\nВнезапно донесся звук открывающейся двери – кто-то вошел в туалет. Сергея захлестнула смесь разнообразных чувств – от стыда до раздражения. Он за несколько лет привык к туалету в Кубе, там двери были сплошными, от пола до потолка, а здесь – стандартные кабинки, с огромным вырезом в нижней части. Сам не зная почему, Сергей поднял ноги так, чтобы их не было видно. Одну поставил на держатель туалетной бумаги, другую положил на дверную ручку.\r\n\r\n— Никого нет? – донесся знакомый голос.\r\n\r\n— Да вроде никого. – ответил незнакомый.\r\n\r\n— Проверь. — Сергей уже понял, кто говорит – давешний коммерческий директор. — Не хватало, чтобы кто-то подслушал.\r\n\r\nРаздались шаги. Они то останавливались, то возобновлялись. Сергей понял – человек шел вдоль ряда кабинок и у каждой останавливался. Его кабинка была последней. Сергей затаил дыхание и замер.\r\n\r\nРучка на миллиметр повернулась, дверь дернулась, но выдержала. Снизу виднелись два ярко начищенных штиблета. Послышалось шумное дыхание, вздох, и тень под дверью стала расползаться. Сергей догадался, что человек очень низко наклонился и разглядывает унитаз – ничего другого увидеть бы не удалось.\r\nЧерез несколько секунд тень вернулась в исходное состояние, дверь еще раз дернулась и послышались удаляющиеся шаги.\r\n\r\n— Вроде никого. – сказал незнакомый голос. — Че там случилось-то?\r\n\r\n— Да я сам пока не понял. – ответил коммерческий. — Короче. Приехал какой-то обрубок, черт знает откуда. Его собеседовали на должность ИТ-директора, но он отказался.\r\n\r\n— В смысле отказался?\r\n\r\n— В прямом. Зашел и заявил, что передумал и не будет у нас работать. А потом понес какую-то чушь о том, что у нас менеджеров по продажам слишком много. Упомянул тебя.\r\n\r\n— Меня? – незнакомый голос явно удивился.\r\n\r\n— Тебя. Говорил, что заходил к вам, и ты ему, как на духу, выложил всю свою работу.\r\n\r\n— Да я…\r\n\r\n— Погоди, не мельтеши. Сегодня кто-нибудь незнакомый приходил к вам?\r\n\r\n— Нет… Хотя, погоди… Программист новый приходил.\r\n\r\n— Ну вот, это он и есть. Никакой он нахрен не программист. Это вонючий говноед из какой-то деревни, который решил, что сможет тут резко подняться, опустив нас. И начал с тебя.\r\n\r\n— Да почему с меня-то? – Сергей уже догадался, что говорил давешний менеджер Коля.\r\n\r\n— Потому что ты, полудурок, свое гнилое хлебало разинул не с тем человеком. – голос коммерческого был очень злобным. – Надо было сидеть и молчать, думать головой, с кем и о чем ты разговариваешь.\r\n\r\n— Да если б я знал…\r\n\r\n— «Да если б я знал». — передразнил коммерческий. — Ты, Коля, дебил тупоголовый, и вылетишь отсюда, как пробка под Новый Год.\r\n\r\n— Да почему вылечу-то? – возмутился Коля. — Ну поговорил я с ним, что такого-то? Что он вам там нарассказывал?\r\n\r\n— Самое поганое, Коля, что он правду сказал. О клиентах, о заказах, о тебе и Ксюше твоей, кобыле смазливой.\r\n\r\n— А про нас с Ксюшей он откуда знает?\r\n\r\n— В смысле? А что у вас с Ксюшей?\r\n\r\n— Значит, не знает. – послышался вздох облегчения. – Да так, ничего особенного.\r\n\r\n— Твою мать… — раздраженно выругался коммерческий. — Ты что, шпили-вили еще тут устроил, кобелина? Коля, ты дебил? Я жене твоей что должен говорить?\r\n\r\n— Да ничего я не устроил! Просто пару раз в ресторан с ней сходил, на обед, только и всего!\r\n\r\n— Сука, смотри у меня! — коммерческий явно не поверил. — Хоть брат мой и говна кусок, сраный алкаш и грязный обмудок, но я матери обещал, что племяннице помогу и тебя, придурка, на работу устрою. А этот, который с Кургана, подсел генералу на ухо и навешал, что тебя уволить надо.\r\n\r\n— За что? – голос Коли дрожал. — Я же хорошо работаю, и продажи у меня – одни из лучших! Я хороший менеджер!\r\n\r\n— Твою мать, меня-то не лечи. — злобно ответил коммерческий. — Все твои продажи – хрень на постном масле, и сидишь ты тут только по одной причине.\r\n\r\nВ этот момент Сергей подумал, что такой шанс упускать нельзя. В руке до сих пор оставался смартфон, и, недолго порывшись, Сергей включил запись на диктофоне.\r\n\r\n— Ну что делать-то, а? – взмолился Коля. — Хочешь, я вообще весь процент от продаж буду тебе оставлять? Меня все равно никуда больше не берут, так я хоть оклад буду получать! Помоги, а?\r\n\r\n— Помогу. – сухо ответил коммерческий. — И не потому, что ты муж моей племянницы. Сумма слишком большая, чтобы миндальничать. Так, ладно, чего делать-то…\r\n\r\nЗа дверью стало так тихо, что Сергей чувствовал биение своего сердца. Лишь изредка раздавались едва уловимые звуки – кто-то переступал с ноги на ногу, шуршала одежда или слышался вздох.\r\n\r\n— Надо звонить Гене. – наконец, изрек коммерческий. — Подготовим почву.\r\n\r\nСергей напряженно вслушивался, но не мог понять, что происходит за дверью кабинки.\r\n\r\n— Гена, привет. – раздался голос коммерческого. — Ты один? Можешь куда-нибудь выйти? Что? А, понял. На какой номер? Да, говори, записываю.\r\n\r\nДальше коммерческий громко продиктовал цифры номера – видимо, их записывал Коля.\r\n\r\n— Че он там? — спросил Коля.\r\n\r\n— Палится. Другой номер дал. Видимо, прослушивают, или я не знаю что. Черт их пойми, этих ритейлеров.\r\n\r\n— Да ваще, страху только нагоняют, я давно уже…\r\n\r\nРаздался смачный звук подзатыльника.\r\n\r\n— Сука, молчи лучше. – шепотом закричал коммерческий. – Делать мне больше нечего, только стоять среди запаха говнища и рагребать за тобой.\r\n\r\n— Так а я тут причем? – в голосе Коли послышался вызов. — Ты не за мной, а за собой подгребаешь. За свои деньги печешься, а не за мои.\r\n\r\nСнова раздался звук подзатыльника.\r\n\r\n— Убери свои руки, козел! – завопил Коля. – Я тебе не сявка какая-нибудь, а нормальный пацан! Хера ты меня по башке лупишь?\r\n\r\n— Был бы ты пацан, не просился бы на работу, а сам бы в жизни устроился. – зло ответил коммерческий. – А ты, Коля, просто мелкий прихвостень, приживала, нашлепка. Ты даже не сел на тему – это бы достойно уважения было. Тебя на тему посадили. Разумеется, не ради твоего блага. Нахрен никому в этой жизни не нужно твое благо. Сдохнешь – никто не расстроится. Даже племянница обрадуется, что избавилась от тебя, твоих попоек ежедневных и скандалов с криками, какой ты, сука, кормилец семьи. Так что заткнись и не мешай. Я Гене звонить буду.\r\n\r\n— Да я… — не унимался Коля.\r\n\r\n— Еще слово, и я сам тебя выгоню, даже с марамойкой твоей попрощаться не дам. – в голосе коммерческого прозвучали стальные нотки.\r\n\r\nУстановившаяся тишина подсказала Сергею, что Коля угомонился.\r\n\r\n— Гена, да, привет. Слушай, у нас тут проблема нарисовалась. Колю хотят уволить… Да неважно, кто именно… Блин, Гена, слушай и не перебивай. Если хочешь свою долю сохранить… Это ты своему директору будешь о своих достижениях, а я ему о других твоих успехах расскажу… Гена, ты не понял. У меня записаны все разговоры с тобой. Переводы я со своей карточки делал, и все транзакции поднять могу… Ну и отлично, теперь слушай. Тебе, вероятно, позвонят. Будут спрашивать про Колю. Делай что хочешь, но надо, чтобы у наших создалось впечатление, что ты готов работать только с ним. Несколько часов у тебя есть, придумай, чем таким Коля хорош, и почему без него ты найдешь другого поставщика… Нет, я не удалю записи… Вбей себе в голову – ты мой. Я тебя знаю, Гена, знаю твою работу лучше тебя самого. Если я перестану тебе платить, то тебя выпнут, потому что ты даже близко не представляешь себе, что за пакеты ты покупаешь, и почему именно у нас… Ну и отлично. Рад, что ты понял.\r\n\r\nНесколько секунд было тихо.\r\n\r\n— Что там? – спросил, наконец, Коля.\r\n\r\n— Живи пока. – сухо ответил коммерческий. – Гена тот еще мудак, но немного поголовастее тебя. Придумает что-нибудь.\r\n\r\n— Мне что делать?\r\n\r\n— Иди, в компьютере поройся, в почте особенно, поищи любые упоминания обо мне, Гене и… Ну, ты понял. Чтобы комар носа не подточил. Только, Бога ради, не зови админов.\r\n\r\n— Кого?\r\n\r\n— Айтишников.\r\n\r\n— А как я без них…\r\n\r\n— Что как? Почту открыть не сможешь?\r\n\r\n— Найду как.\r\n\r\nТут коммерческий грязно выругался.\r\n\r\n— Ты настолько тупой, Коля, что я не перестаю поражаться. Как ты в штаны себе не наваливаешь, когда у тебя понос? Ручками, глазками, каждое письмо прочитай и удали, если хоть на йоту тебе покажется, что оно как-то компрометирует меня или Гену. Понял?\r\n\r\n— Понял.\r\n\r\n— Все, разошлись.\r\n\r\nТут, по всем законам Мерфи, смартфон Сергея издал неприятный и ужасно громкий писк. Мельком глянув на экран, Сергей заметил, что диктофон сигнализировал об окончании записи в связи с исчерпанием свободного места на устройстве.\r\n\r\nНебольшая надежда на то, что писк никто не услышал, сохранялась несколько секунд, но ее уничтожил резкий удар в дверь, словно ее пнули ногой. Потом еще один, и еще.\r\n\r\nСергей понял, что дело плохо, и уперся обеими ногами в дверь. Удары становились все сильнее и чаще – видимо, принялись выламывать вдвоем. Наконец, хлипкий замок, рассчитанный на интеллигентное обращение, с треском сломался и дверь открылась.\r\n\r\nСергей застыл в нелепой позе, сидя на крышке унитаза, с висящими в воздухе ногами, словно приготовился к приему у гинеколога. Злые, остервенелые лица коммерческого и Коли смотрели на него.\r\n\r\n— Ну что, посрал?	https://habr.com/ru/post/440634/	1ef080ca-09a9-474e-afa6-71cea68b971e
36	Управление изменениями у клиентов по модели ADKAR	wrike change management управление изменениями adkar	Внедрение решения по управлению проектами всегда связано с организационными изменениями. Для того чтобы продукт значимо повысил эффективность процессов, многие из них требуется адаптировать. Известно, что любые изменения в компаниях начинаются с людей. Можно досконально прописать должностные инструкции, все объяснить и настроить, но если члены команды не готовы к изменениям и/или не хотят ничего менять, результатов от внедрения системы не будет вообще или они окажутся незначительными. \r\n\r\nИменно поэтому каждый customer success менеджер в компании Wrike должен быть экспертом по управлению организационными изменениями и уметь проводить мероприятия по внедрению этих изменений. В данной статье мы разберем одну из наиболее известных моделей по управлению изменениями — ADKAR — и сопроводим описание каждой из ее фаз примерами и пояснениями.\r\n\r\n\r\n\r\nADKAR — это модель, представленная автором Джеффри Хаяттом, в книге “ADKAR: A Model for Change in Business, Government and Our Community”. Сегодня эта модель широко используется как пошаговая инструкция для управления изменениями, как во множестве компаний из рейтинга Fortune 500, так и правительственными организациями, такими как Министерство обороны США. \r\n\r\nКнига, сама по себе, не является сосредоточением фундаментально новых идей. Скорее, речь идет о том, что автору хорошо удалось сформулировать и описать систему на основе известных концепций, которую необходимо последовательно, этап за этапом, внедрять для успешного осуществления изменений.\r\n\r\nОдна из ключевых идей, которая встречается практически в любом труде по управлению изменениями, заключается в том, что изменения — это не момент, а процесс. В соответствии с моделью ADKAR, этот процесс состоит из 5 ключевых этапов: \r\n\r\nA — Awareness — Осведомленность о необходимости изменения\r\nD — Desire — желание участвовать в изменениях\r\nK — Knowledge — знание, что именно требуется сделать для изменений\r\nA — Ability — умение/способность воплощать изменения\r\nR — Reinforcement — подкрепление реализованных изменений\r\n\r\nТакже важнейшим аспектом, выделяемым автором, является то, что для успешного внедрения изменений, все этапы должны быть пройдены компанией от начала до конца. Соответственно, если любой из этапов пропустить, изменения будут обречены на провал.\r\n\r\nДавайте коротко разберем каждый из этапов.\r\n\r\nОсведомленность о необходимости изменений\r\nКлючевой задачей на первом этапе является информирование сотрудников организации о природе предстоящих изменений. Здесь необходимо донести до коллектива, почему требуется провести изменения и каковы потенциальные риски, если изменений не будет. \r\n\r\nПриводится 5 факторов, которые влияют на понимание сотрудниками потребности в изменениях:\r\n\r\nФактор 1: персональное видение текущей ситуации\r\nФактор 2: как сотрудник воспринимает проблемы\r\nФактор 3: доверие к лицу, сообщающем о необходимости изменений\r\nФактор 4: слухи и недостоверная информация, существующие в организации\r\nФактор 5: воспринимаемая сотрудниками значимость осуществления изменений\r\n\r\nПример:\r\nКаждый раз, когда ключевой сотрудник компании — клиента принимает решение внедрить Wrike для повышения эффективности деятельности организации, это решение становится отправной точкой в начале процесса изменений. Вместе с Customer Success менеджером из Wrike, представитель клиента обсуждает причины, ставшие поводом для приобретения продукта (т.н. “Болевые точки” (pain points) организации). Типовыми причинами можно назвать разрозненную коммуникацию между сотрудниками (если, к примеру, разные сотрудники используют различные инструменты, такие как электронная почта, what’s up, slack, Google spreadsheets и др. И, в связи с этим, “куски” коммуникации по проектам разбросаны среди них), отсутствие прозрачности процессов, отсутствие четкого понимания, кто ответственен за те или иные этапы проектов и др. \r\n\r\nПосле того как причины сформулированы, определяются цели на отчетные период (как правило, на год). Затем руководству компании необходимо донести до сотрудников информацию о том, какие изменения предстоят, почему они требуются и каковы последствия того, что изменения не будут проведены. Традиционно, здесь возможен позитивный подход, негативный и их комбинация. \r\n\r\nПростой пример: сегодня все больше и больше рынков становятся высоко конкурентными, в связи с этим компания просто не может позволить себе оставаться неэффективной. Если изменений не будет, то естественными последствиями могут быть потеря доли рынка или полная ликвидация организации. \r\n\r\nЖелание участвовать в изменениях\r\nНа втором этапе главным моментом является создание условий, чтобы сотрудники захотели участвовать в процессе изменений, то есть были для этого достаточно мотивированы. Для руководства данный этап является более сложным, по сравнению с обеспечением осведомленности о необходимости изменений, так как в первом случае задачей является лишь донести информацию до сотрудников, а “формирование” желания не находится под его (руководства) прямым контролем. \r\n\r\nВ соответствии с моделью, существует 4 фактора, влияющих на желание сотрудников участвовать в изменениях:\r\n\r\nФактор 1: Природа изменений (WIIFM*)\r\n*здесь требуется дополнительное пояснение. В любой концепции или модели по управлению изменениями вы всегда встретите в той или иной формулировке фразу “Нельзя заставить меняться. Человек изменится только если сам этого захочет”. С этим принципом неразрывно связано понятие “WIIFM” — “What’s In It For Me” — что лично мне (сотруднику) будет полезного от этих изменений? При планировании организационных изменений, руководству всегда необходимо начинать обсуждение с этого вопроса.\r\nФактор 2: Организационный контекст для изменений\r\nФактор 3: Личное положение сотрудника в организации\r\nФактор 4: Индивидуальные факторы, которые мотивируют именно этого сотрудника\r\n\r\nПример:\r\nОдной из главных задач, которую совместно решают ЛПР со стороны клиента и Customer Success менеджер со стороны Wrike, является обеспечение повсеместного внедрения продукта и его использование всеми сотрудниками. Но само по себе принятие решения руководством об использовании Wrike не является тождественным тому, что все члены команды на следующий же день начнут им пользоваться. Они могут прекрасно понимать, почему руководство решило внедрить продукт, уметь им пользоваться, но просто не хотеть этого делать.\r\n\r\nПричин для этого великое множество. Сотрудники могут считать, что это просто лишняя трата времени, иметь негативный опыт использования подобного решения и др. О других причинах вы можете узнать в статье “6 типичных проблем при внедрении решения по управлению проектами”. \r\n\r\nНеобходимо найти конкретные плюсы от использования продукта для сотрудника, чтобы тот захотел пользоваться продуктом. Простой пример: \r\n\r\nРаспространенными причинами внедрения Wrike является обеспечение прозрачности деятельности и экономия времени, которое традиционно тратилось на неэффективно. Типовой кейс: креативная команда до покупки Wrike проводила большое количество совещаний в течение недели, чтобы обсудить правки на макетах и получить согласование промежуточных и/или финальных версий у арт-директора. После внедрения Wrike арт-директор собирает дизайнеров и говорит им следующее: “мы собираемся 2-3 раза в неделю, чтобы обсудить правки. Если вы будете своевременно реагировать на proofing — комментарии в Wrike и все готовые к согласованию макеты будете добавлять в review, мы можем отказаться от практики данных совещаний, т.к. я буду и так все видеть в своем рабочем пространстве”. Ситуация категории win-win. Сотрудник выигрывает, потому что у него высвобождается дополнительное время для креативной работы, а для руководителя работа над всеми креативными макетами становится прозрачной.\r\n\r\nНеобходимые знания для осуществления изменений\r\nИтак, сотрудники осведомлены о необходимости изменений и обладают достаточной мотивацией, чтобы в них участвовать. Наступает время третьего этапа модели ADKAR, связанного с получением необходимых знаний для успешного осуществления изменений. \r\n\r\nАвтор выделяет следующие факторы, связанные с данным этапом:\r\n\r\nФактор 1: Текущие знания сотрудников до начала изменений\r\nФактор 2: Способность сотрудников к обучению\r\nФактор 3: Имеющиеся в распоряжении организации ресурсы для обучения\r\nФактор 4: Доступ к требуемой для обучения информации и ее (информации) существование в принципе\r\n\r\nПример:\r\nВ Wrike есть целый набор различных процессов, связанных с обучением сотрудников клиента продукту. Они включают в себя индивидуальные тренинги, которые проводятся специалистом по внедрению или Customer Success менеджером; вебинары, которые сотрудники могут посетить самостоятельно; так называемый process mapping, в ходе которого существующие в организации процессы переносятся в Wrike и сотрудникам проводится дополнительное обучение по тому, как эти процессы теперь функционируют в новой среде.\r\n\r\nУмения/способности воплощать изменения\r\nЧетвертый этап модели ADKAR связан с умениями сотрудников воплощать изменения в жизнь и достигать требуемого уровня показателей. Наличие знаний как таковых часто не является достаточным. Сотрудники, прошедшие обучение по изменениям в процессам, системам и функциональным ролям, автоматически не становятся специалистами в этих областях. \r\n\r\nКогда сотрудник обладает необходимыми умениями для воплощения изменений и применяет эти умения на практике, сами изменения становятся видимыми, а их эффект — измеримым. При том, чтодля успешного управления изменениями по модели ADKAR необходимо последовательное движение от первого к пятому этапу, именно четвертый этап является наиболее показательным, так как он отражает, в том числе, успешное прохождение предыдущих. Разумеется, справедливо и обратное утверждение — неудачное прохождение любого из этапов 1-3 обязательно “всплывет” на четвертом.\r\n\r\nВ модели приводится 5 факторов, влияющих на способность сотрудника успешно внедрять изменения:\r\n\r\nФактор 1: Психологические барьеры\r\nФактор 2: Физические способности\r\nФактор 3: Интеллектуальные способности\r\nФактор 4: Время, необходимое на развитие требуемых навыков\r\nФактор 5: Наличие у организации ресурсов, необходимых для развития навыков\r\n\r\nПример:\r\nНесмотря на наличие целого ряда направлений, существующих для обучения сотрудников клиентов продукту, мы в Wrike всегда сообщаем клиенту на начальном этапе, что внедрение продукта и успешное его использование требует значительного времени. Во многом, это обусловлено очевидным фактом, что у каждой организации есть своя специфика. Мы можем рассказать, как создавать проект, как добавлять в него задачи и каким инструментарием для мониторинга обладает интерфейс. Но сотрудникам предстоит самостоятельно научиться использовать продукт в соответствии с принятыми в компании правилами, процессами и имеющейся организационной структурой.\r\n\r\nНередко, подход к переносу того или иного бизнес-процесса компании является весьма нетривиальным. В таких случаях даже тем сотрудникам организации клиента, которые пользуются продуктом продолжительное время, требуется помощь. В таких ситуациях содействие со стороны Wrike оказывают Customer Success менеджеры и специалисты по внедрению. Первые делятся лучшими практиками использования продукта (и, очевидно, что со временем количество таких практик становится все больше) и оказывают поддержку на стратегическом уровне. Вторые оказывают тактическую поддержку и предлагают конкретные пошаговые варианты решения проблем клиента.\r\n\r\nПодкрепление реализованных изменений\r\nНа финальном, пятом, этапе основной задачей является подкрепление и поддержка уже реализованных изменений как на уровне каждого сотрудника, так и на уровне организации в целом. Как правило, речь идет о позитивных подкреплениях, но возможны и другие сценарии.\r\n\r\nАвтор модели выделяет 4 фактора, которые влияют на процесс подкрепления изменений:\r\n\r\nФактор 1: Значимость изменений для сотрудника, на которого они оказали воздействие\r\nФактор 2: Ассоциация подкрепления с конкретными достигнутыми результатами\r\nФактор 3: Отсутствие негативных последствий*\r\nПояснение: здесь имеется в виду тот факт, что если реализованные изменения имели какие-либо негативные последствия для сотрудника, он вряд ли будет и дальше способствовать данным изменениям. К примеру, если в процессе изменений поменялась организационная структура и сотрудник потерял привычный статус, он может противиться изменениям (в т.ч. и после их реализации). В таких случаях необходимо либо найти решение, которое устроит как сотрудника, так и организацию, либо расстаться с данным сотрудником.\r\nФактор 4: Построение системы для поддержки изменений\r\n\r\nПример:\r\nВ практике мы встречали несколько интересных примеров, как руководители компаний, внедрявших Wrike подкрепляли изменения, связанные с его внедрением. \r\n\r\nВ частности, ряд клиентов транслирует дэшборды с задачами на разных этапах их выполнения на широкоформатные ТВ, висящие по всему офису. Акцент был сделан, в частности, на виджет с завершенными задачами, чтобы все сотрудники могли видеть, как много задач уже было завершено к данному этапу. \r\n\r\nВо многих случаях само повышение эффективности становилось для сотрудников лучшей наградой. Мы постоянно слышим массу историй на звонках с клиентами, когда сотрудники рассказывают, что “наконец-то начали вовремя уходить с работы”.\r\n\r\nМодель ADKAR проста во внедрении и очень подробно описана автором. Это тот редкий случай, когда приводится не набор оторванных от реальности концепций, а пошаговое руководство в форме “бери и внедряй”. Не удивительно, что она является настолько популярной среди ведущих компаний. Настоятельно рекомендуем к ознакомлению и тестированию.	https://habr.com/ru/company/wrike/blog/440326/	1ef080ca-09a9-474e-afa6-71cea68b971e
37	Несколько слов о физических теориях как приближениях реального мира	Физика история развития науки	\r\nПредисловие\r\nРешил написать небольшую статью, рассматривающую современный уровень развития некоторых физических теорий (в моём уровне понимания) в контексте сравнения с теориями, названными классической нерелятивистской физикой.\r\n\r\nВ первую очередь хочу указать, что классической нерелятивистской физикой я называю часть теоретической физики, которая была создана в второй половине XVIII — первой половине XIX века Лагранжем, Гамильтоном и позже расширены другими физиками в течении XIX века (я тут не упоминаю имена этих физиков, которые могли способствовать приведению теории и её мат. аппарата к современному виду, включая уроженцев Российской империи).\r\n\r\nКлассическая нерелятивистская механика и теория гравитации\r\nОсновы классической механики были заложены И. Ньютоном, сформулировавшим свои «3 закона» в труде «Математические начала натуральной философии» (год издания — 1687), хотя следует упомянуть принцип относительности, сформулированный Г. Галилеем в 1632 году (тоже использую год издания).\r\n\r\nВ самом простейшем случае можно сказать, что механика Ньютона (как и Лагранжа, и Гамильтона) может быть сформулирована в виде:\r\n\r\nгде p — это импульс, в общем случае — так называемый «обобщенный импульс», а F — сила. В отсутствии магнитного поля (а слабое или сильное взаимодействие я здесь тем более не упоминаю) эта сила может быть консервативной. Консервативной называется такая сила, работа которой на любой траектории не зависит от формы траектории и скорости движения (это в том числе отсылка к релятивистской динамике, фактически получается, что в СТО не существует понятия «консервативная сила»).\r\n\r\nДля консервативных сил упомянутый выше закон может быть переписан в виде\r\n\r\nгде x — обобщенная координата, а p — соответствующий ей обобщенный импульс.\r\n\r\nПодобная формулировка «2 закона Ньютона» является более общей, т. к. она получается при записи уравнения Лагранжа или уравнения Гамильтона. Уравнения Лагранжа и Гамильтона выводятся из принципа наименьшего действия. Действие — интеграл, который имеет размерность Дж *с и берется между 2 конфигурациями системы, то есть наборами координат и импульсов (x,p). В общем случае он выражается разными способами для разных подходов к классической механике.\r\n\r\nЕсли говорить о классической теории гравитации, то она формулируется в виде закона гравитации Ньютона (через силу, а можно и записать через потенциальную энергию)\r\n\r\nгде сила действует в направлении притягивающего тела (этим сила гравитации отличается от электрической силы, которая создает отталкивание для одинаковых зарядов).\r\n\r\nФормулировка закона гравитации через потенциальную энергию может быть выражена простейшей фразой:\r\n\r\nСумма кинетической энергии T(v) и потенциальной энергии U(r) остается постоянной все время движения частицы (системы частиц) вдоль их траектории.\r\nИз этого закона можно получить простейшее уравнение:\r\n\r\nВ том случае, если мы смогли свести задачу к 1-мерной координате r (расстояние между центрами масс этих 2 тел) — мы можем записать решение задачи через интеграл:\r\n\r\nДальнейший метод решения — взять корень и дальше получаем простейшее дифференциальное уравнение с разделяющимися переменными. Тут возникает 2 проблемы:\r\n\r\n\r\nВ общем случае произвольного потенциала U(r) мы можем вообще не суметь взять этот интеграл.\r\nВместо привычного решения задачи r = r(t) мы получаем решение t = t(r). \r\n\r\nВ окончании этого раздела хочу добавить, что до создания А. Эйнштейном своей формы теории относительности во второй половине XIX века Дж. Максвелл обобщил законы для электрического и магнитного поля (которые начали формулировать за 35 лет до этого, но по отдельности). До этого были записаны такие теор. формулы, как формула силы Лоренца.\r\n\r\nРоль Хевисайда в создании самого понятия '4 уравнения Максвелла'Хевисайд упростил для использования учёными оригинальные результаты Максвелла. Эта новая формулировка дала четыре векторных уравнения, известных теперь как уравнения Максвелла. Хевисайд ввёл так называемую функцию Хевисайда, используемую для моделирования электрического тока в цепи. Хевисайд разработал понятие вектора и векторный анализ. Хевисайд создал операторный метод для линейных дифференциальных уравнений.\r\n\r\nСила Лоренца (деленная на электрический заряд частицы) тут интересна тем, что является по сути приближением для понятия «напряженность электрического поля E в системе отсчета частицы, движущейся со скоростью v» для скоростей v, много меньших скорости света.\r\n\r\nСпециальная теория относительности\r\nСпециальная теория относительности (СТО) была создана в 1892-1905 годах трудами Х. Лоренца, А. Пуанкаре и А. Эйнштейна. Описывает инерциальные системы отсчета (ИСО), строго говоря её постулаты нарушаются сразу, как только система отсчета перестает быть инерциальной (характер движения системы перестает быть равномерным и прямолинейным). В квантовой теории поля (по моему скромному пониманию) работает такой «закон», что после нахождения СО в состоянии неинерциального движения первый из упомянутых ниже постулатов перестает выполняться вообще, даже на время будущего равномерного и прямолинейного движения.\r\nНаверное все помнят постулаты СТО, из которых выводятся преобразования Лоренца, но я сформулирую их следующим образом:\r\n\r\n\r\nФормулировка всех законов физики не зависит от того, находится система в покое или движется равномерно и прямолинейно.\r\nИнвариантность фазы электромагнитной волны относительно перехода в другую ИСО, также известная как сохранение квадрата интервала между двумя событиями.\r\n\r\nИз необходимых для дальнейшего рассмотрения формул упомяну следующую:\r\n\r\nОна описывает связь между энергией частицы, импульсом и массой покоя.\r\n\r\nОдно из следствий СТО — частица с массой покоя выше 0 не может достигнуть скорости света, хотя ещё энергия может расти выше «классического» предела\r\n\r\nДанное утверждение согласуется с тем фактом, что элементарная частица может иметь кинетическую энергию, которая существенно больше этой величины.\r\n\r\nИ конечно следует упомянуть метрику Лоренца, также известную, как метрика Минковского:\r\n\r\nЧерез эту метрику можно ввести понятие «длина 4-вектора», к 4-векторам относятся:\r\n\r\n В этом случае я применил систему обозначений, при которой время измеряется в метрах, а скорость света равна единице. То есть, «хорошая» запись 4-вектора требует, чтобы он состоял из 4 величин одинаковой размерности.\r\n\r\nВажное свойство любого 4-вектора — его значение при переходе в другую систему отсчета преобразуется так же, как соответствующие компоненты 4-координаты.\r\n\r\nВ электродинамике существует такая величина, как 4-мерная плотность тока. Вектор 4-тока может быть записан в виде:\r\n\r\n\r\nТакже следует упомянуть, что существуют ковариантные (как первая запись 4-тока) и контравариантные (как вторая запись) вектора. Переход между этими векторами осуществляется по формуле:\r\n\r\nздесь применено соглашение Эйнштейна, которое означает, что в этой записи подразумевается суммирование по паре одинаковых индексов, расположенных в верху и внизу.\r\n\r\nИ так как статья о приближениях, конечно упомяну, как можно показать приближение СТО к механике Ньютона и как можно использовать. Из формулы (1) можно выразить энергию через импульс:\r\n\r\nКинетическую энергию можно выразить как разницу между полной энергией E и энергией покоя:\r\n\r\nИ в приближении p << mc получаем одну функцию для записи кинетической энергии через импульс:\r\n \r\nБез учета каких либо полей (электрических, магнитных, гравитационных и т.д.), создающих потенциальную энергию, эта формула может быть записана как частный случай функции Гамильтона (см. выше упоминание про механику Лагранжа и механику Гамильтона):\r\n\r\nпри более общем случае\r\n\r\nНе обойтись в теории относительности и без тензора энергии-импульса (тензор может быть записан в виде матрицы размерностью 4 на 4). Я запишу определение этого тензора:\r\nТензор энергии-импульса — симметричный тензор второго ранга, описывающий плотность и поток энергии и импульса полей материи.\r\n\r\nЕсть формулы для компонент этого тензора самых разных веществ и полей, например — покоящейся жидкости или электромагнитного поля (то есть СТО оперирует электромагнитным полем как полем, обладающим плотностью энергии, потоком энергии и импульса). В последнем случае тензор энергии-импульса может быть записан через  тензор электромагнитного поля F:\r\n\r\nКак окончание этого раздела упомяну о понятии лоренц-инвариантности, точнее — случай применения к физическим величинам. Данное свойство определяют следующим образом:\r\nЛоренц-инвариантностью называют свойство какой-нибудь величины сохраняться при преобразованиях Лоренца (обычно имеется в виду скалярная величина, однако встречается и применение этого термина к 4-векторам или тензорам, имея в виду не их конкретное представление, а «сами геометрические объекты»).\r\n\r\nВеличины, обладающие упомянутым свойством, называют инвариантами. Здесь упомянуто множество инвариантов СТО, некоторый интерес среди них представляет инвариантная масса.\r\n\r\nОбщая теория относительности\r\nСразу предупреждаю, что я не являюсь специалистом в этой части физики, так что напишу о том, про что слегка помню из курса физтеха и из разных источников, вроде Википедии.\r\n\r\nВ первую очередь следует упомянуть принцип общей ковариантности. Он является модификацией первого из упомянутых мною постулатов СТО и может быть сформулирован в следующем виде:\r\n\r\nМатематические уравнения, описывающие законы природы, должны не изменять своего вида и быть справедливыми при преобразованиях к любым координатным системам, то есть быть ковариантными относительно любых преобразований координат.\r\n\r\nОтличие ОТО от СТО я хотел бы начать с того, что метрический тензор в ОТО получает отличие от вида тензора Минковского, при этом сохраняет как минимум одно его свойства:\r\n\r\nгде символ * я тут применил в смысле комплексного сопряжения. Конечно по определению не очень хорошо вводить метрику с комплексными элементами тензора, но физика не всегда оперирует действительными величинами, так что оставлю выражение в таком виде. В общем случае можно попробовать подставить в уравнения вообще любой (то есть не действительный) вид метрики, но Вы тогда можете получить комплексный тензор энергии-импульса. Все компоненты метрического тензора могут зависеть от координат, но при этом эти зависимости должны оставаться достаточно гладкими, так как тензор является решением дифференциального уравнения.\r\n\r\nПонятие кривизны пространства-времени вводится в ОТО через такие понятия, как символы Кристоффеля и ковариантную производную (в необходимом мне смысле ковариантная производная записана здесь).\r\n\r\nТензор кривизны впервые введен немецким математиком Бернхардом Риманом в работе «Ueber die Hypothesen, welche der Geometrie zu Grunde liegen» ([1]), впервые опубликованной уже после смерти Римана. С помощью упомянутых выше символов этот тензор четвертого ранга можно записать в таком виде:\r\n\r\nИ достаточным условием того, что все компоненты тензора кривизны будут равны нулю, будет равенство нулю всех символов Кристоффеля:\r\n\r\nТривиальным условием для выполнения этого будет диагональность матрицы g и условие для любой перестановки индексов\r\n\r\n\r\nТеперь перейду к тому, как получить пространство-время с нулевым тензором кривизны, а точнее — тензором Риччи. Тензором Риччи называют свертку тензора кривизны по первому и последнему индексу:\r\n\r\nЗабегая вперед скажу, что согласно уравнению Эйнштейна нулевой тензор Риччи может быть только в пустом пространстве (когда все компоненты тензора энергии-импульса равны нулю). В таком пространстве мы не получим гравитации по теории Ньютона. Желающие могут попробовать найти такую метрику, которая отличная от метрики Минковского, но сохраняет нулевой тензор Риччи. Возможно, что Вы откроете гравитационные волны.\r\n\r\nПроведя свертку тензора Риччи по оставшимся 2 индексам мы получим скалярную кривизну:\r\n\r\nТеперь перейду к самому уравнению Эйнштейна, также известному как уравнение Эйнштейна-Гильберта.\r\n\r\nКратко о роли Гильберта в создании уравнения ЭйнштейнаЦитата из Википедии:\r\n\r\nЛетом 1915 года Эйнштейн приехал в Гёттингенский университет, где прочитал ведущим математикам того времени, в числе которых был и Гильберт, лекции о важности построения физической теории гравитации и имевшихся к тому времени у него наиболее перспективных подходах к решению проблемы и её трудностях. Между Эйнштейном и Гильбертом завязалась переписка с обсуждением данной темы, которая значительно ускорила завершение работы по выводу окончательных уравнений поля. До недавнего времени считалось, что Гильберт получил эти уравнения на 5 дней раньше, но опубликовал позже: Эйнштейн представил в Берлинскую академию свою работу, содержащую правильный вариант уравнений, 25 ноября, а заметка Гильберта «Основания физики» была озвучена 20 ноября 1915 года на докладе в Гёттингенском математическом обществе и передана Королевскому научному обществу в Гёттингене, за 5 дней до Эйнштейна (опубликована в 1916 году). Однако в 1997 году была обнаружена корректура статьи Гильберта от 6 декабря, из которой видно, что Гильберт выписал уравнения поля в классическом виде не на 5 дней раньше, а на 4 месяца позже Эйнштейна. В ходе завершающей правки Гильберт вставил в свою статью ссылки на параллельную декабрьскую работу Эйнштейна, добавил замечание о том, что уравнения поля можно представить и в ином виде (далее он выписал классическую формулу Эйнштейна, но без доказательства)...\r\nПри выводе уравнения гравитационного поля ученые применили 2 принципа:\r\n\r\n\r\nпринцип общей ковариантности\r\nпредположение о том, что в приближении слабого гравитационного потенциала уравнения механики должны сводиться к механике СТО с ньютоновской гравитацией\r\n\r\nС учетом этого было получено, что действие гравитационного поля может быть функцией только 2 величин — скалярной кривизны R (в отсутствии гравитирующих масс и прочих энергий кривизна должна быть равна нулю) и определителя метрического тензора g (для метрики Минковского g = -1).\r\n\r\nЭти утверждения я считаю доказанными учеными. Другие ученые могли вводить модификацию действия Эйнштейна, наиболее известный пример — теория Бранса-Дикке. Достаточных доказательств этих теорий в наблюдениях пока не получено. Желающие изучить саму теорию могут почитать например здесь.\r\nС учетом введенных выше обозначений уравнение Эйнштейна можно записать в следующем виде:\r\n\r\nгде G — гравитационная постоянная. Краткий смысл уравнения можно сформулировать так:\r\n\r\n\r\nИсточником искривления пространства-времени является тензор энергии-импульса всей материи и энергии в этом пространстве.\r\n\r\nВ данном случае я не упоминаю темную энергию (космологическую постоянную), хотя и считаю её наличие в глобальных масштабах следующим из астрономических наблюдений.\r\n\r\nКвантовая механика\r\nКвантовая механика была создана физиками для описания микроскопических систем. Одним из первых достижений квантовой теории, подтверждавшейся в наблюдаемых данных, была полуклассическая модель атома Н. Бора, созданная в 1913 году. Я применю для записи уравнений квантовой механики такую вольность — обозначу приведенную постоянную Планка буквой h (вместо символа "h с чертой"). Постулат теории Бора, имеющий минимальное отношение к настоящей квантовой механике, это постулат о квантовании момента импульса электрона массы m на «орбитах» в атоме:\r\n\r\n\r\n\r\nгде n — натуральное число (в настоящей квантовой механике момент импульсам может быть 0, но это число n, называемое «главное квантовое число», является натуральным).\r\n\r\nДальнейшим этапом развития квантовой механики было формулирование Э. Шрёдингером уравнения, названного позднее его именем. Это уравнение записывается через особый оператор, называемый «гамильтониан». Оператор получатся из функции Гамильтона путем замены классического импульса на оператор импульса:\r\n\r\n\r\n\r\nгде x — обобщенная координата, соответствующая классическому обобщенному импульсу px.\r\n\r\nВ общем случае уравнение Шрёдингера записывается для волновой функции (обозначается греческой буквой «пси») как нестационарное:\r\n\r\n\r\n\r\nздесь применен частный случай, когда в функции Гамильтона классической системы обобщенный импульс имеет вид обычного классического импульса. А для случая консервативных систем уравнение Шрёдингера может быть записано в стационарной форме, которая может рассматриваться как уравнение для нахождения собственных функций и собственных значений оператора Гамильтона:\r\n\r\n\r\n\r\nгде E — соответствующее собственное значение оператора.\r\n\r\nДля рассмотрения перехода от квантовой механики к классической рассмотрим замену волновой функции в уравнении Шрёдингера на следующую переменную:\r\n\r\n\r\n\r\nУравнение Шрёдингера можно решать путем разложения функции S (имеющей размерность действия) по степеням постоянной Планка:\r\n\r\n\r\n\r\nПосле подстановки функции S в уравнение получает следующий вид:\r\n\r\n\r\n\r\nгде константа A была сокращена.\r\n\r\nДля получения уравнения классической механики (известного как уравнение Гамильтона-Якоби) нам следует указать, что величина действия S на любой классической траектории имеет величину много больше, чем постоянная Планка. После этого последний член уравнения может быть откинут.\r\n\r\nПри необходимости более точного решения уравнения применяется упомянутое выше разложение действия по степеням h. Функция S1 находится как решение уравнения Гамильтона-Якоби, после чего подставляется в систему уравнений, полученную путем разложения уравнения по степеням h (то есть что левая и правая часть должна совпасть или при переносе в одну сторону коэффициенты условного полинома должны стать равны нулю).\r\n\r\nИдеология приближенного решения уравнения Шрёдингера (точнее — нахождения поправок к уровням энергии) может быть сформулирована так:\r\nИспользуя волновые функции невозмущенного гамильтониана H0 и величину возмущения H1 (равную H — H0) путем нескольких итераций можно найти новые уровни энергии E.\r\n\r\nГамильтониан физической системы представляется в виде:\r\n\r\n\r\n\r\nгде… подразумевают, что в разных случаях нам требуется учесть разное число поправок, которые, как правило, имеют разный порядок малости. Эти поправки к гамильтониану называются возмущениями, а волновые функции гамильтониана H1 должны быть точно известны. Соответствующая теория решения уравнения называется "теория возмущений".\r\nЕсли нам известны волновые функции гамильтониана H1, то они образуют базис линейного пространства (ЕМНИП). Это означает, что вообще любая волновая функция может быть представлена в виде линейной комбинации волновых функций невозмущенного гамильтониана. С учетом этого можно показать, что первый порядок теории возмущений приводит к изменению энергии уровня под номером n на величину\r\n\r\n\r\n\r\nДанное выражение называется матричным элементом оператора H2 по волновым функциям, соответствующим состояниям с номерами n и n.\r\n\r\nСамое первое (по времени открытия) и (ЕМНИП) самое большое по величине отклонение уровней энергии атома водорода от предсказания нерелятивистской квантовой механики может быть получено при условии подстановки в виде возмущения гамильтониана системы оператора кинетической энергии в форме формулы (2):\r\n\r\n\r\n\r\nВы могли увидеть, что эта величина отрицательна. Тут есть 2 замечания. Во первых, оператор импульса здесь соответствует релятивистскому импульсу, который может превысить mc — значит в релятивистском случае растет и первый член в разложении кинетической энергии. Во вторых, к тому моменту, как формула 2 начинает падать с ростом импульса, Вы точно знаете, что должны были учесть:\r\n\r\n\r\nследующий член разложения; \r\nследующий порядок теории возмущений; \r\nмножество поправок к физической модели (размер и форму ядра, магнитный момент электрона и ядра, приведенную массу электрона). \r\n \r\nПо моим весьма условным прикидкам такой метод усложнения модели может работать для расчета энергии уровня энергии 1s на ряде химических элементов от водорода до лантана (включительно), а для более высоких уровней энергии — и дальше (с учетом поправки на то, что в расчете например второго порядка теории возмущений используется значение этого самого уровня, то есть уже идет погрешность). Для этих атомов уже требуется учитывать уравнение Дирака, а для наиболее точного (на современном уровне развития) отображения реального мира необходимо учитывать квантовую теорию (электромагнитного) поля.\r\n\r\nВместо послесловия\r\nНа этом я заканчиваю свой обзор, так как он приблизился к границам моей области знаний. Но наука не стоит на месте. За 100 лет после формулировки ОТО были открыты гравитационные волны, а за 100 лет после формулировки постулатов Бора был открыт целый набор элементарных частиц и, фактически, 3 новых фундаментальных взаимодействия. СТО и квантовая механика уже нашли применение в практических устройствах (речь идет не только про экспериментальные научные установки, но и про множество оптических устройств).\r\n\r\nСписок упомянутых источников:\r\n1. Ueber die Hypothesen, welche der Geometrie zu Grunde liegen // Abhandlungen der Königlichen Gesellschaft der Wissenschaften zu Göttingen, vol. 13, 1867	https://habr.com/ru/post/440266/	1ef080ca-09a9-474e-afa6-71cea68b971e
38	Тренинг Cisco 200-125 CCNA v3.0. День 5. Подключение устройств CISCO и режимы IOS	Сеть CISCO	Сегодня мы рассмотрим подключение устройств Cisco и различные режимы IOS. Те, кто только начинают знакомиться с Cisco, наверняка впервые видят это устройство. Это маршрутизатор Cisco 1921. По каким же признакам можно узнать, что это именно роутер?\r\n\r\n\r\n\r\nПервое, что дает вам подсказку – это выключатель питания. Запомните, что свитчи Сisco не имеют выключателя. Кроме того, свитч обязательно будет иметь несколько портов, потому что он представляет собой коммутатор с 12, 24 или большим количеством портов. \r\n\r\nКак правило, роутер имеет 2 гигабитных порта, и, возможно, быстрый Ethernet-порт. Слева вы видите свободное пространство, прикрытое заглушками. Оно предназначено для дополнительных модулей, и в принципе, сюда можно вставить модуль свитча, но обычно роутер просто имеет пару портов для подключения свитчей и кабеля интернет.\r\n\r\nКонечно, как специалисту CCNA вам нужно будет знать, что представляет собой маршрутизатор, какие бывают серии роутеров и свитчей, но это уже другой разговор. Итак, все устройства производства Сisco имеют эти два порта: консольный порт, помеченный меткой светло-голубого цвета, и расположенный над ни порт AUX. Оба эти порта предназначены для внешней конфигурации устройства, то есть вы можете получить доступ к устройству, даже если операционная система не работает. Проще говоря, через эти порты можно осуществить загрузку роутера.\r\n\r\nПопробуем сравнить роутер с вашим домашним компьютером. Большинство из нас могли бы помочь родственнику или другу с компьютерной проблемой, если кто из них позвонит вам и скажет, что их компьютер не работает. Вы можете удаленно подключиться к чужому компьютеру с помощью Тeam viewer или любой другой программы для удаленного доступа, найти решение проблемы и затем установить нужное программное обеспечение, после чего компьютер необходимо перезагрузить.\r\n\r\nВы можете его перезагрузить, но в момент перезагрузки компьютер вашего друга «мертв», вы не видите, что происходит на его экране во время загрузки до появления операционной системы, поэтому просите своего родственника или друга рассказывать вам по телефону, что изображается на мониторе в это время. Если проблема не решена, то вы не сможете понять, в чем заключается её причина, так как не видите процесса загрузки. Но как специалист IT индустрии, вы обязаны видеть, что происходит, для того, чтобы принять решение, что нужно делать дальше для устранения проблемы. \r\n\r\nПоэтому вы должны иметь возможность удалённо наблюдать процесс загрузки, вы должны видеть BIOS, его настройки, должны иметь возможность проверить все эти вещи. Консольный порт роутера позволяет всё это проделать. Подсоединившись к нему, вы можете наблюдать все, что происходит с роутером в момент загрузки до того, как будет загружена операционная система Cisco IOS.\r\n\r\nВ чем заключается разница между портами Console и AUX? Для консольного порта используется специальный консольный кабель Cisco такого же светло-голубого цвета, каким помечен порт роутера. Его также называют rollover-кабель. На одном конце этого кабеля имеется разъём 8Р8С, похожий на стандартный разъем RJ45, а с другой стороны – разъем для подключения к компьютеру.\r\n\r\nПорт AUX выполняет аналогичную функцию, но обычно используется для подключения модема. Пользователь также может подключиться к нему, чтобы удаленно настроить роутер. \r\nПроблема консольного кабеля, изображенного на слайде, заключается в том, что он может быть подключен только к серийному порту компьютера, однако у большинства современных компьютеров нет такого порта. В данном случае можно использовать кабель-конвертер, который изображен слева. Он позволяет подключить устройство с серийным разъемом к USB-порту компьютера. \r\n\r\nЕсли вы используете этот конвертер, вам потребуется установить USB-драйвер, при установке которого ваш компьютер автоматически получит COM-порт. Таким образом вы сможете подсоединиться к роутеру с помощью специального ПО.\r\n\r\nСовременные модели роутеров Cisco имеют USB-порт, и если вы видите, что он находится в зоне расположения синей полоски консольного порта, значит, это консольный порт USB. Это означает, что если вы будете использовать обычный USB-кабель с разъемом miniUSB с одного конца, то сможете подсоединить роутер к USB-порту компьютера другим концом кабеля. Cisco предоставляет специальный Cisco Windows USB драйвер, который создает COM-порт на компьютере. После этого вы можете использовать терминальную программу, которую видите на следующем слайде, и соединиться с устройством через компьютер. \r\n\r\nКаждый роутер имеет порт Gigabit Ethernet, обозначенный светло-желтой меткой, который позволяет подсоединиться к другому сетевому устройству. Рядом с ним вы видите еще один USB-порт. Как я уже говорил, маршрутизаторы последних серий оборудованы такими портами для передачи и сохранения образа IOS на внешнем носителе. Разница между этими двумя портами, miniUSB и USB, состоит в том, что первый — это консольный порт, а второй предназначен для подключения внешнего устройства для хранения информации, например, флеш-памяти. В следующих сериях видеоуроков мы более подробно рассмотрим свитчи и роутеры, а из этого видеоурока вам нужно в первую очередь запомнить, где находится консольный порт и как выглядит консольный кабель. \r\n\r\n\r\n\r\nПосле того, как роутер подсоединился к компьютеру с помощью консольного кабеля через консольный порт, мы можем использовать терминальную программу. Существует 4 наиболее популярных программы для терминального управления: бесплатная PuTTY, я предпочитаю называть её «Путти», хотя некоторые зовут её «Патти», и я не знаю, как правильней. Эту программу можно свободно скачать на сайте putty.org. Существуют ещё 3 аналогичных программы, из которых TeraTerm и HyperTerm также имеют бесплатные версии. Лично я являюсь большим поклонником Secure SRT, поверьте мне, после того, как вы попробуете эту программу, вы даже не посмотрите в сторону другого терминального ПО. \r\n\r\nНо вы можете использовать ту программу, которая вам больше понравиться. Любое терминальное ПО имеет базовые настройки конфигурации, в которых вы должны выбрать параметр Serial в качестве типа соединения с устройством, скорость обмена данными с устройствами, которая для всех устройств Cisco равна 9600, и номер серийного порта, через который осуществляется соединение, в данном случае это COM1. \r\n\r\nБольшинство компьютеров имеют хотя бы один серийный порт, но если его нет, нужно использовать кабель-конвертер Serial to USB. В этом случае нужно установить драйвер для серийного порта USB, который станет портом COM1. Для этого вам понадобиться зайти в Диспетчер устройств компьютера, существует несколько способов, как это сделать. После того, как вы откроете Диспетчер устройств, вам следует раскрыть список «Порты COM & LPT» и выбрать порт, к которому подсоединён роутер. Если это порт COM1, то вы указываете его в строке Serial line и щелкаете кнопку Open, которая открывает ваш терминальный сеанс связи с устройством. \r\nПосле этого вы попадаете в процесс загрузки роутера. В правом окне я выделил синим цветом сжатый образ операционной системы IOS. \r\n\r\n\r\n\r\nПосле его распаковки на экране появится вся информация о технических характеристиках роутера, лицензия на право использования ПО и прочее. Здесь также показывается версия прошивки роутера, в нашем случае это 15.1, а в конце загрузки появится диалог конфигурации системы. В любом устройстве Cisco, будь то свитч или роутер, имеется такая командная строка. Я рекомендую вам всегда выбирать ответ No на предложение «Продолжить с диалогом конфигурации»?\r\n\r\n\r\n\r\nДело в том, что при продолжении диалога вы войдете в настройки, большинство из которых на сегодня не поддерживается, поэтому лучшим выбором будет отказаться от предложения его использовать и вернуться к командной строке. \r\n\r\nПервый режим, который поддерживают все эти устройства, это пользовательский режим EXEC. Это начальный, низший режим доступа к настройкам устройства. Каким образом вы можете узнать, что перед вам пользовательский режим EXEC? На это указывает знак закрытой скобки > после слова Router. Если вы видите этот знак, значит, вы находитесь в пользовательском режиме EXEC. \r\nОсобенностью Cisco IOS является то, что если вы напечатаете в командной строке знак вопроса, перед вами раскроется список команд, которые можно использовать в данном режиме. \r\n\r\n\r\n\r\nЭто базовые команды для начального уровня доступа, но вы можете также ввести такую команду, как быстрый просмотр IP-интерфейса Router>show ip int br и увидеть состояние подключения к данному роутеру для портов Gigabit Ethernet. \r\n\r\n\r\n\r\nЕсли ввести команду «Показать привилегии», роутер сообщит, что уровень привилегий равен 1, то есть вы работаете в пользовательском режиме EXEC.\r\n\r\nСледующим, более старшим режимом управления конфигурации, является привилегированный режим EXEC. Сейчас я покажу, как использовать этот режим. Но сначала расскажу ещё об одной хорошей черте Cisco IOS – она настолько «умна», что понимает ввод сокращенных команд. \r\n\r\n\r\n\r\nКогда я набираю «show privi», программа понимает, что имеется в виду слово «privileges», то есть я прошу показать мне привилегии. Если я просто введу в качестве команды букву е, то программа сообщит, что на эту букву начинаются 2 команды – enable и exit, поэтому мне необходимо набрать ещё несколько букв, чтобы она поняла, какая именно команда имеется в виду. \r\n\r\nНапример, если я напечатаю en, система поймёт, что имеется ввиду команда enable, поэтому как при полном наборе команды, так и при частичном наборе из двух букв после нажатия Enter программа выполнит правильную команду. Это одна из причин, почему оборудование Cisco настолько популярно в сетевой индустрии. \r\n\r\nИтак, если вы видите значок «хеш» # после слова роутер – Router#, это означает, что вы вошли в привилегированный режим EXEC. В этом режиме вы обладаете большими привилегиями, чем любой простой пользователь Cisco. \r\n\r\nЕсли я напечатаю команду «показать привилегии», система сообщит, что уровень привилегий равен 15, это наивысший уровень привилегий. На этом уровне вам доступно намного больше команд конфигурации оборудования, чем в пользовательском режиме EXEC. С помощью этих команд вы можете зайти в режим глобальной конфигурации, вы можете сохранять, читать и удалять конфигурации и выполнять множество вещей, недоступных в пользовательском режиме. \r\nСледующий режим Cisco IOS носит название «режим глобальной конфигурации». В него можно попасть, если набрать в командной строке configure terminal.\r\n\r\n\r\n\r\nВ этом режиме после слова Router будет не просто символ «решетки», а слово (config) с «решеткой». Поэтому если вы видите в строке Router(config)#, значит, вы находитесь в режиме глобальной конфигурации. В этом режиме вы можете внести изменения в саму операционную систему Cisco IOS. Например, если вы хотите изменить имя хоста данного устройства, вы печатаете в строке hostname NetworKing, и после этого вы видите, что имя хоста маршрутизатора Router изменилось на NetworKing. \r\n\r\n\r\n\r\nВ этом режиме вы можете вносить в систему любые изменения, какие захотите. Отсюда вы можете попасть на различные уровни. На следующем слайде показано, что именно вы можете делать, находясь в различных режимах. Например, в пользовательском режиме EXEC вы можете пинговать устройства, просматривать конфигурацию и включать некоторые параметры. В привилегированном режиме можно выполнять все команды пользовательского режима, команды отладки, перезагрузки, конфигурации и т.д. В режиме глобальной конфигурации можно управлять именем хоста, активировать скрытые параметры конфигурации и параметры IP конфигурации. Кроме того, здесь имеются три уровня конфигурации, каждый из которых имеет свой набор команд. \r\n\r\n\r\n\r\nНа уровне конфигурации интерфейса можно управлять параметрами конкретного интерфейса, на уровне конфигурации роутера можно управлять всеми параметрами роутера, и т.д. \r\nНапример, отсюда вы можете настроить IP-адрес для порта Gigabit Ethernet, задав параметр 0/0. Если в командной строке появляется заголовок вида NetworKing(config-if)#, то символы if означают, что вы находитесь в режиме глобальной конфигурации интерфейса. Это означает, что все изменения настроек, которые вы совершите, будут применены только к конкретному интерфейсу. \r\n\r\nЕсли вы напечатаете вопросительный знак, то перед вами появится список команд, которые можно ввести в этом режиме для соответствующих параметров конфигурации: ip, ipv6, mac-адреса и так далее, причем все эти команды относятся только к конкретному, выбранному вами интерфейсу. \r\n\r\n\r\n\r\nЕсли ввести команду exit, то вы вернетесь на шаг выше в режим NetworKing(config)#, то есть в режим глобальной конфигурации. Чтобы войти в режим конфигурации параметров роутера, в командной строке нужно набрать router rip. Подсказкой того, что вы теперь находитесь в режиме конфигурации роутера, станет заголовок командной строки вида NetworKing(config-router)#. Все изменения, которые я буду делать в этом режиме, будут относиться только к этому протоколу маршрутизации. Если напечатать знак вопроса, то можно ознакомиться со всеми командами и параметрами конфигурации, доступными в данном режиме. \r\n\r\n\r\n\r\nИтак, мы рассмотрели, каким образом можно войти в различные режимы конфигурации маршрутизатора. В этом видеоуроке рассмотрены не все команды, но когда на следующих уроках мы перейдём к подробному изучению свитчей и роутеров, мы рассмотрим команды более подробно.\r\n\r\nМы не будем касаться абсолютно всех команд, потому что специалисту CCNA не нужно знать все команды, но мы рассмотрим большинство команд, имеющих отношение к вашему экзамену CCNA. Думаю, я охватил всё, о чем планировал рассказать в этом видеоуроке, так что благодарю вас за просмотр. Если у вас имеются вопросы, пишите мне на почту или оставляйте свои комментарии прямо под этим видео.\r\n\r\n\r\nСпасибо, что остаётесь с нами. Вам нравятся наши статьи? Хотите видеть больше интересных материалов? Поддержите нас оформив заказ или порекомендовав знакомым, 30% скидка для пользователей Хабра на уникальный аналог entry-level серверов, который был придуман нами для Вас: Вся правда о VPS (KVM) E5-2650 v4 (6 Cores) 10GB DDR4 240GB SSD 1Gbps от $20 или как правильно делить сервер? (доступны варианты с RAID1 и RAID10, до 24 ядер и до 40GB DDR4).\r\n\r\nVPS (KVM) E5-2650 v4 (6 Cores) 10GB DDR4 240GB SSD 1Gbps до весны бесплатно при оплате на срок от полугода, заказать можно тут.\r\n\r\nDell R730xd в 2 раза дешевле? Только у нас 2 х Intel Dodeca-Core Xeon E5-2650v4 128GB DDR4 6x480GB SSD 1Gbps 100 ТВ от $249 в Нидерландах и США! Читайте о том Как построить инфраструктуру корп. класса c применением серверов Dell R730xd Е5-2650 v4 стоимостью 9000 евро за копейки?	https://habr.com/ru/company/ua-hosting/blog/440612/	1ef080ca-09a9-474e-afa6-71cea68b971e
39	Дайджест интересных материалов для мобильного разработчика #286 (11 — 17 февраля)	маркетинг мобильных приложений аналитика монетизация	В нашем новом дайджесте рассказы про MAPS.ME и ABBYY Mobile, диалоги в Android и обучение через Minecraft, локализацию и беспилотный трамвай. \r\n\r\n\r\n\r\n\r\n\r\n\r\nOh, My Code: Как работает MAPS.ME\r\n\r\n MAPS.ME — карты №1 для путешественников. Сегодня это 110 млн установок по всему миру, возможность добавлять авторские туристические маршруты и самостоятельно менять карты. Как работает уникальный проект для путешественников, рассказывает его руководитель Евгений Лисовский. \r\n\r\n\r\nЗачем разработчикам ABBYY Mobile нейросети, музей и Random Coffee\r\n\r\n В этом посте мы расскажем и покажем, как устроена изнутри жизнь и работа ABBYY Mobile, какие технологии мы разрабатываем, куда ездим в командировки и многое другое. \r\n\r\nЭтот дайджест доступен в виде еженедельной рассылки. А ежедневно новости мы рассылаем в Telegram-канале.\r\n\r\n iOS\r\n\r\n• Apple обязала разработчиков использовать двухфакторную аутентификацию\r\n• Успешное проектирование для iOS\r\n• Тысячи порно и гемблинг приложений используют корпоративные сертификаты для обхода App Store\r\n• Как я изучил Swift и выпустил своё приложение\r\n•  Практический MVVM + RxSwift\r\n•  Советы по ускорению вашего iOS-приложения\r\n•  Быстрый способ сделать приложение быстрее\r\n•  Скрываем сторонние зависимости с помощью протоколов и расширений\r\n•  В Swift 5 сделали возможным создавать бинарные фреймворки\r\n•  Продвинутые координаторы в iOS\r\n•  Советы по работе с кастомными View Controller-ами\r\n•  Регулярные выражения в Swift\r\n\r\n Android\r\n\r\n• (+19) Как создать приложение дополненной реальности с помощью ARCore\r\n• (+16) Свежий взгляд на отображение диалогов в Android\r\n• (+9) Retain внутри, а снаружи ViewModel\r\n•  Android Dev Podcast #87. JNI, NDK, private API, инструменты низкоуровневой разработки\r\n• Google переориентирует Android Things на колонки и дисплеи\r\n• Google тестирует дополненную реальность в Картах\r\n•  Google по ошибке уничтожил наш бизнес\r\n•  Kotlin vs Java: что выбрать для Android-разработки\r\n•  Null это ваш друг, а не ошибка\r\n•  Викторина по Android №2\r\n•  Заполняем пробелы автозаполнения в Android\r\n•  Модульность в Android: архитектурная точка зрения\r\n•  Android Developers Backstage 108: мгновенный перезапуск\r\n\r\n Разработка\r\n\r\n• (+27) Особенности подходов к дизайну в реальном производственном секторе\r\n• (+27) Создаём голосовое приложение на примере Google Assistant\r\n• Talk to Ri: изучение английского языка для разработчиков\r\n• Podlodka #98: Kanban\r\n• Самые популярные в США приложения для общения рабочих команд\r\n• Microsoft опубликовала курс обучения детей программированию в Minecraft\r\n• Google открыл Docs API\r\n• Яндекс запустил сервис для обучения IT-профессиям\r\n• Как совмещать работу и разработку своих игр\r\n• Не спрашивайте пользователей, чего они хотят?—? лучше задайте эти 3 вопроса\r\n• Recyclemap: редизайн карты для Greenpeace Russia\r\n•  Flutter +MLKit = Любовь\r\n•  Следует ли вам использовать React Native для разработки приложения вашего стартапа?\r\n•  Использование ментальных моделей в продуктовом дизайне\r\n•  5 UX-советов для профессионального онбординга в приложении\r\n•  Тренды разработки ПО 2019\r\n•  Сплеш-скрины? в Android/iOS: лучшие практики и советы\r\n•  Как пустые пространства убивают Enterprise-приложения\r\n•  Главные инструменты DevOps\r\n•  Почему решение не той проблемы гарантированно разрушит ваш проект\r\n•  14 UX эвристик для дизайна мобильных интерфейсов\r\n•  4 причины, почему вы сначала должны сделать дизайн без цвета\r\n•  Уроки разработки на React Native\r\n•  Как писать код, который вы будете любить в будущем\r\n•  Список проверки продуктовой стратегии\r\n\r\n Аналитика, маркетинг и монетизация\r\n\r\n• (+8) Станет ли монетизация пользовательских данных трендом 2019?\r\n• Локализация мобильного survival’a Day R от российского разработчика\r\n• Amazon запустил сервис Moment для поощрения пользователей физическими товарами\r\n• Asteroid: человеко-машинный интерфейс\r\n• Доходы Топ-10 приложений дейтинга в США в 2018 выросли на 53%\r\n• Обзор игрового рынка 2018 от Priori Data\r\n• Рейтинг мобильных рекламных сетей на основе ROI и возвратов\r\n• Траты пользователей iPhone на приложения в США выросли на 36% до $79\r\n• ASO Практикум для начинающих\r\n•  Новые тренды в монетизации для диверсификации доходов вашей игры\r\n\r\n AI, Устройства, IoT\r\n\r\n• (+77) Мечтают ли андроиды об электропанке? Как я учил нейросеть писать музыку\r\n• (+40) Scala + MXNet = Микросервис с нейронкой в проде\r\n• (+46) В Москве протестируют беспилотный трамвай. Мы поговорили с разработчиками автопилота\r\n• (+30) В конце февраля Microsoft представит VR-очки HoloLens 2\r\n• (+28) Удалённое управление UART'ом через Web\r\n• (+22) Как я обучал нейросеть для реализации функции оценки положения на Russian AI Cup CodeBall 2018\r\n• (+21) Видео докладов с FunTech ML-meetup\r\n• (+11) Знакомство с простейшей нейронной сетью и ее пошаговая реализация\r\n• (+8) GPT-2 нейросеть от OpenAI. Быстрый старт\r\n• (+7) Пример простой нейросети на С/C++\r\n• (+2) Russian AI Cup 2018, история 9 места\r\n• Ubisoft и Mozilla разрабатывают ИИ для помощи программистам\r\n•  Ludwig: Code-Free платформа глубокого обучения от Uber\r\n•  ИИ vs Машинное обучение vs Глубокое обучение – какая между ними разница\r\n\r\n< Предыдущий дайджест. Если у вас есть другие интересные материалы или вы нашли ошибку — пришлите, пожалуйста, в почту.	https://habr.com/ru/company/everydaytools/blog/440606/	1ef080ca-09a9-474e-afa6-71cea68b971e
\.


--
-- Name: articles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ismglv
--

SELECT pg_catalog.setval('public.articles_id_seq', 40, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: ismglv
--

COPY public.schema_migrations (version) FROM stdin;
20190218090052
\.


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: ismglv
--

COPY public.students (id, name, surname, uuid, "group") FROM stdin;
1	Bulat	Ismagilov	1ef080ca-09a9-474e-afa6-71cea68b971e	11-502
\.


--
-- Name: students_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ismglv
--

SELECT pg_catalog.setval('public.students_id_seq', 1, true);


--
-- Name: ar_internal_metadata ar_internal_metadata_pkey; Type: CONSTRAINT; Schema: public; Owner: ismglv
--

ALTER TABLE ONLY public.ar_internal_metadata
    ADD CONSTRAINT ar_internal_metadata_pkey PRIMARY KEY (key);


--
-- Name: articles articles_pkey; Type: CONSTRAINT; Schema: public; Owner: ismglv
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: ismglv
--

ALTER TABLE ONLY public.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: students students_pkey; Type: CONSTRAINT; Schema: public; Owner: ismglv
--

ALTER TABLE ONLY public.students
    ADD CONSTRAINT students_pkey PRIMARY KEY (id);


--
-- PostgreSQL database dump complete
--

